<?xml version="1.0" encoding="UTF-8" ?>
<testsuites>
  <testsuite errors="0" failures="0" hostname="Eduardo-Goncalvess-MacBook-Pro.local" id="0" name="DriverPassengerFunctionalTests" package="com.moovt" tests="12" time="7.251" timestamp="2013-08-01T04:17:10">
      <properties />

      <testcase classname="com.moovt.DriverPassengerFunctionalTests" name="testGetCarTypeEnumEnglish" time="2.001" />

      <testcase classname="com.moovt.DriverPassengerFunctionalTests" name="testGetCarTypeEnumPortuguese" time="0.363" />

      <testcase classname="com.moovt.DriverPassengerFunctionalTests" name="testGetActiveStatusEnumEnglish" time="0.202" />

      <testcase classname="com.moovt.DriverPassengerFunctionalTests" name="testGetActiveStatusEnumPortugues" time="0.556" />

      <testcase classname="com.moovt.DriverPassengerFunctionalTests" name="testCreateUserDriverEnglish" time="1.269" />

      <testcase classname="com.moovt.DriverPassengerFunctionalTests" name="testCreateUserPassengerEnglish" time="0.284" />

      <testcase classname="com.moovt.DriverPassengerFunctionalTests" name="testCreateUserPassengerWithTokenEnglish" time="0.253" />

      <testcase classname="com.moovt.DriverPassengerFunctionalTests" name="testUpdateUserDriverEnglish" time="0.908" />

      <testcase classname="com.moovt.DriverPassengerFunctionalTests" name="testUpdateUserPassengerEnglish" time="0.284" />

      <testcase classname="com.moovt.DriverPassengerFunctionalTests" name="testRetrieveAllUsersrEnglish" time="0.612" />

      <testcase classname="com.moovt.DriverPassengerFunctionalTests" name="testRetrieveUserDetailByIdEnglish" time="0.238" />

      <testcase classname="com.moovt.DriverPassengerFunctionalTests" name="testRetrieveLoggedUserDetailsIdEnglish" time="0.237" />

      <system-out><![CDATA[--Output from testGetCarTypeEnumEnglish--
Switching to browser client [default]
Creating to new client [default] of type [class com.grailsrocks.functionaltest.client.BrowserClient]

== Making request POST http://localhost:8080/moovt/driver/getCarTypeEnum parameters: ==
== Request headers: ============================================================
Accept-Language: en-US
Accept-Encoding: gzip, deflate
Content-Type: application/json
Accept: */*
== Content =====================================================================

				{}
				
================================================================================
Interceptor createPage: TopLevelWindow[name=""]
Content of web window [TopLevelWindow[name=""]] changed
== Response was 200 (OK) headers: ==============================================
================================================================================
== Content =====================================================================
{"carTypes":[{"code":"A_SEDAN","description":"Sedan"},{"code":"B_VAN","description":"Van"},{"code":"C_LIMO","description":"Limo"}]}
================================================================================
#
--Output from testGetCarTypeEnumPortuguese--
Switching to browser client [default]
Creating to new client [default] of type [class com.grailsrocks.functionaltest.client.BrowserClient]

== Making request POST http://localhost:8080/moovt/driver/getCarTypeEnum parameters: ==
== Request headers: ============================================================
Accept-Language: pt-BR
Accept-Encoding: gzip, deflate
Content-Type: application/json
Accept: */*
== Content =====================================================================

				{}
				
================================================================================
Interceptor createPage: TopLevelWindow[name=""]
Content of web window [TopLevelWindow[name=""]] changed
== Response was 200 (OK) headers: ==============================================
================================================================================
== Content =====================================================================
{"carTypes":[{"code":"A_SEDAN","description":"Sedan"},{"code":"B_VAN","description":"Van"},{"code":"C_LIMO","description":"Limo"}]}
================================================================================
#
--Output from testGetActiveStatusEnumEnglish--
Switching to browser client [default]
Creating to new client [default] of type [class com.grailsrocks.functionaltest.client.BrowserClient]

== Making request POST http://localhost:8080/moovt/driver/getActiveStatusEnum parameters: ==
== Request headers: ============================================================
Accept-Language: en-US
Accept-Encoding: gzip, deflate
Content-Type: application/json
Accept: */*
== Content =====================================================================

				{}
				
================================================================================
Interceptor createPage: TopLevelWindow[name=""]
Content of web window [TopLevelWindow[name=""]] changed
== Response was 200 (OK) headers: ==============================================
================================================================================
== Content =====================================================================
{"activeStatuses":[{"code":"ENABLED","description":"Enabled"},{"code":"DISABLED","description":"Disabled"}]}
================================================================================
#
--Output from testGetActiveStatusEnumPortugues--
Switching to browser client [default]
Creating to new client [default] of type [class com.grailsrocks.functionaltest.client.BrowserClient]

== Making request POST http://localhost:8080/moovt/driver/getActiveStatusEnum parameters: ==
== Request headers: ============================================================
Accept-Language: pt-BR
Accept-Encoding: gzip, deflate
Content-Type: application/json
Accept: */*
== Content =====================================================================

				{}
				
================================================================================
Interceptor createPage: TopLevelWindow[name=""]
Content of web window [TopLevelWindow[name=""]] changed
== Response was 200 (OK) headers: ==============================================
================================================================================
== Content =====================================================================
{"activeStatuses":[{"code":"ENABLED","description":"Ativo"},{"code":"DISABLED","description":"Inativo"}]}
================================================================================
#
--Output from testCreateUserDriverEnglish--
Switching to browser client [default]
Creating to new client [default] of type [class com.grailsrocks.functionaltest.client.BrowserClient]

== Making request POST http://localhost:8080/moovt/user/createUser parameters: ==
== Request headers: ============================================================
Accept-Language: en-US
Accept-Encoding: gzip, deflate
Content-Type: application/json
Accept: */*
== Content =====================================================================

				{"tenantname":"WorldTaxi","firstName":"David","lastName":"Ultrafast","username":"dultrafast","password":"Welcome!1","phone":"773-329-1784","email":"dultrafast@worldtaxi.com","locale":"en-US","driver":{"carType" : {"code" : "A_SEDAN","description" : "Sedan"},"servedLocation":{"locationName":"ARua Major Lopes, 55","politicalName":"Belo Horizonte, MG, BR","latitude":-19.9413628,"longitude":-43.9373064,"locationType":"RANGE_INTERPOLATED"},"activeStatus":{"code" : "ENABLED"}}}
				
================================================================================
Hibernate: select this_.id as id3_0_, this_.version as version3_0_, this_.created_by as created3_3_0_, this_.date_created as date4_3_0_, this_.last_updated as last5_3_0_, this_.last_updated_by as last6_3_0_, this_.name as name3_0_ from tenant this_ where this_.name=? limit ?
Hibernate: select this_.id as id8_0_, this_.version as version8_0_, this_.account_expired as account3_8_0_, this_.account_locked as account4_8_0_, this_.apns_token as apns5_8_0_, this_.created_by as created6_8_0_, this_.date_created as date7_8_0_, this_.email as email8_0_, this_.enabled as enabled8_0_, this_.first_name as first10_8_0_, this_.last_name as last11_8_0_, this_.last_updated as last12_8_0_, this_.last_updated_by as last13_8_0_, this_.locale as locale8_0_, this_.`password` as password15_8_0_, this_.password_expired as password16_8_0_, this_.phone as phone8_0_, this_.tenant_id as tenant18_8_0_, this_.username as username8_0_ from user this_ where this_.username=? and this_.tenant_id=?
Hibernate: select this_.id as id8_0_, this_.version as version8_0_, this_.account_expired as account3_8_0_, this_.account_locked as account4_8_0_, this_.apns_token as apns5_8_0_, this_.created_by as created6_8_0_, this_.date_created as date7_8_0_, this_.email as email8_0_, this_.enabled as enabled8_0_, this_.first_name as first10_8_0_, this_.last_name as last11_8_0_, this_.last_updated as last12_8_0_, this_.last_updated_by as last13_8_0_, this_.locale as locale8_0_, this_.`password` as password15_8_0_, this_.password_expired as password16_8_0_, this_.phone as phone8_0_, this_.tenant_id as tenant18_8_0_, this_.username as username8_0_ from user this_ where this_.username=? and this_.tenant_id=?
Hibernate: insert into user (version, account_expired, account_locked, apns_token, created_by, date_created, email, enabled, first_name, last_name, last_updated, last_updated_by, locale, `password`, password_expired, phone, tenant_id, username) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: select this_.id as id8_0_, this_.version as version8_0_, this_.account_expired as account3_8_0_, this_.account_locked as account4_8_0_, this_.apns_token as apns5_8_0_, this_.created_by as created6_8_0_, this_.date_created as date7_8_0_, this_.email as email8_0_, this_.enabled as enabled8_0_, this_.first_name as first10_8_0_, this_.last_name as last11_8_0_, this_.last_updated as last12_8_0_, this_.last_updated_by as last13_8_0_, this_.locale as locale8_0_, this_.`password` as password15_8_0_, this_.password_expired as password16_8_0_, this_.phone as phone8_0_, this_.tenant_id as tenant18_8_0_, this_.username as username8_0_ from user this_ where this_.username=? and this_.tenant_id=?
Hibernate: select this_.id as id8_0_, this_.version as version8_0_, this_.account_expired as account3_8_0_, this_.account_locked as account4_8_0_, this_.apns_token as apns5_8_0_, this_.created_by as created6_8_0_, this_.date_created as date7_8_0_, this_.email as email8_0_, this_.enabled as enabled8_0_, this_.first_name as first10_8_0_, this_.last_name as last11_8_0_, this_.last_updated as last12_8_0_, this_.last_updated_by as last13_8_0_, this_.locale as locale8_0_, this_.`password` as password15_8_0_, this_.password_expired as password16_8_0_, this_.phone as phone8_0_, this_.tenant_id as tenant18_8_0_, this_.username as username8_0_ from user this_ where this_.username=? and this_.tenant_id=?
Hibernate: update user set version=?, account_expired=?, account_locked=?, apns_token=?, created_by=?, date_created=?, email=?, enabled=?, first_name=?, last_name=?, last_updated=?, last_updated_by=?, locale=?, `password`=?, password_expired=?, phone=?, tenant_id=?, username=? where id=? and version=?
Before Insert
Hibernate: insert into location (version, created_by, date_created, last_updated, last_updated_by, latitude, location_name, location_type, longitude, political_name, tenant_id) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: select this_.id as id6_0_, this_.version as version6_0_, this_.authority as authority6_0_, this_.created_by as created4_6_0_, this_.date_created as date5_6_0_, this_.last_updated as last6_6_0_, this_.last_updated_by as last7_6_0_, this_.tenant_id as tenant8_6_0_ from role this_ where this_.tenant_id=? and this_.authority=? limit ?
Hibernate: select this_.id as id8_0_, this_.version as version8_0_, this_.account_expired as account3_8_0_, this_.account_locked as account4_8_0_, this_.apns_token as apns5_8_0_, this_.created_by as created6_8_0_, this_.date_created as date7_8_0_, this_.email as email8_0_, this_.enabled as enabled8_0_, this_.first_name as first10_8_0_, this_.last_name as last11_8_0_, this_.last_updated as last12_8_0_, this_.last_updated_by as last13_8_0_, this_.locale as locale8_0_, this_.`password` as password15_8_0_, this_.password_expired as password16_8_0_, this_.phone as phone8_0_, this_.tenant_id as tenant18_8_0_, this_.username as username8_0_ from user this_ where this_.username=? and this_.tenant_id=?
Hibernate: insert into driver (version, active_status, car_type, created_by, date_created, last_updated, last_updated_by, served_location_id, tenant_id, user_id) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: insert into user_role (created_by, date_created, last_updated, last_updated_by, tenant_id, role_id, user_id) values (?, ?, ?, ?, ?, ?, ?)
Hibernate: select this_.id as id3_0_, this_.version as version3_0_, this_.created_by as created3_3_0_, this_.date_created as date4_3_0_, this_.last_updated as last5_3_0_, this_.last_updated_by as last6_3_0_, this_.name as name3_0_ from tenant this_ where this_.name=? limit ?
Hibernate: select this_.id as id8_0_, this_.version as version8_0_, this_.account_expired as account3_8_0_, this_.account_locked as account4_8_0_, this_.apns_token as apns5_8_0_, this_.created_by as created6_8_0_, this_.date_created as date7_8_0_, this_.email as email8_0_, this_.enabled as enabled8_0_, this_.first_name as first10_8_0_, this_.last_name as last11_8_0_, this_.last_updated as last12_8_0_, this_.last_updated_by as last13_8_0_, this_.locale as locale8_0_, this_.`password` as password15_8_0_, this_.password_expired as password16_8_0_, this_.phone as phone8_0_, this_.tenant_id as tenant18_8_0_, this_.username as username8_0_ from user this_ where this_.tenant_id=? and this_.username=? limit ?
Hibernate: select this_.role_id as role1_4_0_, this_.user_id as user2_4_0_, this_.created_by as created3_4_0_, this_.date_created as date4_4_0_, this_.last_updated as last5_4_0_, this_.last_updated_by as last6_4_0_, this_.tenant_id as tenant7_4_0_ from user_role this_ where this_.tenant_id=? and this_.user_id=?
Hibernate: select this_.role_id as role1_4_0_, this_.user_id as user2_4_0_, this_.created_by as created3_4_0_, this_.date_created as date4_4_0_, this_.last_updated as last5_4_0_, this_.last_updated_by as last6_4_0_, this_.tenant_id as tenant7_4_0_ from user_role this_ where this_.tenant_id=? and this_.user_id=?
Interceptor createPage: TopLevelWindow[name=""]
Content of web window [TopLevelWindow[name=""]] changed
== Response was 200 (OK) headers: ==============================================
================================================================================
== Content =====================================================================
{"result":{"type":"USER","code":"SUCCESS","message":"User dultrafast created"}, "additionalInfo":{"JSESSIONID":"970C8C030E2F89A349FBBC31DD3C6CB4"}}
================================================================================
#
--Output from testCreateUserPassengerEnglish--
Switching to browser client [default]
Creating to new client [default] of type [class com.grailsrocks.functionaltest.client.BrowserClient]

== Making request POST http://localhost:8080/moovt/user/createUser parameters: ==
== Request headers: ============================================================
Accept-Encoding: gzip, deflate
Content-Type: application/json
Accept: */*
== Content =====================================================================

				{"tenantname":"WorldTaxi","firstName":"John","lastName":"Airjunkie","username":"jairjunkie","password":"Welcome!1","phone":"773-329-1784","email":"jairjunkie@worldtaxi.com","locale":"en-US","passenger":{}}}
				
================================================================================
Hibernate: select this_.id as id3_0_, this_.version as version3_0_, this_.created_by as created3_3_0_, this_.date_created as date4_3_0_, this_.last_updated as last5_3_0_, this_.last_updated_by as last6_3_0_, this_.name as name3_0_ from tenant this_ where this_.name=? limit ?
Hibernate: select this_.id as id8_0_, this_.version as version8_0_, this_.account_expired as account3_8_0_, this_.account_locked as account4_8_0_, this_.apns_token as apns5_8_0_, this_.created_by as created6_8_0_, this_.date_created as date7_8_0_, this_.email as email8_0_, this_.enabled as enabled8_0_, this_.first_name as first10_8_0_, this_.last_name as last11_8_0_, this_.last_updated as last12_8_0_, this_.last_updated_by as last13_8_0_, this_.locale as locale8_0_, this_.`password` as password15_8_0_, this_.password_expired as password16_8_0_, this_.phone as phone8_0_, this_.tenant_id as tenant18_8_0_, this_.username as username8_0_ from user this_ where this_.username=? and this_.tenant_id=?
Hibernate: select this_.id as id8_0_, this_.version as version8_0_, this_.account_expired as account3_8_0_, this_.account_locked as account4_8_0_, this_.apns_token as apns5_8_0_, this_.created_by as created6_8_0_, this_.date_created as date7_8_0_, this_.email as email8_0_, this_.enabled as enabled8_0_, this_.first_name as first10_8_0_, this_.last_name as last11_8_0_, this_.last_updated as last12_8_0_, this_.last_updated_by as last13_8_0_, this_.locale as locale8_0_, this_.`password` as password15_8_0_, this_.password_expired as password16_8_0_, this_.phone as phone8_0_, this_.tenant_id as tenant18_8_0_, this_.username as username8_0_ from user this_ where this_.username=? and this_.tenant_id=?
Hibernate: insert into user (version, account_expired, account_locked, apns_token, created_by, date_created, email, enabled, first_name, last_name, last_updated, last_updated_by, locale, `password`, password_expired, phone, tenant_id, username) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: select this_.id as id8_0_, this_.version as version8_0_, this_.account_expired as account3_8_0_, this_.account_locked as account4_8_0_, this_.apns_token as apns5_8_0_, this_.created_by as created6_8_0_, this_.date_created as date7_8_0_, this_.email as email8_0_, this_.enabled as enabled8_0_, this_.first_name as first10_8_0_, this_.last_name as last11_8_0_, this_.last_updated as last12_8_0_, this_.last_updated_by as last13_8_0_, this_.locale as locale8_0_, this_.`password` as password15_8_0_, this_.password_expired as password16_8_0_, this_.phone as phone8_0_, this_.tenant_id as tenant18_8_0_, this_.username as username8_0_ from user this_ where this_.username=? and this_.tenant_id=?
Hibernate: select this_.id as id8_0_, this_.version as version8_0_, this_.account_expired as account3_8_0_, this_.account_locked as account4_8_0_, this_.apns_token as apns5_8_0_, this_.created_by as created6_8_0_, this_.date_created as date7_8_0_, this_.email as email8_0_, this_.enabled as enabled8_0_, this_.first_name as first10_8_0_, this_.last_name as last11_8_0_, this_.last_updated as last12_8_0_, this_.last_updated_by as last13_8_0_, this_.locale as locale8_0_, this_.`password` as password15_8_0_, this_.password_expired as password16_8_0_, this_.phone as phone8_0_, this_.tenant_id as tenant18_8_0_, this_.username as username8_0_ from user this_ where this_.username=? and this_.tenant_id=?
Hibernate: update user set version=?, account_expired=?, account_locked=?, apns_token=?, created_by=?, date_created=?, email=?, enabled=?, first_name=?, last_name=?, last_updated=?, last_updated_by=?, locale=?, `password`=?, password_expired=?, phone=?, tenant_id=?, username=? where id=? and version=?
Hibernate: select this_.id as id6_0_, this_.version as version6_0_, this_.authority as authority6_0_, this_.created_by as created4_6_0_, this_.date_created as date5_6_0_, this_.last_updated as last6_6_0_, this_.last_updated_by as last7_6_0_, this_.tenant_id as tenant8_6_0_ from role this_ where this_.tenant_id=? and this_.authority=? limit ?
Hibernate: select this_.id as id8_0_, this_.version as version8_0_, this_.account_expired as account3_8_0_, this_.account_locked as account4_8_0_, this_.apns_token as apns5_8_0_, this_.created_by as created6_8_0_, this_.date_created as date7_8_0_, this_.email as email8_0_, this_.enabled as enabled8_0_, this_.first_name as first10_8_0_, this_.last_name as last11_8_0_, this_.last_updated as last12_8_0_, this_.last_updated_by as last13_8_0_, this_.locale as locale8_0_, this_.`password` as password15_8_0_, this_.password_expired as password16_8_0_, this_.phone as phone8_0_, this_.tenant_id as tenant18_8_0_, this_.username as username8_0_ from user this_ where this_.username=? and this_.tenant_id=?
Hibernate: insert into passenger (version, created_by, date_created, last_updated, last_updated_by, tenant_id, user_id) values (?, ?, ?, ?, ?, ?, ?)
Hibernate: insert into user_role (created_by, date_created, last_updated, last_updated_by, tenant_id, role_id, user_id) values (?, ?, ?, ?, ?, ?, ?)
Hibernate: select this_.id as id3_0_, this_.version as version3_0_, this_.created_by as created3_3_0_, this_.date_created as date4_3_0_, this_.last_updated as last5_3_0_, this_.last_updated_by as last6_3_0_, this_.name as name3_0_ from tenant this_ where this_.name=? limit ?
Hibernate: select this_.id as id8_0_, this_.version as version8_0_, this_.account_expired as account3_8_0_, this_.account_locked as account4_8_0_, this_.apns_token as apns5_8_0_, this_.created_by as created6_8_0_, this_.date_created as date7_8_0_, this_.email as email8_0_, this_.enabled as enabled8_0_, this_.first_name as first10_8_0_, this_.last_name as last11_8_0_, this_.last_updated as last12_8_0_, this_.last_updated_by as last13_8_0_, this_.locale as locale8_0_, this_.`password` as password15_8_0_, this_.password_expired as password16_8_0_, this_.phone as phone8_0_, this_.tenant_id as tenant18_8_0_, this_.username as username8_0_ from user this_ where this_.tenant_id=? and this_.username=? limit ?
Hibernate: select this_.role_id as role1_4_0_, this_.user_id as user2_4_0_, this_.created_by as created3_4_0_, this_.date_created as date4_4_0_, this_.last_updated as last5_4_0_, this_.last_updated_by as last6_4_0_, this_.tenant_id as tenant7_4_0_ from user_role this_ where this_.tenant_id=? and this_.user_id=?
Hibernate: select this_.role_id as role1_4_0_, this_.user_id as user2_4_0_, this_.created_by as created3_4_0_, this_.date_created as date4_4_0_, this_.last_updated as last5_4_0_, this_.last_updated_by as last6_4_0_, this_.tenant_id as tenant7_4_0_ from user_role this_ where this_.tenant_id=? and this_.user_id=?
Interceptor createPage: TopLevelWindow[name=""]
Content of web window [TopLevelWindow[name=""]] changed
== Response was 200 (OK) headers: ==============================================
================================================================================
== Content =====================================================================
{"result":{"type":"USER","code":"SUCCESS","message":"User jairjunkie created"}, "additionalInfo":{"JSESSIONID":"7A1B40DF2DF32FA03FDBD5BD28248CE5"}}
================================================================================
#
--Output from testCreateUserPassengerWithTokenEnglish--
Switching to browser client [default]
Creating to new client [default] of type [class com.grailsrocks.functionaltest.client.BrowserClient]

== Making request POST http://localhost:8080/moovt/user/createUser parameters: ==
== Request headers: ============================================================
Accept-Encoding: gzip, deflate
Content-Type: application/json
Accept: */*
== Content =====================================================================

				{"tenantname":"WorldTaxi","firstName":"John","lastName":"TestToken","username":"testToken","password":"Welcome!1","phone":"773-329-1784","email":"testToken@moovt.com","locale":"en-US","apnsToken":"9a1cd75847e20f1a27132790dfe1a0cb4107f42da1a39c019dd1a0820fc5c504", "passenger":{}}}
				
================================================================================
Hibernate: select this_.id as id3_0_, this_.version as version3_0_, this_.created_by as created3_3_0_, this_.date_created as date4_3_0_, this_.last_updated as last5_3_0_, this_.last_updated_by as last6_3_0_, this_.name as name3_0_ from tenant this_ where this_.name=? limit ?
Hibernate: select this_.id as id8_0_, this_.version as version8_0_, this_.account_expired as account3_8_0_, this_.account_locked as account4_8_0_, this_.apns_token as apns5_8_0_, this_.created_by as created6_8_0_, this_.date_created as date7_8_0_, this_.email as email8_0_, this_.enabled as enabled8_0_, this_.first_name as first10_8_0_, this_.last_name as last11_8_0_, this_.last_updated as last12_8_0_, this_.last_updated_by as last13_8_0_, this_.locale as locale8_0_, this_.`password` as password15_8_0_, this_.password_expired as password16_8_0_, this_.phone as phone8_0_, this_.tenant_id as tenant18_8_0_, this_.username as username8_0_ from user this_ where this_.username=? and this_.tenant_id=?
Hibernate: select this_.id as id8_0_, this_.version as version8_0_, this_.account_expired as account3_8_0_, this_.account_locked as account4_8_0_, this_.apns_token as apns5_8_0_, this_.created_by as created6_8_0_, this_.date_created as date7_8_0_, this_.email as email8_0_, this_.enabled as enabled8_0_, this_.first_name as first10_8_0_, this_.last_name as last11_8_0_, this_.last_updated as last12_8_0_, this_.last_updated_by as last13_8_0_, this_.locale as locale8_0_, this_.`password` as password15_8_0_, this_.password_expired as password16_8_0_, this_.phone as phone8_0_, this_.tenant_id as tenant18_8_0_, this_.username as username8_0_ from user this_ where this_.username=? and this_.tenant_id=?
Hibernate: insert into user (version, account_expired, account_locked, apns_token, created_by, date_created, email, enabled, first_name, last_name, last_updated, last_updated_by, locale, `password`, password_expired, phone, tenant_id, username) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: select this_.id as id8_0_, this_.version as version8_0_, this_.account_expired as account3_8_0_, this_.account_locked as account4_8_0_, this_.apns_token as apns5_8_0_, this_.created_by as created6_8_0_, this_.date_created as date7_8_0_, this_.email as email8_0_, this_.enabled as enabled8_0_, this_.first_name as first10_8_0_, this_.last_name as last11_8_0_, this_.last_updated as last12_8_0_, this_.last_updated_by as last13_8_0_, this_.locale as locale8_0_, this_.`password` as password15_8_0_, this_.password_expired as password16_8_0_, this_.phone as phone8_0_, this_.tenant_id as tenant18_8_0_, this_.username as username8_0_ from user this_ where this_.username=? and this_.tenant_id=?
Hibernate: select this_.id as id8_0_, this_.version as version8_0_, this_.account_expired as account3_8_0_, this_.account_locked as account4_8_0_, this_.apns_token as apns5_8_0_, this_.created_by as created6_8_0_, this_.date_created as date7_8_0_, this_.email as email8_0_, this_.enabled as enabled8_0_, this_.first_name as first10_8_0_, this_.last_name as last11_8_0_, this_.last_updated as last12_8_0_, this_.last_updated_by as last13_8_0_, this_.locale as locale8_0_, this_.`password` as password15_8_0_, this_.password_expired as password16_8_0_, this_.phone as phone8_0_, this_.tenant_id as tenant18_8_0_, this_.username as username8_0_ from user this_ where this_.username=? and this_.tenant_id=?
Hibernate: update user set version=?, account_expired=?, account_locked=?, apns_token=?, created_by=?, date_created=?, email=?, enabled=?, first_name=?, last_name=?, last_updated=?, last_updated_by=?, locale=?, `password`=?, password_expired=?, phone=?, tenant_id=?, username=? where id=? and version=?
Hibernate: select this_.id as id6_0_, this_.version as version6_0_, this_.authority as authority6_0_, this_.created_by as created4_6_0_, this_.date_created as date5_6_0_, this_.last_updated as last6_6_0_, this_.last_updated_by as last7_6_0_, this_.tenant_id as tenant8_6_0_ from role this_ where this_.tenant_id=? and this_.authority=? limit ?
Hibernate: select this_.id as id8_0_, this_.version as version8_0_, this_.account_expired as account3_8_0_, this_.account_locked as account4_8_0_, this_.apns_token as apns5_8_0_, this_.created_by as created6_8_0_, this_.date_created as date7_8_0_, this_.email as email8_0_, this_.enabled as enabled8_0_, this_.first_name as first10_8_0_, this_.last_name as last11_8_0_, this_.last_updated as last12_8_0_, this_.last_updated_by as last13_8_0_, this_.locale as locale8_0_, this_.`password` as password15_8_0_, this_.password_expired as password16_8_0_, this_.phone as phone8_0_, this_.tenant_id as tenant18_8_0_, this_.username as username8_0_ from user this_ where this_.username=? and this_.tenant_id=?
Hibernate: insert into passenger (version, created_by, date_created, last_updated, last_updated_by, tenant_id, user_id) values (?, ?, ?, ?, ?, ?, ?)
Hibernate: insert into user_role (created_by, date_created, last_updated, last_updated_by, tenant_id, role_id, user_id) values (?, ?, ?, ?, ?, ?, ?)
Hibernate: select this_.id as id3_0_, this_.version as version3_0_, this_.created_by as created3_3_0_, this_.date_created as date4_3_0_, this_.last_updated as last5_3_0_, this_.last_updated_by as last6_3_0_, this_.name as name3_0_ from tenant this_ where this_.name=? limit ?
Hibernate: select this_.id as id8_0_, this_.version as version8_0_, this_.account_expired as account3_8_0_, this_.account_locked as account4_8_0_, this_.apns_token as apns5_8_0_, this_.created_by as created6_8_0_, this_.date_created as date7_8_0_, this_.email as email8_0_, this_.enabled as enabled8_0_, this_.first_name as first10_8_0_, this_.last_name as last11_8_0_, this_.last_updated as last12_8_0_, this_.last_updated_by as last13_8_0_, this_.locale as locale8_0_, this_.`password` as password15_8_0_, this_.password_expired as password16_8_0_, this_.phone as phone8_0_, this_.tenant_id as tenant18_8_0_, this_.username as username8_0_ from user this_ where this_.tenant_id=? and this_.username=? limit ?
Hibernate: select this_.role_id as role1_4_0_, this_.user_id as user2_4_0_, this_.created_by as created3_4_0_, this_.date_created as date4_4_0_, this_.last_updated as last5_4_0_, this_.last_updated_by as last6_4_0_, this_.tenant_id as tenant7_4_0_ from user_role this_ where this_.tenant_id=? and this_.user_id=?
Hibernate: select this_.role_id as role1_4_0_, this_.user_id as user2_4_0_, this_.created_by as created3_4_0_, this_.date_created as date4_4_0_, this_.last_updated as last5_4_0_, this_.last_updated_by as last6_4_0_, this_.tenant_id as tenant7_4_0_ from user_role this_ where this_.tenant_id=? and this_.user_id=?
Interceptor createPage: TopLevelWindow[name=""]
Content of web window [TopLevelWindow[name=""]] changed
== Response was 200 (OK) headers: ==============================================
================================================================================
== Content =====================================================================
{"result":{"type":"USER","code":"SUCCESS","message":"User testToken created"}, "additionalInfo":{"JSESSIONID":"D13D965CB2765874073E4AA9F2678D1E"}}
================================================================================
#
--Output from testUpdateUserDriverEnglish--
Switching to browser client [default]
Creating to new client [default] of type [class com.grailsrocks.functionaltest.client.BrowserClient]

== Making request POST http://localhost:8080/moovt/login/authenticateUser parameters: ==
== Request headers: ============================================================
Accept-Encoding: gzip, deflate
Content-Type: application/json
Accept: */*
== Content =====================================================================

				{"type":"Self","tenantname":"WorldTaxi","username":"wheatonCityDriverUser","password":"Welcome!1",locale:"pt_BR"}
				
================================================================================
Hibernate: select this_.id as id3_0_, this_.version as version3_0_, this_.created_by as created3_3_0_, this_.date_created as date4_3_0_, this_.last_updated as last5_3_0_, this_.last_updated_by as last6_3_0_, this_.name as name3_0_ from tenant this_ where this_.name=? limit ?
Hibernate: select this_.id as id8_0_, this_.version as version8_0_, this_.account_expired as account3_8_0_, this_.account_locked as account4_8_0_, this_.apns_token as apns5_8_0_, this_.created_by as created6_8_0_, this_.date_created as date7_8_0_, this_.email as email8_0_, this_.enabled as enabled8_0_, this_.first_name as first10_8_0_, this_.last_name as last11_8_0_, this_.last_updated as last12_8_0_, this_.last_updated_by as last13_8_0_, this_.locale as locale8_0_, this_.`password` as password15_8_0_, this_.password_expired as password16_8_0_, this_.phone as phone8_0_, this_.tenant_id as tenant18_8_0_, this_.username as username8_0_ from user this_ where this_.tenant_id=? and this_.username=? limit ?
Hibernate: select driver0_.user_id as user1_2_0_, driver0_.version as version2_0_, driver0_.active_status as active3_2_0_, driver0_.car_type as car4_2_0_, driver0_.created_by as created5_2_0_, driver0_.date_created as date6_2_0_, driver0_.last_updated as last7_2_0_, driver0_.last_updated_by as last8_2_0_, driver0_.served_location_id as served9_2_0_, driver0_.tenant_id as tenant10_2_0_ from driver driver0_ where driver0_.user_id=?
Hibernate: select passenger0_.user_id as user1_1_0_, passenger0_.version as version1_0_, passenger0_.created_by as created3_1_0_, passenger0_.date_created as date4_1_0_, passenger0_.last_updated as last5_1_0_, passenger0_.last_updated_by as last6_1_0_, passenger0_.tenant_id as tenant7_1_0_ from passenger passenger0_ where passenger0_.user_id=?
Hibernate: select this_.role_id as role1_4_0_, this_.user_id as user2_4_0_, this_.created_by as created3_4_0_, this_.date_created as date4_4_0_, this_.last_updated as last5_4_0_, this_.last_updated_by as last6_4_0_, this_.tenant_id as tenant7_4_0_ from user_role this_ where this_.tenant_id=? and this_.user_id=?
Hibernate: select role0_.id as id6_0_, role0_.version as version6_0_, role0_.authority as authority6_0_, role0_.created_by as created4_6_0_, role0_.date_created as date5_6_0_, role0_.last_updated as last6_6_0_, role0_.last_updated_by as last7_6_0_, role0_.tenant_id as tenant8_6_0_ from role role0_ where role0_.id=?
Hibernate: select this_.role_id as role1_4_0_, this_.user_id as user2_4_0_, this_.created_by as created3_4_0_, this_.date_created as date4_4_0_, this_.last_updated as last5_4_0_, this_.last_updated_by as last6_4_0_, this_.tenant_id as tenant7_4_0_ from user_role this_ where this_.tenant_id=? and this_.user_id=?
ROLE_DRIVER
ROLE_RIDE_MGR
Hibernate: select this_.id as id8_0_, this_.version as version8_0_, this_.account_expired as account3_8_0_, this_.account_locked as account4_8_0_, this_.apns_token as apns5_8_0_, this_.created_by as created6_8_0_, this_.date_created as date7_8_0_, this_.email as email8_0_, this_.enabled as enabled8_0_, this_.first_name as first10_8_0_, this_.last_name as last11_8_0_, this_.last_updated as last12_8_0_, this_.last_updated_by as last13_8_0_, this_.locale as locale8_0_, this_.`password` as password15_8_0_, this_.password_expired as password16_8_0_, this_.phone as phone8_0_, this_.tenant_id as tenant18_8_0_, this_.username as username8_0_ from user this_ where this_.username=? and this_.tenant_id=?
Hibernate: select this_.id as id8_0_, this_.version as version8_0_, this_.account_expired as account3_8_0_, this_.account_locked as account4_8_0_, this_.apns_token as apns5_8_0_, this_.created_by as created6_8_0_, this_.date_created as date7_8_0_, this_.email as email8_0_, this_.enabled as enabled8_0_, this_.first_name as first10_8_0_, this_.last_name as last11_8_0_, this_.last_updated as last12_8_0_, this_.last_updated_by as last13_8_0_, this_.locale as locale8_0_, this_.`password` as password15_8_0_, this_.password_expired as password16_8_0_, this_.phone as phone8_0_, this_.tenant_id as tenant18_8_0_, this_.username as username8_0_ from user this_ where this_.username=? and this_.tenant_id=?
Hibernate: update user set version=?, account_expired=?, account_locked=?, apns_token=?, created_by=?, date_created=?, email=?, enabled=?, first_name=?, last_name=?, last_updated=?, last_updated_by=?, locale=?, `password`=?, password_expired=?, phone=?, tenant_id=?, username=? where id=? and version=?
Interceptor createPage: TopLevelWindow[name=""]
Content of web window [TopLevelWindow[name=""]] changed
== Response was 200 (OK) headers: ==============================================
================================================================================
== Content =====================================================================
{"result":{"type":"USER","code":"SUCCESS","message":"Login successful."}, "additionalInfo":{"JSESSIONID":"EBF1958C1D5E50B0C4E6D5A3C858AB1A","userType":"DRIVER"}}
================================================================================
#
== Making request POST http://localhost:8080/moovt/user/updateLoggedUser parameters: ==
== Request headers: ============================================================
Accept-Encoding: gzip, deflate
Content-Type: application/json
Accept: */*
== Content =====================================================================

				{"version":"4","firstName":"John","lastName":"OldWeathon","username":"wheatonCityDriverUser","password":"Welcome!1","phone":"773-329-1784","email":"oldWheaton@worldtaxi.com","locale":"en-US","driver":{"servedLocation":{"locationName":"Functional Test Major Lopes, 55","politicalName":"Belo Horizonte, MG, BR","latitude":-19.9413628,"longitude":-43.9373064,"locationType":"RANGE_INTERPOLATED"},"carType":{"code":"B_VAN","description":"Van"},"activeStatus":{"code":"ENABLED","description":"Enabled"}}}
				
================================================================================
Hibernate: select tenant0_.id as id3_0_, tenant0_.version as version3_0_, tenant0_.created_by as created3_3_0_, tenant0_.date_created as date4_3_0_, tenant0_.last_updated as last5_3_0_, tenant0_.last_updated_by as last6_3_0_, tenant0_.name as name3_0_ from tenant tenant0_ where tenant0_.id=?
Hibernate: select user0_.id as id8_0_, user0_.version as version8_0_, user0_.account_expired as account3_8_0_, user0_.account_locked as account4_8_0_, user0_.apns_token as apns5_8_0_, user0_.created_by as created6_8_0_, user0_.date_created as date7_8_0_, user0_.email as email8_0_, user0_.enabled as enabled8_0_, user0_.first_name as first10_8_0_, user0_.last_name as last11_8_0_, user0_.last_updated as last12_8_0_, user0_.last_updated_by as last13_8_0_, user0_.locale as locale8_0_, user0_.`password` as password15_8_0_, user0_.password_expired as password16_8_0_, user0_.phone as phone8_0_, user0_.tenant_id as tenant18_8_0_, user0_.username as username8_0_ from user user0_ where user0_.id=?
Hibernate: select driver0_.user_id as user1_2_0_, driver0_.version as version2_0_, driver0_.active_status as active3_2_0_, driver0_.car_type as car4_2_0_, driver0_.created_by as created5_2_0_, driver0_.date_created as date6_2_0_, driver0_.last_updated as last7_2_0_, driver0_.last_updated_by as last8_2_0_, driver0_.served_location_id as served9_2_0_, driver0_.tenant_id as tenant10_2_0_ from driver driver0_ where driver0_.user_id=?
Hibernate: select passenger0_.user_id as user1_1_0_, passenger0_.version as version1_0_, passenger0_.created_by as created3_1_0_, passenger0_.date_created as date4_1_0_, passenger0_.last_updated as last5_1_0_, passenger0_.last_updated_by as last6_1_0_, passenger0_.tenant_id as tenant7_1_0_ from passenger passenger0_ where passenger0_.user_id=?
Hibernate: select location0_.id as id0_0_, location0_.version as version0_0_, location0_.created_by as created3_0_0_, location0_.date_created as date4_0_0_, location0_.last_updated as last5_0_0_, location0_.last_updated_by as last6_0_0_, location0_.latitude as latitude0_0_, location0_.location_name as location8_0_0_, location0_.location_type as location9_0_0_, location0_.longitude as longitude0_0_, location0_.political_name as political11_0_0_, location0_.tenant_id as tenant12_0_0_ from location location0_ where location0_.id=?
Hibernate: select this_.id as id6_0_, this_.version as version6_0_, this_.authority as authority6_0_, this_.created_by as created4_6_0_, this_.date_created as date5_6_0_, this_.last_updated as last6_6_0_, this_.last_updated_by as last7_6_0_, this_.tenant_id as tenant8_6_0_ from role this_ where this_.tenant_id=? and this_.authority=? limit ?
Hibernate: select this_.role_id as role1_4_0_, this_.user_id as user2_4_0_, this_.created_by as created3_4_0_, this_.date_created as date4_4_0_, this_.last_updated as last5_4_0_, this_.last_updated_by as last6_4_0_, this_.tenant_id as tenant7_4_0_ from user_role this_ where this_.tenant_id=? and this_.user_id=?
Hibernate: select this_.role_id as role1_4_0_, this_.user_id as user2_4_0_, this_.created_by as created3_4_0_, this_.date_created as date4_4_0_, this_.last_updated as last5_4_0_, this_.last_updated_by as last6_4_0_, this_.tenant_id as tenant7_4_0_ from user_role this_ where this_.tenant_id=? and this_.user_id=?
Hibernate: select this_.id as id8_0_, this_.version as version8_0_, this_.account_expired as account3_8_0_, this_.account_locked as account4_8_0_, this_.apns_token as apns5_8_0_, this_.created_by as created6_8_0_, this_.date_created as date7_8_0_, this_.email as email8_0_, this_.enabled as enabled8_0_, this_.first_name as first10_8_0_, this_.last_name as last11_8_0_, this_.last_updated as last12_8_0_, this_.last_updated_by as last13_8_0_, this_.locale as locale8_0_, this_.`password` as password15_8_0_, this_.password_expired as password16_8_0_, this_.phone as phone8_0_, this_.tenant_id as tenant18_8_0_, this_.username as username8_0_ from user this_ where this_.username=? and this_.tenant_id=?
Hibernate: update user set version=?, account_expired=?, account_locked=?, apns_token=?, created_by=?, date_created=?, email=?, enabled=?, first_name=?, last_name=?, last_updated=?, last_updated_by=?, locale=?, `password`=?, password_expired=?, phone=?, tenant_id=?, username=? where id=? and version=?
Before Update
Hibernate: update location set version=?, created_by=?, date_created=?, last_updated=?, last_updated_by=?, latitude=?, location_name=?, location_type=?, longitude=?, political_name=?, tenant_id=? where id=? and version=?
Interceptor createPage: TopLevelWindow[name=""]
Content of web window [TopLevelWindow[name=""]] changed
== Response was 200 (OK) headers: ==============================================
================================================================================
== Content =====================================================================
{"result":{"type":"USER","code":"SUCCESS","message":"User wheatonCityDriverUser updated"}, "user":{"id":10,"version":2,"username":"wheatonCityDriverUser","firstName":"John","lastName":"OldWeathon","phone":"773-329-1784","email":"oldWheaton@worldtaxi.com","driver":{"servedLocation":{"locationName":"Functional Test Major Lopes, 55","politicalName":"Belo Horizonte, MG, BR","latitude":-19.9413628,"longitude":-43.9373064,"locationType":"RANGE_INTERPOLATED"},"carType":{"code":"B_VAN","description":"Van"},"activeStatus":{"code":"ENABLED","description":"Enabled"}}}}
================================================================================
#
--Output from testUpdateUserPassengerEnglish--
Switching to browser client [default]
Creating to new client [default] of type [class com.grailsrocks.functionaltest.client.BrowserClient]

== Making request POST http://localhost:8080/moovt/login/authenticateUser parameters: ==
== Request headers: ============================================================
Accept-Encoding: gzip, deflate
Content-Type: application/json
Accept: */*
== Content =====================================================================

				{"type":"Self","tenantname":"WorldTaxi","username":"jgoodrider","password":"Welcome!1",locale:"pt_BR"}
				
================================================================================
Hibernate: select this_.id as id3_0_, this_.version as version3_0_, this_.created_by as created3_3_0_, this_.date_created as date4_3_0_, this_.last_updated as last5_3_0_, this_.last_updated_by as last6_3_0_, this_.name as name3_0_ from tenant this_ where this_.name=? limit ?
Hibernate: select this_.id as id8_0_, this_.version as version8_0_, this_.account_expired as account3_8_0_, this_.account_locked as account4_8_0_, this_.apns_token as apns5_8_0_, this_.created_by as created6_8_0_, this_.date_created as date7_8_0_, this_.email as email8_0_, this_.enabled as enabled8_0_, this_.first_name as first10_8_0_, this_.last_name as last11_8_0_, this_.last_updated as last12_8_0_, this_.last_updated_by as last13_8_0_, this_.locale as locale8_0_, this_.`password` as password15_8_0_, this_.password_expired as password16_8_0_, this_.phone as phone8_0_, this_.tenant_id as tenant18_8_0_, this_.username as username8_0_ from user this_ where this_.tenant_id=? and this_.username=? limit ?
Hibernate: select driver0_.user_id as user1_2_0_, driver0_.version as version2_0_, driver0_.active_status as active3_2_0_, driver0_.car_type as car4_2_0_, driver0_.created_by as created5_2_0_, driver0_.date_created as date6_2_0_, driver0_.last_updated as last7_2_0_, driver0_.last_updated_by as last8_2_0_, driver0_.served_location_id as served9_2_0_, driver0_.tenant_id as tenant10_2_0_ from driver driver0_ where driver0_.user_id=?
Hibernate: select passenger0_.user_id as user1_1_0_, passenger0_.version as version1_0_, passenger0_.created_by as created3_1_0_, passenger0_.date_created as date4_1_0_, passenger0_.last_updated as last5_1_0_, passenger0_.last_updated_by as last6_1_0_, passenger0_.tenant_id as tenant7_1_0_ from passenger passenger0_ where passenger0_.user_id=?
Hibernate: select this_.role_id as role1_4_0_, this_.user_id as user2_4_0_, this_.created_by as created3_4_0_, this_.date_created as date4_4_0_, this_.last_updated as last5_4_0_, this_.last_updated_by as last6_4_0_, this_.tenant_id as tenant7_4_0_ from user_role this_ where this_.tenant_id=? and this_.user_id=?
Hibernate: select this_.role_id as role1_4_0_, this_.user_id as user2_4_0_, this_.created_by as created3_4_0_, this_.date_created as date4_4_0_, this_.last_updated as last5_4_0_, this_.last_updated_by as last6_4_0_, this_.tenant_id as tenant7_4_0_ from user_role this_ where this_.tenant_id=? and this_.user_id=?
ROLE_PASSENGER
ROLE_RIDE_MGR
Interceptor createPage: TopLevelWindow[name=""]
Content of web window [TopLevelWindow[name=""]] changed
== Response was 200 (OK) headers: ==============================================
================================================================================
== Content =====================================================================
{"result":{"type":"USER","code":"SUCCESS","message":"Login successful."}, "additionalInfo":{"JSESSIONID":"8510BB9297AF4E433066063CBBBD00EF","userType":"PASSENGER"}}
================================================================================
#
== Making request POST http://localhost:8080/moovt/user/updateLoggedUser parameters: ==
== Request headers: ============================================================
Accept-Encoding: gzip, deflate
Content-Type: application/json
Accept: */*
== Content =====================================================================

				{"version":"7","firstName":"John","lastName":"DecidedToBeADriver","username":"jgoodrider","password":"Welcome!1","phone":"773-329-1784","email":"jgoodrider@worldtaxi.com","locale":"en-US","driver":{"servedLocation":{"locationName":"Rua Major Lopes, 55","politicalName":"Belo Horizonte, MG, BR","latitude":-19.9413628,"longitude":-43.9373064,"locationType":"RANGE_INTERPOLATED"},"carType":{"code":"B_VAN","description":"Van"},"activeStatus":{"code":"ENABLED","description":"Enabled"}}}
				
================================================================================
Hibernate: select tenant0_.id as id3_0_, tenant0_.version as version3_0_, tenant0_.created_by as created3_3_0_, tenant0_.date_created as date4_3_0_, tenant0_.last_updated as last5_3_0_, tenant0_.last_updated_by as last6_3_0_, tenant0_.name as name3_0_ from tenant tenant0_ where tenant0_.id=?
Hibernate: select user0_.id as id8_0_, user0_.version as version8_0_, user0_.account_expired as account3_8_0_, user0_.account_locked as account4_8_0_, user0_.apns_token as apns5_8_0_, user0_.created_by as created6_8_0_, user0_.date_created as date7_8_0_, user0_.email as email8_0_, user0_.enabled as enabled8_0_, user0_.first_name as first10_8_0_, user0_.last_name as last11_8_0_, user0_.last_updated as last12_8_0_, user0_.last_updated_by as last13_8_0_, user0_.locale as locale8_0_, user0_.`password` as password15_8_0_, user0_.password_expired as password16_8_0_, user0_.phone as phone8_0_, user0_.tenant_id as tenant18_8_0_, user0_.username as username8_0_ from user user0_ where user0_.id=?
Hibernate: select driver0_.user_id as user1_2_0_, driver0_.version as version2_0_, driver0_.active_status as active3_2_0_, driver0_.car_type as car4_2_0_, driver0_.created_by as created5_2_0_, driver0_.date_created as date6_2_0_, driver0_.last_updated as last7_2_0_, driver0_.last_updated_by as last8_2_0_, driver0_.served_location_id as served9_2_0_, driver0_.tenant_id as tenant10_2_0_ from driver driver0_ where driver0_.user_id=?
Hibernate: select passenger0_.user_id as user1_1_0_, passenger0_.version as version1_0_, passenger0_.created_by as created3_1_0_, passenger0_.date_created as date4_1_0_, passenger0_.last_updated as last5_1_0_, passenger0_.last_updated_by as last6_1_0_, passenger0_.tenant_id as tenant7_1_0_ from passenger passenger0_ where passenger0_.user_id=?
Before Insert
Hibernate: insert into location (version, created_by, date_created, last_updated, last_updated_by, latitude, location_name, location_type, longitude, political_name, tenant_id) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: select this_.id as id8_0_, this_.version as version8_0_, this_.account_expired as account3_8_0_, this_.account_locked as account4_8_0_, this_.apns_token as apns5_8_0_, this_.created_by as created6_8_0_, this_.date_created as date7_8_0_, this_.email as email8_0_, this_.enabled as enabled8_0_, this_.first_name as first10_8_0_, this_.last_name as last11_8_0_, this_.last_updated as last12_8_0_, this_.last_updated_by as last13_8_0_, this_.locale as locale8_0_, this_.`password` as password15_8_0_, this_.password_expired as password16_8_0_, this_.phone as phone8_0_, this_.tenant_id as tenant18_8_0_, this_.username as username8_0_ from user this_ where this_.username=? and this_.tenant_id=?
Hibernate: update user set version=?, account_expired=?, account_locked=?, apns_token=?, created_by=?, date_created=?, email=?, enabled=?, first_name=?, last_name=?, last_updated=?, last_updated_by=?, locale=?, `password`=?, password_expired=?, phone=?, tenant_id=?, username=? where id=? and version=?
Hibernate: select this_.id as id6_0_, this_.version as version6_0_, this_.authority as authority6_0_, this_.created_by as created4_6_0_, this_.date_created as date5_6_0_, this_.last_updated as last6_6_0_, this_.last_updated_by as last7_6_0_, this_.tenant_id as tenant8_6_0_ from role this_ where this_.tenant_id=? and this_.authority=? limit ?
Hibernate: select this_.role_id as role1_4_0_, this_.user_id as user2_4_0_, this_.created_by as created3_4_0_, this_.date_created as date4_4_0_, this_.last_updated as last5_4_0_, this_.last_updated_by as last6_4_0_, this_.tenant_id as tenant7_4_0_ from user_role this_ where this_.tenant_id=? and this_.user_id=?
Hibernate: select this_.role_id as role1_4_0_, this_.user_id as user2_4_0_, this_.created_by as created3_4_0_, this_.date_created as date4_4_0_, this_.last_updated as last5_4_0_, this_.last_updated_by as last6_4_0_, this_.tenant_id as tenant7_4_0_ from user_role this_ where this_.tenant_id=? and this_.user_id=?
Hibernate: insert into driver (version, active_status, car_type, created_by, date_created, last_updated, last_updated_by, served_location_id, tenant_id, user_id) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: insert into user_role (created_by, date_created, last_updated, last_updated_by, tenant_id, role_id, user_id) values (?, ?, ?, ?, ?, ?, ?)
Interceptor createPage: TopLevelWindow[name=""]
Content of web window [TopLevelWindow[name=""]] changed
== Response was 200 (OK) headers: ==============================================
================================================================================
== Content =====================================================================
{"result":{"type":"USER","code":"SUCCESS","message":"User jgoodrider updated"}, "user":{"id":5,"version":1,"username":"jgoodrider","firstName":"John","lastName":"DecidedToBeADriver","phone":"773-329-1784","email":"jgoodrider@worldtaxi.com","driver":{"servedLocation":{"locationName":"Rua Major Lopes, 55","politicalName":"Belo Horizonte, MG, BR","latitude":-19.9413628,"longitude":-43.9373064,"locationType":"RANGE_INTERPOLATED"},"carType":{"code":"B_VAN","description":"Van"},"activeStatus":{"code":"ENABLED","description":"Enabled"}},"passenger":{}}}
================================================================================
#
--Output from testRetrieveAllUsersrEnglish--
Switching to browser client [default]
Creating to new client [default] of type [class com.grailsrocks.functionaltest.client.BrowserClient]

== Making request POST http://localhost:8080/moovt/login/authenticateUser parameters: ==
== Request headers: ============================================================
Accept-Encoding: gzip, deflate
Content-Type: application/json
Accept: */*
== Content =====================================================================

				{"type":"Self","tenantname": "WorldTaxi", "username": "admin", "password":"admin","locale":"en_US"}
				
================================================================================
Hibernate: select this_.id as id3_0_, this_.version as version3_0_, this_.created_by as created3_3_0_, this_.date_created as date4_3_0_, this_.last_updated as last5_3_0_, this_.last_updated_by as last6_3_0_, this_.name as name3_0_ from tenant this_ where this_.name=? limit ?
Hibernate: select this_.id as id8_0_, this_.version as version8_0_, this_.account_expired as account3_8_0_, this_.account_locked as account4_8_0_, this_.apns_token as apns5_8_0_, this_.created_by as created6_8_0_, this_.date_created as date7_8_0_, this_.email as email8_0_, this_.enabled as enabled8_0_, this_.first_name as first10_8_0_, this_.last_name as last11_8_0_, this_.last_updated as last12_8_0_, this_.last_updated_by as last13_8_0_, this_.locale as locale8_0_, this_.`password` as password15_8_0_, this_.password_expired as password16_8_0_, this_.phone as phone8_0_, this_.tenant_id as tenant18_8_0_, this_.username as username8_0_ from user this_ where this_.tenant_id=? and this_.username=? limit ?
Hibernate: select driver0_.user_id as user1_2_0_, driver0_.version as version2_0_, driver0_.active_status as active3_2_0_, driver0_.car_type as car4_2_0_, driver0_.created_by as created5_2_0_, driver0_.date_created as date6_2_0_, driver0_.last_updated as last7_2_0_, driver0_.last_updated_by as last8_2_0_, driver0_.served_location_id as served9_2_0_, driver0_.tenant_id as tenant10_2_0_ from driver driver0_ where driver0_.user_id=?
Hibernate: select passenger0_.user_id as user1_1_0_, passenger0_.version as version1_0_, passenger0_.created_by as created3_1_0_, passenger0_.date_created as date4_1_0_, passenger0_.last_updated as last5_1_0_, passenger0_.last_updated_by as last6_1_0_, passenger0_.tenant_id as tenant7_1_0_ from passenger passenger0_ where passenger0_.user_id=?
Hibernate: select this_.role_id as role1_4_0_, this_.user_id as user2_4_0_, this_.created_by as created3_4_0_, this_.date_created as date4_4_0_, this_.last_updated as last5_4_0_, this_.last_updated_by as last6_4_0_, this_.tenant_id as tenant7_4_0_ from user_role this_ where this_.tenant_id=? and this_.user_id=?
Hibernate: select role0_.id as id6_0_, role0_.version as version6_0_, role0_.authority as authority6_0_, role0_.created_by as created4_6_0_, role0_.date_created as date5_6_0_, role0_.last_updated as last6_6_0_, role0_.last_updated_by as last7_6_0_, role0_.tenant_id as tenant8_6_0_ from role role0_ where role0_.id=?
Hibernate: select this_.role_id as role1_4_0_, this_.user_id as user2_4_0_, this_.created_by as created3_4_0_, this_.date_created as date4_4_0_, this_.last_updated as last5_4_0_, this_.last_updated_by as last6_4_0_, this_.tenant_id as tenant7_4_0_ from user_role this_ where this_.tenant_id=? and this_.user_id=?
ROLE_ADMIN
Interceptor createPage: TopLevelWindow[name=""]
Content of web window [TopLevelWindow[name=""]] changed
== Response was 200 (OK) headers: ==============================================
================================================================================
== Content =====================================================================
{"result":{"type":"USER","code":"SUCCESS","message":"Login successful."}, "additionalInfo":{"JSESSIONID":"ECC55475DD8D86B3C7E2384CE6201DF5","userType":"NO_TYPE"}}
================================================================================
#
== Making request POST http://localhost:8080/moovt/user/retrieveAllUsers parameters: ==
== Request headers: ============================================================
Accept-Encoding: gzip, deflate
Content-Type: application/json
Accept: */*
== Content =====================================================================

				{}
				
================================================================================
Hibernate: select tenant0_.id as id3_0_, tenant0_.version as version3_0_, tenant0_.created_by as created3_3_0_, tenant0_.date_created as date4_3_0_, tenant0_.last_updated as last5_3_0_, tenant0_.last_updated_by as last6_3_0_, tenant0_.name as name3_0_ from tenant tenant0_ where tenant0_.id=?
Hibernate: select this_.id as id8_0_, this_.version as version8_0_, this_.account_expired as account3_8_0_, this_.account_locked as account4_8_0_, this_.apns_token as apns5_8_0_, this_.created_by as created6_8_0_, this_.date_created as date7_8_0_, this_.email as email8_0_, this_.enabled as enabled8_0_, this_.first_name as first10_8_0_, this_.last_name as last11_8_0_, this_.last_updated as last12_8_0_, this_.last_updated_by as last13_8_0_, this_.locale as locale8_0_, this_.`password` as password15_8_0_, this_.password_expired as password16_8_0_, this_.phone as phone8_0_, this_.tenant_id as tenant18_8_0_, this_.username as username8_0_ from user this_ where (this_.tenant_id=?) order by this_.last_updated desc
Hibernate: select driver0_.user_id as user1_2_0_, driver0_.version as version2_0_, driver0_.active_status as active3_2_0_, driver0_.car_type as car4_2_0_, driver0_.created_by as created5_2_0_, driver0_.date_created as date6_2_0_, driver0_.last_updated as last7_2_0_, driver0_.last_updated_by as last8_2_0_, driver0_.served_location_id as served9_2_0_, driver0_.tenant_id as tenant10_2_0_ from driver driver0_ where driver0_.user_id=?
Hibernate: select passenger0_.user_id as user1_1_0_, passenger0_.version as version1_0_, passenger0_.created_by as created3_1_0_, passenger0_.date_created as date4_1_0_, passenger0_.last_updated as last5_1_0_, passenger0_.last_updated_by as last6_1_0_, passenger0_.tenant_id as tenant7_1_0_ from passenger passenger0_ where passenger0_.user_id=?
Hibernate: select driver0_.user_id as user1_2_0_, driver0_.version as version2_0_, driver0_.active_status as active3_2_0_, driver0_.car_type as car4_2_0_, driver0_.created_by as created5_2_0_, driver0_.date_created as date6_2_0_, driver0_.last_updated as last7_2_0_, driver0_.last_updated_by as last8_2_0_, driver0_.served_location_id as served9_2_0_, driver0_.tenant_id as tenant10_2_0_ from driver driver0_ where driver0_.user_id=?
Hibernate: select passenger0_.user_id as user1_1_0_, passenger0_.version as version1_0_, passenger0_.created_by as created3_1_0_, passenger0_.date_created as date4_1_0_, passenger0_.last_updated as last5_1_0_, passenger0_.last_updated_by as last6_1_0_, passenger0_.tenant_id as tenant7_1_0_ from passenger passenger0_ where passenger0_.user_id=?
Hibernate: select driver0_.user_id as user1_2_0_, driver0_.version as version2_0_, driver0_.active_status as active3_2_0_, driver0_.car_type as car4_2_0_, driver0_.created_by as created5_2_0_, driver0_.date_created as date6_2_0_, driver0_.last_updated as last7_2_0_, driver0_.last_updated_by as last8_2_0_, driver0_.served_location_id as served9_2_0_, driver0_.tenant_id as tenant10_2_0_ from driver driver0_ where driver0_.user_id=?
Hibernate: select passenger0_.user_id as user1_1_0_, passenger0_.version as version1_0_, passenger0_.created_by as created3_1_0_, passenger0_.date_created as date4_1_0_, passenger0_.last_updated as last5_1_0_, passenger0_.last_updated_by as last6_1_0_, passenger0_.tenant_id as tenant7_1_0_ from passenger passenger0_ where passenger0_.user_id=?
Hibernate: select driver0_.user_id as user1_2_0_, driver0_.version as version2_0_, driver0_.active_status as active3_2_0_, driver0_.car_type as car4_2_0_, driver0_.created_by as created5_2_0_, driver0_.date_created as date6_2_0_, driver0_.last_updated as last7_2_0_, driver0_.last_updated_by as last8_2_0_, driver0_.served_location_id as served9_2_0_, driver0_.tenant_id as tenant10_2_0_ from driver driver0_ where driver0_.user_id=?
Hibernate: select passenger0_.user_id as user1_1_0_, passenger0_.version as version1_0_, passenger0_.created_by as created3_1_0_, passenger0_.date_created as date4_1_0_, passenger0_.last_updated as last5_1_0_, passenger0_.last_updated_by as last6_1_0_, passenger0_.tenant_id as tenant7_1_0_ from passenger passenger0_ where passenger0_.user_id=?
Hibernate: select driver0_.user_id as user1_2_0_, driver0_.version as version2_0_, driver0_.active_status as active3_2_0_, driver0_.car_type as car4_2_0_, driver0_.created_by as created5_2_0_, driver0_.date_created as date6_2_0_, driver0_.last_updated as last7_2_0_, driver0_.last_updated_by as last8_2_0_, driver0_.served_location_id as served9_2_0_, driver0_.tenant_id as tenant10_2_0_ from driver driver0_ where driver0_.user_id=?
Hibernate: select passenger0_.user_id as user1_1_0_, passenger0_.version as version1_0_, passenger0_.created_by as created3_1_0_, passenger0_.date_created as date4_1_0_, passenger0_.last_updated as last5_1_0_, passenger0_.last_updated_by as last6_1_0_, passenger0_.tenant_id as tenant7_1_0_ from passenger passenger0_ where passenger0_.user_id=?
Hibernate: select driver0_.user_id as user1_2_0_, driver0_.version as version2_0_, driver0_.active_status as active3_2_0_, driver0_.car_type as car4_2_0_, driver0_.created_by as created5_2_0_, driver0_.date_created as date6_2_0_, driver0_.last_updated as last7_2_0_, driver0_.last_updated_by as last8_2_0_, driver0_.served_location_id as served9_2_0_, driver0_.tenant_id as tenant10_2_0_ from driver driver0_ where driver0_.user_id=?
Hibernate: select passenger0_.user_id as user1_1_0_, passenger0_.version as version1_0_, passenger0_.created_by as created3_1_0_, passenger0_.date_created as date4_1_0_, passenger0_.last_updated as last5_1_0_, passenger0_.last_updated_by as last6_1_0_, passenger0_.tenant_id as tenant7_1_0_ from passenger passenger0_ where passenger0_.user_id=?
Hibernate: select driver0_.user_id as user1_2_0_, driver0_.version as version2_0_, driver0_.active_status as active3_2_0_, driver0_.car_type as car4_2_0_, driver0_.created_by as created5_2_0_, driver0_.date_created as date6_2_0_, driver0_.last_updated as last7_2_0_, driver0_.last_updated_by as last8_2_0_, driver0_.served_location_id as served9_2_0_, driver0_.tenant_id as tenant10_2_0_ from driver driver0_ where driver0_.user_id=?
Hibernate: select passenger0_.user_id as user1_1_0_, passenger0_.version as version1_0_, passenger0_.created_by as created3_1_0_, passenger0_.date_created as date4_1_0_, passenger0_.last_updated as last5_1_0_, passenger0_.last_updated_by as last6_1_0_, passenger0_.tenant_id as tenant7_1_0_ from passenger passenger0_ where passenger0_.user_id=?
Hibernate: select driver0_.user_id as user1_2_0_, driver0_.version as version2_0_, driver0_.active_status as active3_2_0_, driver0_.car_type as car4_2_0_, driver0_.created_by as created5_2_0_, driver0_.date_created as date6_2_0_, driver0_.last_updated as last7_2_0_, driver0_.last_updated_by as last8_2_0_, driver0_.served_location_id as served9_2_0_, driver0_.tenant_id as tenant10_2_0_ from driver driver0_ where driver0_.user_id=?
Hibernate: select passenger0_.user_id as user1_1_0_, passenger0_.version as version1_0_, passenger0_.created_by as created3_1_0_, passenger0_.date_created as date4_1_0_, passenger0_.last_updated as last5_1_0_, passenger0_.last_updated_by as last6_1_0_, passenger0_.tenant_id as tenant7_1_0_ from passenger passenger0_ where passenger0_.user_id=?
Hibernate: select driver0_.user_id as user1_2_0_, driver0_.version as version2_0_, driver0_.active_status as active3_2_0_, driver0_.car_type as car4_2_0_, driver0_.created_by as created5_2_0_, driver0_.date_created as date6_2_0_, driver0_.last_updated as last7_2_0_, driver0_.last_updated_by as last8_2_0_, driver0_.served_location_id as served9_2_0_, driver0_.tenant_id as tenant10_2_0_ from driver driver0_ where driver0_.user_id=?
Hibernate: select passenger0_.user_id as user1_1_0_, passenger0_.version as version1_0_, passenger0_.created_by as created3_1_0_, passenger0_.date_created as date4_1_0_, passenger0_.last_updated as last5_1_0_, passenger0_.last_updated_by as last6_1_0_, passenger0_.tenant_id as tenant7_1_0_ from passenger passenger0_ where passenger0_.user_id=?
Hibernate: select driver0_.user_id as user1_2_0_, driver0_.version as version2_0_, driver0_.active_status as active3_2_0_, driver0_.car_type as car4_2_0_, driver0_.created_by as created5_2_0_, driver0_.date_created as date6_2_0_, driver0_.last_updated as last7_2_0_, driver0_.last_updated_by as last8_2_0_, driver0_.served_location_id as served9_2_0_, driver0_.tenant_id as tenant10_2_0_ from driver driver0_ where driver0_.user_id=?
Hibernate: select passenger0_.user_id as user1_1_0_, passenger0_.version as version1_0_, passenger0_.created_by as created3_1_0_, passenger0_.date_created as date4_1_0_, passenger0_.last_updated as last5_1_0_, passenger0_.last_updated_by as last6_1_0_, passenger0_.tenant_id as tenant7_1_0_ from passenger passenger0_ where passenger0_.user_id=?
Hibernate: select driver0_.user_id as user1_2_0_, driver0_.version as version2_0_, driver0_.active_status as active3_2_0_, driver0_.car_type as car4_2_0_, driver0_.created_by as created5_2_0_, driver0_.date_created as date6_2_0_, driver0_.last_updated as last7_2_0_, driver0_.last_updated_by as last8_2_0_, driver0_.served_location_id as served9_2_0_, driver0_.tenant_id as tenant10_2_0_ from driver driver0_ where driver0_.user_id=?
Hibernate: select passenger0_.user_id as user1_1_0_, passenger0_.version as version1_0_, passenger0_.created_by as created3_1_0_, passenger0_.date_created as date4_1_0_, passenger0_.last_updated as last5_1_0_, passenger0_.last_updated_by as last6_1_0_, passenger0_.tenant_id as tenant7_1_0_ from passenger passenger0_ where passenger0_.user_id=?
Hibernate: select driver0_.user_id as user1_2_0_, driver0_.version as version2_0_, driver0_.active_status as active3_2_0_, driver0_.car_type as car4_2_0_, driver0_.created_by as created5_2_0_, driver0_.date_created as date6_2_0_, driver0_.last_updated as last7_2_0_, driver0_.last_updated_by as last8_2_0_, driver0_.served_location_id as served9_2_0_, driver0_.tenant_id as tenant10_2_0_ from driver driver0_ where driver0_.user_id=?
Hibernate: select passenger0_.user_id as user1_1_0_, passenger0_.version as version1_0_, passenger0_.created_by as created3_1_0_, passenger0_.date_created as date4_1_0_, passenger0_.last_updated as last5_1_0_, passenger0_.last_updated_by as last6_1_0_, passenger0_.tenant_id as tenant7_1_0_ from passenger passenger0_ where passenger0_.user_id=?
Hibernate: select driver0_.user_id as user1_2_0_, driver0_.version as version2_0_, driver0_.active_status as active3_2_0_, driver0_.car_type as car4_2_0_, driver0_.created_by as created5_2_0_, driver0_.date_created as date6_2_0_, driver0_.last_updated as last7_2_0_, driver0_.last_updated_by as last8_2_0_, driver0_.served_location_id as served9_2_0_, driver0_.tenant_id as tenant10_2_0_ from driver driver0_ where driver0_.user_id=?
Hibernate: select passenger0_.user_id as user1_1_0_, passenger0_.version as version1_0_, passenger0_.created_by as created3_1_0_, passenger0_.date_created as date4_1_0_, passenger0_.last_updated as last5_1_0_, passenger0_.last_updated_by as last6_1_0_, passenger0_.tenant_id as tenant7_1_0_ from passenger passenger0_ where passenger0_.user_id=?
Hibernate: select driver0_.user_id as user1_2_0_, driver0_.version as version2_0_, driver0_.active_status as active3_2_0_, driver0_.car_type as car4_2_0_, driver0_.created_by as created5_2_0_, driver0_.date_created as date6_2_0_, driver0_.last_updated as last7_2_0_, driver0_.last_updated_by as last8_2_0_, driver0_.served_location_id as served9_2_0_, driver0_.tenant_id as tenant10_2_0_ from driver driver0_ where driver0_.user_id=?
Hibernate: select passenger0_.user_id as user1_1_0_, passenger0_.version as version1_0_, passenger0_.created_by as created3_1_0_, passenger0_.date_created as date4_1_0_, passenger0_.last_updated as last5_1_0_, passenger0_.last_updated_by as last6_1_0_, passenger0_.tenant_id as tenant7_1_0_ from passenger passenger0_ where passenger0_.user_id=?
Hibernate: select driver0_.user_id as user1_2_0_, driver0_.version as version2_0_, driver0_.active_status as active3_2_0_, driver0_.car_type as car4_2_0_, driver0_.created_by as created5_2_0_, driver0_.date_created as date6_2_0_, driver0_.last_updated as last7_2_0_, driver0_.last_updated_by as last8_2_0_, driver0_.served_location_id as served9_2_0_, driver0_.tenant_id as tenant10_2_0_ from driver driver0_ where driver0_.user_id=?
Hibernate: select passenger0_.user_id as user1_1_0_, passenger0_.version as version1_0_, passenger0_.created_by as created3_1_0_, passenger0_.date_created as date4_1_0_, passenger0_.last_updated as last5_1_0_, passenger0_.last_updated_by as last6_1_0_, passenger0_.tenant_id as tenant7_1_0_ from passenger passenger0_ where passenger0_.user_id=?
Hibernate: select driver0_.user_id as user1_2_0_, driver0_.version as version2_0_, driver0_.active_status as active3_2_0_, driver0_.car_type as car4_2_0_, driver0_.created_by as created5_2_0_, driver0_.date_created as date6_2_0_, driver0_.last_updated as last7_2_0_, driver0_.last_updated_by as last8_2_0_, driver0_.served_location_id as served9_2_0_, driver0_.tenant_id as tenant10_2_0_ from driver driver0_ where driver0_.user_id=?
Hibernate: select passenger0_.user_id as user1_1_0_, passenger0_.version as version1_0_, passenger0_.created_by as created3_1_0_, passenger0_.date_created as date4_1_0_, passenger0_.last_updated as last5_1_0_, passenger0_.last_updated_by as last6_1_0_, passenger0_.tenant_id as tenant7_1_0_ from passenger passenger0_ where passenger0_.user_id=?
Hibernate: select driver0_.user_id as user1_2_0_, driver0_.version as version2_0_, driver0_.active_status as active3_2_0_, driver0_.car_type as car4_2_0_, driver0_.created_by as created5_2_0_, driver0_.date_created as date6_2_0_, driver0_.last_updated as last7_2_0_, driver0_.last_updated_by as last8_2_0_, driver0_.served_location_id as served9_2_0_, driver0_.tenant_id as tenant10_2_0_ from driver driver0_ where driver0_.user_id=?
Hibernate: select passenger0_.user_id as user1_1_0_, passenger0_.version as version1_0_, passenger0_.created_by as created3_1_0_, passenger0_.date_created as date4_1_0_, passenger0_.last_updated as last5_1_0_, passenger0_.last_updated_by as last6_1_0_, passenger0_.tenant_id as tenant7_1_0_ from passenger passenger0_ where passenger0_.user_id=?
Hibernate: select driver0_.user_id as user1_2_0_, driver0_.version as version2_0_, driver0_.active_status as active3_2_0_, driver0_.car_type as car4_2_0_, driver0_.created_by as created5_2_0_, driver0_.date_created as date6_2_0_, driver0_.last_updated as last7_2_0_, driver0_.last_updated_by as last8_2_0_, driver0_.served_location_id as served9_2_0_, driver0_.tenant_id as tenant10_2_0_ from driver driver0_ where driver0_.user_id=?
Hibernate: select passenger0_.user_id as user1_1_0_, passenger0_.version as version1_0_, passenger0_.created_by as created3_1_0_, passenger0_.date_created as date4_1_0_, passenger0_.last_updated as last5_1_0_, passenger0_.last_updated_by as last6_1_0_, passenger0_.tenant_id as tenant7_1_0_ from passenger passenger0_ where passenger0_.user_id=?
Hibernate: select location0_.id as id0_0_, location0_.version as version0_0_, location0_.created_by as created3_0_0_, location0_.date_created as date4_0_0_, location0_.last_updated as last5_0_0_, location0_.last_updated_by as last6_0_0_, location0_.latitude as latitude0_0_, location0_.location_name as location8_0_0_, location0_.location_type as location9_0_0_, location0_.longitude as longitude0_0_, location0_.political_name as political11_0_0_, location0_.tenant_id as tenant12_0_0_ from location location0_ where location0_.id=?
Hibernate: select location0_.id as id0_0_, location0_.version as version0_0_, location0_.created_by as created3_0_0_, location0_.date_created as date4_0_0_, location0_.last_updated as last5_0_0_, location0_.last_updated_by as last6_0_0_, location0_.latitude as latitude0_0_, location0_.location_name as location8_0_0_, location0_.location_type as location9_0_0_, location0_.longitude as longitude0_0_, location0_.political_name as political11_0_0_, location0_.tenant_id as tenant12_0_0_ from location location0_ where location0_.id=?
Hibernate: select location0_.id as id0_0_, location0_.version as version0_0_, location0_.created_by as created3_0_0_, location0_.date_created as date4_0_0_, location0_.last_updated as last5_0_0_, location0_.last_updated_by as last6_0_0_, location0_.latitude as latitude0_0_, location0_.location_name as location8_0_0_, location0_.location_type as location9_0_0_, location0_.longitude as longitude0_0_, location0_.political_name as political11_0_0_, location0_.tenant_id as tenant12_0_0_ from location location0_ where location0_.id=?
Hibernate: select location0_.id as id0_0_, location0_.version as version0_0_, location0_.created_by as created3_0_0_, location0_.date_created as date4_0_0_, location0_.last_updated as last5_0_0_, location0_.last_updated_by as last6_0_0_, location0_.latitude as latitude0_0_, location0_.location_name as location8_0_0_, location0_.location_type as location9_0_0_, location0_.longitude as longitude0_0_, location0_.political_name as political11_0_0_, location0_.tenant_id as tenant12_0_0_ from location location0_ where location0_.id=?
Hibernate: select location0_.id as id0_0_, location0_.version as version0_0_, location0_.created_by as created3_0_0_, location0_.date_created as date4_0_0_, location0_.last_updated as last5_0_0_, location0_.last_updated_by as last6_0_0_, location0_.latitude as latitude0_0_, location0_.location_name as location8_0_0_, location0_.location_type as location9_0_0_, location0_.longitude as longitude0_0_, location0_.political_name as political11_0_0_, location0_.tenant_id as tenant12_0_0_ from location location0_ where location0_.id=?
Hibernate: select location0_.id as id0_0_, location0_.version as version0_0_, location0_.created_by as created3_0_0_, location0_.date_created as date4_0_0_, location0_.last_updated as last5_0_0_, location0_.last_updated_by as last6_0_0_, location0_.latitude as latitude0_0_, location0_.location_name as location8_0_0_, location0_.location_type as location9_0_0_, location0_.longitude as longitude0_0_, location0_.political_name as political11_0_0_, location0_.tenant_id as tenant12_0_0_ from location location0_ where location0_.id=?
Hibernate: select location0_.id as id0_0_, location0_.version as version0_0_, location0_.created_by as created3_0_0_, location0_.date_created as date4_0_0_, location0_.last_updated as last5_0_0_, location0_.last_updated_by as last6_0_0_, location0_.latitude as latitude0_0_, location0_.location_name as location8_0_0_, location0_.location_type as location9_0_0_, location0_.longitude as longitude0_0_, location0_.political_name as political11_0_0_, location0_.tenant_id as tenant12_0_0_ from location location0_ where location0_.id=?
Hibernate: select location0_.id as id0_0_, location0_.version as version0_0_, location0_.created_by as created3_0_0_, location0_.date_created as date4_0_0_, location0_.last_updated as last5_0_0_, location0_.last_updated_by as last6_0_0_, location0_.latitude as latitude0_0_, location0_.location_name as location8_0_0_, location0_.location_type as location9_0_0_, location0_.longitude as longitude0_0_, location0_.political_name as political11_0_0_, location0_.tenant_id as tenant12_0_0_ from location location0_ where location0_.id=?
Hibernate: select location0_.id as id0_0_, location0_.version as version0_0_, location0_.created_by as created3_0_0_, location0_.date_created as date4_0_0_, location0_.last_updated as last5_0_0_, location0_.last_updated_by as last6_0_0_, location0_.latitude as latitude0_0_, location0_.location_name as location8_0_0_, location0_.location_type as location9_0_0_, location0_.longitude as longitude0_0_, location0_.political_name as political11_0_0_, location0_.tenant_id as tenant12_0_0_ from location location0_ where location0_.id=?
Hibernate: select location0_.id as id0_0_, location0_.version as version0_0_, location0_.created_by as created3_0_0_, location0_.date_created as date4_0_0_, location0_.last_updated as last5_0_0_, location0_.last_updated_by as last6_0_0_, location0_.latitude as latitude0_0_, location0_.location_name as location8_0_0_, location0_.location_type as location9_0_0_, location0_.longitude as longitude0_0_, location0_.political_name as political11_0_0_, location0_.tenant_id as tenant12_0_0_ from location location0_ where location0_.id=?
Hibernate: select location0_.id as id0_0_, location0_.version as version0_0_, location0_.created_by as created3_0_0_, location0_.date_created as date4_0_0_, location0_.last_updated as last5_0_0_, location0_.last_updated_by as last6_0_0_, location0_.latitude as latitude0_0_, location0_.location_name as location8_0_0_, location0_.location_type as location9_0_0_, location0_.longitude as longitude0_0_, location0_.political_name as political11_0_0_, location0_.tenant_id as tenant12_0_0_ from location location0_ where location0_.id=?
Hibernate: select location0_.id as id0_0_, location0_.version as version0_0_, location0_.created_by as created3_0_0_, location0_.date_created as date4_0_0_, location0_.last_updated as last5_0_0_, location0_.last_updated_by as last6_0_0_, location0_.latitude as latitude0_0_, location0_.location_name as location8_0_0_, location0_.location_type as location9_0_0_, location0_.longitude as longitude0_0_, location0_.political_name as political11_0_0_, location0_.tenant_id as tenant12_0_0_ from location location0_ where location0_.id=?
Hibernate: select location0_.id as id0_0_, location0_.version as version0_0_, location0_.created_by as created3_0_0_, location0_.date_created as date4_0_0_, location0_.last_updated as last5_0_0_, location0_.last_updated_by as last6_0_0_, location0_.latitude as latitude0_0_, location0_.location_name as location8_0_0_, location0_.location_type as location9_0_0_, location0_.longitude as longitude0_0_, location0_.political_name as political11_0_0_, location0_.tenant_id as tenant12_0_0_ from location location0_ where location0_.id=?
Hibernate: select location0_.id as id0_0_, location0_.version as version0_0_, location0_.created_by as created3_0_0_, location0_.date_created as date4_0_0_, location0_.last_updated as last5_0_0_, location0_.last_updated_by as last6_0_0_, location0_.latitude as latitude0_0_, location0_.location_name as location8_0_0_, location0_.location_type as location9_0_0_, location0_.longitude as longitude0_0_, location0_.political_name as political11_0_0_, location0_.tenant_id as tenant12_0_0_ from location location0_ where location0_.id=?
Hibernate: select location0_.id as id0_0_, location0_.version as version0_0_, location0_.created_by as created3_0_0_, location0_.date_created as date4_0_0_, location0_.last_updated as last5_0_0_, location0_.last_updated_by as last6_0_0_, location0_.latitude as latitude0_0_, location0_.location_name as location8_0_0_, location0_.location_type as location9_0_0_, location0_.longitude as longitude0_0_, location0_.political_name as political11_0_0_, location0_.tenant_id as tenant12_0_0_ from location location0_ where location0_.id=?
Interceptor createPage: TopLevelWindow[name=""]
Content of web window [TopLevelWindow[name=""]] changed
== Response was 200 (OK) headers: ==============================================
================================================================================
== Content =====================================================================
{"users":[{"id":5,"version":1,"username":"jgoodrider","firstName":"John","lastName":"DecidedToBeADriver","phone":"773-329-1784","email":"jgoodrider@worldtaxi.com","driver":{"servedLocation":{"locationName":"Rua Major Lopes, 55","politicalName":"Belo Horizonte, MG, BR","latitude":-19.9413628,"longitude":-43.9373064,"locationType":"RANGE_INTERPOLATED"},"carType":{"code":"B_VAN","description":"Van"},"activeStatus":{"code":"ENABLED","description":"Enabled"}},"passenger":{}},{"id":10,"version":2,"username":"wheatonCityDriverUser","firstName":"John","lastName":"OldWeathon","phone":"773-329-1784","email":"oldWheaton@worldtaxi.com","driver":{"servedLocation":{"locationName":"Functional Test Major Lopes, 55","politicalName":"Belo Horizonte, MG, BR","latitude":-19.9413628,"longitude":-43.9373064,"locationType":"RANGE_INTERPOLATED"},"carType":{"code":"B_VAN","description":"Van"},"activeStatus":{"code":"ENABLED","description":"Enabled"}}},{"id":19,"version":1,"username":"dultrafast","firstName":"David","lastName":"Ultrafast","phone":"773-329-1784","email":"dultrafast@worldtaxi.com","driver":{"servedLocation":{"locationName":"ARua Major Lopes, 55","politicalName":"Belo Horizonte, MG, BR","latitude":-19.9413628,"longitude":-43.9373064,"locationType":"RANGE_INTERPOLATED"},"carType":{"code":"A_SEDAN","description":"Sedan"},"activeStatus":{"code":"ENABLED","description":"Enabled"}}},{"id":20,"version":1,"username":"jairjunkie","firstName":"John","lastName":"Airjunkie","phone":"773-329-1784","email":"jairjunkie@worldtaxi.com","passenger":{}},{"id":21,"version":1,"username":"testToken","firstName":"John","lastName":"TestToken","phone":"773-329-1784","email":"testToken@moovt.com","passenger":{}},{"id":18,"version":0,"username":"jKeepApnsToken","firstName":"JKeepApnsToken","lastName":"Goodarm","phone":"800-800-2020","email":"egoncalves@moovt.com","driver":{"servedLocation":{"locationName":"Naperville","politicalName":"Illinois, United States","latitude":41.7858629,"longitude":-88.1472893,"locationType":"APPROXIMATE"},"carType":{"code":"B_VAN","description":"Van"},"activeStatus":{"code":"ENABLED","description":"Enabled"}}},{"id":4,"version":0,"username":"admin","firstName":"Admin","lastName":"Admin","phone":"800-800-8080","email":"admin@worldtaxi.com"},{"id":6,"version":0,"username":"jgoodarm","firstName":"John","lastName":"Goodarm","phone":"800-800-2020","email":"jgoodarm@worldtaxi.com","driver":{"servedLocation":{"locationName":"Naperville","politicalName":"Illinois, United States","latitude":41.7858629,"longitude":-88.1472893,"locationType":"APPROXIMATE"},"carType":{"code":"B_VAN","description":"Van"},"activeStatus":{"code":"ENABLED","description":"Enabled"}}},{"id":7,"version":0,"username":"jspeedy","firstName":"John","lastName":"Speedy","phone":"800-800-2020","email":"jspeedy@worldtaxi.com","driver":{"servedLocation":{"locationName":"Naperville","politicalName":"Illinois, United States","latitude":41.7858629,"longitude":-88.1472893,"locationType":"APPROXIMATE"},"carType":{"code":"B_VAN","description":"Van"},"activeStatus":{"code":"ENABLED","description":"Enabled"}}},{"id":8,"version":0,"username":"jforgetful","firstName":"John","lastName":"Forgetful","phone":"800-800-2020","email":"jforgetful@worldtaxi.com","driver":{"servedLocation":{"locationName":"Naperville","politicalName":"Illinois, United States","latitude":41.7858629,"longitude":-88.1472893,"locationType":"APPROXIMATE"},"carType":{"code":"B_VAN","description":"Van"},"activeStatus":{"code":"ENABLED","description":"Enabled"}}},{"id":9,"version":0,"username":"napervilleCityDriverUser","firstName":"napervilleCityDriverUser","lastName":"Goodarm","phone":"800-800-2020","email":"egoncalves@moovt.com","driver":{"servedLocation":{"locationName":"Naperville","politicalName":"Illinois, United States","latitude":41.7858629,"longitude":-88.1472893,"locationType":"APPROXIMATE"},"carType":{"code":"B_VAN","description":"Van"},"activeStatus":{"code":"ENABLED","description":"Enabled"}}},{"id":11,"version":0,"username":"auroraCityDriverUser","firstName":"auroraCityDriverUser","lastName":"Goodarm","phone":"800-800-2020","email":"egoncalves@moovt.com","driver":{"servedLocation":{"locationName":"Aurora","politicalName":"Illinois, United States","latitude":41.7605849,"longitude":-88.32007150000001,"locationType":"APPROXIMATE"},"carType":{"code":"B_VAN","description":"Van"},"activeStatus":{"code":"ENABLED","description":"Enabled"}}},{"id":12,"version":0,"username":"plainfieldCityDriverUser","firstName":"plainfieldCityDriverUser","lastName":"Goodarm","phone":"800-800-2020","email":"egoncalves@moovt.com","driver":{"servedLocation":{"locationName":"Plainfield","politicalName":"Illinois, United States","latitude":41.632223,"longitude":-88.2120315,"locationType":"APPROXIMATE"},"carType":{"code":"B_VAN","description":"Van"},"activeStatus":{"code":"ENABLED","description":"Enabled"}}},{"id":13,"version":0,"username":"detroitCityDriverUser","firstName":"detroitCityDriverUser","lastName":"Goodarm","phone":"800-800-2020","email":"egoncalves@moovt.com","driver":{"servedLocation":{"locationName":"Detroit","politicalName":"Michigan, United States","latitude":42.331427,"longitude":-83.0457538,"locationType":"APPROXIMATE"},"carType":{"code":"B_VAN","description":"Van"},"activeStatus":{"code":"ENABLED","description":"Enabled"}}},{"id":14,"version":0,"username":"contagemCityDriverUser","firstName":"contagemCityDriverUser","lastName":"Goodarm","phone":"800-800-2020","email":"egoncalves@moovt.com","driver":{"servedLocation":{"locationName":"Contagem","politicalName":"Minas Gerais, Brazil","latitude":-19.9385599,"longitude":-44.0529377,"locationType":"APPROXIMATE"},"carType":{"code":"B_VAN","description":"Van"},"activeStatus":{"code":"ENABLED","description":"Enabled"}}},{"id":15,"version":0,"username":"vespasianoCityDriverUser","firstName":"vespasianoCityDriverUser","lastName":"Goodarm","phone":"800-800-2020","email":"egoncalves@moovt.com","driver":{"servedLocation":{"locationName":"Vespasiano","politicalName":"Minas Gerais, Brazil","latitude":-19.6933911,"longitude":-43.913722,"locationType":"APPROXIMATE"},"carType":{"code":"B_VAN","description":"Van"},"activeStatus":{"code":"ENABLED","description":"Enabled"}}},{"id":16,"version":0,"username":"carmoDoCajuruCityDriverUser","firstName":"carmoDoCajuruCityDriverUser","lastName":"Goodarm","phone":"800-800-2020","email":"egoncalves@moovt.com","driver":{"servedLocation":{"locationName":"Carmo do Cajuru","politicalName":"Minas Gerais, Brazil","latitude":-20.1870332,"longitude":-44.7731276,"locationType":"APPROXIMATE"},"carType":{"code":"B_VAN","description":"Van"},"activeStatus":{"code":"ENABLED","description":"Enabled"}}},{"id":17,"version":0,"username":"jWillGainApnsToken","firstName":"JWillGainApnsToken","lastName":"Goodarm","phone":"800-800-2020","email":"egoncalves@moovt.com","driver":{"servedLocation":{"locationName":"Naperville","politicalName":"Illinois, United States","latitude":41.7858629,"longitude":-88.1472893,"locationType":"APPROXIMATE"},"carType":{"code":"B_VAN","description":"Van"},"activeStatus":{"code":"ENABLED","description":"Enabled"}}}]}
================================================================================
#
--Output from testRetrieveUserDetailByIdEnglish--
Switching to browser client [default]
Creating to new client [default] of type [class com.grailsrocks.functionaltest.client.BrowserClient]

== Making request POST http://localhost:8080/moovt/login/authenticateUser parameters: ==
== Request headers: ============================================================
Accept-Encoding: gzip, deflate
Content-Type: application/json
Accept: */*
== Content =====================================================================

				{"type":"Self","tenantname": "WorldTaxi", "username": "admin", "password":"admin","locale":"en_US"}
				
================================================================================
Hibernate: select this_.id as id3_0_, this_.version as version3_0_, this_.created_by as created3_3_0_, this_.date_created as date4_3_0_, this_.last_updated as last5_3_0_, this_.last_updated_by as last6_3_0_, this_.name as name3_0_ from tenant this_ where this_.name=? limit ?
Hibernate: select this_.id as id8_0_, this_.version as version8_0_, this_.account_expired as account3_8_0_, this_.account_locked as account4_8_0_, this_.apns_token as apns5_8_0_, this_.created_by as created6_8_0_, this_.date_created as date7_8_0_, this_.email as email8_0_, this_.enabled as enabled8_0_, this_.first_name as first10_8_0_, this_.last_name as last11_8_0_, this_.last_updated as last12_8_0_, this_.last_updated_by as last13_8_0_, this_.locale as locale8_0_, this_.`password` as password15_8_0_, this_.password_expired as password16_8_0_, this_.phone as phone8_0_, this_.tenant_id as tenant18_8_0_, this_.username as username8_0_ from user this_ where this_.tenant_id=? and this_.username=? limit ?
Hibernate: select driver0_.user_id as user1_2_0_, driver0_.version as version2_0_, driver0_.active_status as active3_2_0_, driver0_.car_type as car4_2_0_, driver0_.created_by as created5_2_0_, driver0_.date_created as date6_2_0_, driver0_.last_updated as last7_2_0_, driver0_.last_updated_by as last8_2_0_, driver0_.served_location_id as served9_2_0_, driver0_.tenant_id as tenant10_2_0_ from driver driver0_ where driver0_.user_id=?
Hibernate: select passenger0_.user_id as user1_1_0_, passenger0_.version as version1_0_, passenger0_.created_by as created3_1_0_, passenger0_.date_created as date4_1_0_, passenger0_.last_updated as last5_1_0_, passenger0_.last_updated_by as last6_1_0_, passenger0_.tenant_id as tenant7_1_0_ from passenger passenger0_ where passenger0_.user_id=?
Hibernate: select this_.role_id as role1_4_0_, this_.user_id as user2_4_0_, this_.created_by as created3_4_0_, this_.date_created as date4_4_0_, this_.last_updated as last5_4_0_, this_.last_updated_by as last6_4_0_, this_.tenant_id as tenant7_4_0_ from user_role this_ where this_.tenant_id=? and this_.user_id=?
Hibernate: select this_.role_id as role1_4_0_, this_.user_id as user2_4_0_, this_.created_by as created3_4_0_, this_.date_created as date4_4_0_, this_.last_updated as last5_4_0_, this_.last_updated_by as last6_4_0_, this_.tenant_id as tenant7_4_0_ from user_role this_ where this_.tenant_id=? and this_.user_id=?
ROLE_ADMIN
Interceptor createPage: TopLevelWindow[name=""]
Content of web window [TopLevelWindow[name=""]] changed
== Response was 200 (OK) headers: ==============================================
================================================================================
== Content =====================================================================
{"result":{"type":"USER","code":"SUCCESS","message":"Login successful."}, "additionalInfo":{"JSESSIONID":"BCAA84DB6D2D95AE55449B25262E8E18","userType":"NO_TYPE"}}
================================================================================
#
== Making request POST http://localhost:8080/moovt/user/retrieveUserDetailById parameters: ==
== Request headers: ============================================================
Accept-Encoding: gzip, deflate
Content-Type: application/json
Accept: */*
== Content =====================================================================

				{"id":"6"}
				
================================================================================
Hibernate: select this_.id as id8_0_, this_.version as version8_0_, this_.account_expired as account3_8_0_, this_.account_locked as account4_8_0_, this_.apns_token as apns5_8_0_, this_.created_by as created6_8_0_, this_.date_created as date7_8_0_, this_.email as email8_0_, this_.enabled as enabled8_0_, this_.first_name as first10_8_0_, this_.last_name as last11_8_0_, this_.last_updated as last12_8_0_, this_.last_updated_by as last13_8_0_, this_.locale as locale8_0_, this_.`password` as password15_8_0_, this_.password_expired as password16_8_0_, this_.phone as phone8_0_, this_.tenant_id as tenant18_8_0_, this_.username as username8_0_ from user this_ where (this_.id=?) order by this_.last_updated desc
Hibernate: select driver0_.user_id as user1_2_0_, driver0_.version as version2_0_, driver0_.active_status as active3_2_0_, driver0_.car_type as car4_2_0_, driver0_.created_by as created5_2_0_, driver0_.date_created as date6_2_0_, driver0_.last_updated as last7_2_0_, driver0_.last_updated_by as last8_2_0_, driver0_.served_location_id as served9_2_0_, driver0_.tenant_id as tenant10_2_0_ from driver driver0_ where driver0_.user_id=?
Hibernate: select passenger0_.user_id as user1_1_0_, passenger0_.version as version1_0_, passenger0_.created_by as created3_1_0_, passenger0_.date_created as date4_1_0_, passenger0_.last_updated as last5_1_0_, passenger0_.last_updated_by as last6_1_0_, passenger0_.tenant_id as tenant7_1_0_ from passenger passenger0_ where passenger0_.user_id=?
Hibernate: select location0_.id as id0_0_, location0_.version as version0_0_, location0_.created_by as created3_0_0_, location0_.date_created as date4_0_0_, location0_.last_updated as last5_0_0_, location0_.last_updated_by as last6_0_0_, location0_.latitude as latitude0_0_, location0_.location_name as location8_0_0_, location0_.location_type as location9_0_0_, location0_.longitude as longitude0_0_, location0_.political_name as political11_0_0_, location0_.tenant_id as tenant12_0_0_ from location location0_ where location0_.id=?
Interceptor createPage: TopLevelWindow[name=""]
Content of web window [TopLevelWindow[name=""]] changed
== Response was 200 (OK) headers: ==============================================
================================================================================
== Content =====================================================================
{"user":{"id":6,"version":0,"username":"jgoodarm","firstName":"John","lastName":"Goodarm","phone":"800-800-2020","email":"jgoodarm@worldtaxi.com","driver":{"servedLocation":{"locationName":"Naperville","politicalName":"Illinois, United States","latitude":41.7858629,"longitude":-88.1472893,"locationType":"APPROXIMATE"},"carType":{"code":"B_VAN","description":"Van"},"activeStatus":{"code":"ENABLED","description":"Enabled"}}}}
================================================================================
#
--Output from testRetrieveLoggedUserDetailsIdEnglish--
Switching to browser client [default]
Creating to new client [default] of type [class com.grailsrocks.functionaltest.client.BrowserClient]

== Making request POST http://localhost:8080/moovt/login/authenticateUser parameters: ==
== Request headers: ============================================================
Accept-Encoding: gzip, deflate
Content-Type: application/json
Accept: */*
== Content =====================================================================

				{"type":"Self","tenantname":"WorldTaxi","username":"jgoodrider","password":"Welcome!1",locale:"pt_BR"}
				
================================================================================
Hibernate: select this_.id as id3_0_, this_.version as version3_0_, this_.created_by as created3_3_0_, this_.date_created as date4_3_0_, this_.last_updated as last5_3_0_, this_.last_updated_by as last6_3_0_, this_.name as name3_0_ from tenant this_ where this_.name=? limit ?
Hibernate: select this_.id as id8_0_, this_.version as version8_0_, this_.account_expired as account3_8_0_, this_.account_locked as account4_8_0_, this_.apns_token as apns5_8_0_, this_.created_by as created6_8_0_, this_.date_created as date7_8_0_, this_.email as email8_0_, this_.enabled as enabled8_0_, this_.first_name as first10_8_0_, this_.last_name as last11_8_0_, this_.last_updated as last12_8_0_, this_.last_updated_by as last13_8_0_, this_.locale as locale8_0_, this_.`password` as password15_8_0_, this_.password_expired as password16_8_0_, this_.phone as phone8_0_, this_.tenant_id as tenant18_8_0_, this_.username as username8_0_ from user this_ where this_.tenant_id=? and this_.username=? limit ?
Hibernate: select driver0_.user_id as user1_2_0_, driver0_.version as version2_0_, driver0_.active_status as active3_2_0_, driver0_.car_type as car4_2_0_, driver0_.created_by as created5_2_0_, driver0_.date_created as date6_2_0_, driver0_.last_updated as last7_2_0_, driver0_.last_updated_by as last8_2_0_, driver0_.served_location_id as served9_2_0_, driver0_.tenant_id as tenant10_2_0_ from driver driver0_ where driver0_.user_id=?
Hibernate: select passenger0_.user_id as user1_1_0_, passenger0_.version as version1_0_, passenger0_.created_by as created3_1_0_, passenger0_.date_created as date4_1_0_, passenger0_.last_updated as last5_1_0_, passenger0_.last_updated_by as last6_1_0_, passenger0_.tenant_id as tenant7_1_0_ from passenger passenger0_ where passenger0_.user_id=?
Hibernate: select this_.role_id as role1_4_0_, this_.user_id as user2_4_0_, this_.created_by as created3_4_0_, this_.date_created as date4_4_0_, this_.last_updated as last5_4_0_, this_.last_updated_by as last6_4_0_, this_.tenant_id as tenant7_4_0_ from user_role this_ where this_.tenant_id=? and this_.user_id=?
Hibernate: select this_.role_id as role1_4_0_, this_.user_id as user2_4_0_, this_.created_by as created3_4_0_, this_.date_created as date4_4_0_, this_.last_updated as last5_4_0_, this_.last_updated_by as last6_4_0_, this_.tenant_id as tenant7_4_0_ from user_role this_ where this_.tenant_id=? and this_.user_id=?
ROLE_DRIVER
ROLE_PASSENGER
ROLE_RIDE_MGR
Interceptor createPage: TopLevelWindow[name=""]
Content of web window [TopLevelWindow[name=""]] changed
== Response was 200 (OK) headers: ==============================================
================================================================================
== Content =====================================================================
{"result":{"type":"USER","code":"SUCCESS","message":"Login successful."}, "additionalInfo":{"JSESSIONID":"7E5D6598CB0D216005F9F18BF6BEA774","userType":"PASSENGER"}}
================================================================================
#
== Making request POST http://localhost:8080/moovt/user/retrieveLoggedUserDetails parameters: ==
== Request headers: ============================================================
Accept-Encoding: gzip, deflate
Content-Type: application/json
Accept: */*
== Content =====================================================================

				{}
				
================================================================================
Hibernate: select user0_.id as id8_0_, user0_.version as version8_0_, user0_.account_expired as account3_8_0_, user0_.account_locked as account4_8_0_, user0_.apns_token as apns5_8_0_, user0_.created_by as created6_8_0_, user0_.date_created as date7_8_0_, user0_.email as email8_0_, user0_.enabled as enabled8_0_, user0_.first_name as first10_8_0_, user0_.last_name as last11_8_0_, user0_.last_updated as last12_8_0_, user0_.last_updated_by as last13_8_0_, user0_.locale as locale8_0_, user0_.`password` as password15_8_0_, user0_.password_expired as password16_8_0_, user0_.phone as phone8_0_, user0_.tenant_id as tenant18_8_0_, user0_.username as username8_0_ from user user0_ where user0_.id=?
Hibernate: select driver0_.user_id as user1_2_0_, driver0_.version as version2_0_, driver0_.active_status as active3_2_0_, driver0_.car_type as car4_2_0_, driver0_.created_by as created5_2_0_, driver0_.date_created as date6_2_0_, driver0_.last_updated as last7_2_0_, driver0_.last_updated_by as last8_2_0_, driver0_.served_location_id as served9_2_0_, driver0_.tenant_id as tenant10_2_0_ from driver driver0_ where driver0_.user_id=?
Hibernate: select passenger0_.user_id as user1_1_0_, passenger0_.version as version1_0_, passenger0_.created_by as created3_1_0_, passenger0_.date_created as date4_1_0_, passenger0_.last_updated as last5_1_0_, passenger0_.last_updated_by as last6_1_0_, passenger0_.tenant_id as tenant7_1_0_ from passenger passenger0_ where passenger0_.user_id=?
Hibernate: select location0_.id as id0_0_, location0_.version as version0_0_, location0_.created_by as created3_0_0_, location0_.date_created as date4_0_0_, location0_.last_updated as last5_0_0_, location0_.last_updated_by as last6_0_0_, location0_.latitude as latitude0_0_, location0_.location_name as location8_0_0_, location0_.location_type as location9_0_0_, location0_.longitude as longitude0_0_, location0_.political_name as political11_0_0_, location0_.tenant_id as tenant12_0_0_ from location location0_ where location0_.id=?
Interceptor createPage: TopLevelWindow[name=""]
Content of web window [TopLevelWindow[name=""]] changed
== Response was 200 (OK) headers: ==============================================
================================================================================
== Content =====================================================================
{"user":{"id":5,"version":1,"username":"jgoodrider","firstName":"John","lastName":"DecidedToBeADriver","phone":"773-329-1784","email":"jgoodrider@worldtaxi.com","driver":{"servedLocation":{"locationName":"Rua Major Lopes, 55","politicalName":"Belo Horizonte, MG, BR","latitude":-19.9413628,"longitude":-43.9373064,"locationType":"RANGE_INTERPOLATED"},"carType":{"code":"B_VAN","description":"Van"},"activeStatus":{"code":"ENABLED","description":"Enabled"}},"passenger":{}}}
================================================================================
#
]]></system-out>

      <system-err><![CDATA[--Output from testGetCarTypeEnumEnglish--
--Output from testGetCarTypeEnumPortuguese--
--Output from testGetActiveStatusEnumEnglish--
--Output from testGetActiveStatusEnumPortugues--
--Output from testCreateUserDriverEnglish--
--Output from testCreateUserPassengerEnglish--
--Output from testCreateUserPassengerWithTokenEnglish--
--Output from testUpdateUserDriverEnglish--
--Output from testUpdateUserPassengerEnglish--
--Output from testRetrieveAllUsersrEnglish--
--Output from testRetrieveUserDetailByIdEnglish--
--Output from testRetrieveLoggedUserDetailsIdEnglish--
]]></system-err>

  </testsuite>
  <testsuite errors="0" failures="0" hostname="Eduardo-Goncalvess-MacBook-Pro.local" id="1" name="LocationFunctionalTests" package="com.moovt" tests="5" time="1.572" timestamp="2013-08-01T04:17:17">
      <properties />

      <testcase classname="com.moovt.LocationFunctionalTests" name="testSearchBadJSON" time="0.099" />

      <testcase classname="com.moovt.LocationFunctionalTests" name="testSearchNoLocation" time="0.214" />

      <testcase classname="com.moovt.LocationFunctionalTests" name="testSearchCity" time="0.841" />

      <testcase classname="com.moovt.LocationFunctionalTests" name="testSearchStreet" time="0.22" />

      <testcase classname="com.moovt.LocationFunctionalTests" name="testState" time="0.186" />

      <system-out><![CDATA[--Output from testSearchBadJSON--
Switching to browser client [default]
Creating to new client [default] of type [class com.grailsrocks.functionaltest.client.BrowserClient]

== Making request POST http://localhost:8080/moovt/location/search parameters: ==
== Request headers: ============================================================
Accept-Encoding: gzip, deflate
Content-Type: application/json
Accept: */*
== Content =====================================================================

================================================================================
Interceptor createPage: TopLevelWindow[name=""]
Content of web window [TopLevelWindow[name=""]] changed
== Response was 200 (OK) headers: ==============================================
================================================================================
== Content =====================================================================
{"result":{"type":"SYSTEM","code":"ERROR","message":"A JSONObject text must begin with '{' at character 0 of "}}
================================================================================
#
--Output from testSearchNoLocation--
Switching to browser client [default]
Creating to new client [default] of type [class com.grailsrocks.functionaltest.client.BrowserClient]

== Making request POST http://localhost:8080/moovt/location/search parameters: ==
== Request headers: ============================================================
Accept-Encoding: gzip, deflate
Content-Type: application/json
Accept: */*
== Content =====================================================================

{"thisMustBeLocation":"Rua Major Lopes 55, Belo Horizonte, MG"}				
================================================================================
Interceptor createPage: TopLevelWindow[name=""]
Content of web window [TopLevelWindow[name=""]] changed
== Response was 200 (OK) headers: ==============================================
================================================================================
== Content =====================================================================
{"result":{"type":"SYSTEM","code":"ERROR","message":"Input JSON must contain a location element"}}{"result":{"type":"SYSTEM","code":"ERROR","message":"Cannot invoke method toUpperCase() on null object"}}
================================================================================
#
--Output from testSearchCity--
Switching to browser client [default]
Creating to new client [default] of type [class com.grailsrocks.functionaltest.client.BrowserClient]

== Making request POST http://localhost:8080/moovt/location/search parameters: ==
== Request headers: ============================================================
Accept-Encoding: gzip, deflate
Content-Type: application/json
Accept: */*
== Content =====================================================================

{"location":"Belo Horizonte, MG"}	
				
================================================================================
Interceptor createPage: TopLevelWindow[name=""]
Content of web window [TopLevelWindow[name=""]] changed
== Response was 200 (OK) headers: ==============================================
================================================================================
== Content =====================================================================
{"locations":[{"locationName":"Belo Horizonte","politicalName":"Minas Gerais, Brazil","latitude":-19.9190677,"longitude":-43.9385747,"locationType":"APPROXIMATE"}]}
================================================================================
#
--Output from testSearchStreet--
Switching to browser client [default]
Creating to new client [default] of type [class com.grailsrocks.functionaltest.client.BrowserClient]

== Making request POST http://localhost:8080/moovt/location/search parameters: ==
== Request headers: ============================================================
Accept-Encoding: gzip, deflate
Content-Type: application/json
Accept: */*
== Content =====================================================================

{"location":"Rua Major Lopes 55, Belo Horizonte, MG"}	
				
================================================================================
Interceptor createPage: TopLevelWindow[name=""]
Content of web window [TopLevelWindow[name=""]] changed
== Response was 200 (OK) headers: ==============================================
================================================================================
== Content =====================================================================
{"locations":[{"locationName":"Rua Major Lopes, 55","politicalName":"Belo Horizonte, MG, BR","latitude":-19.9413629,"longitude":-43.9373061,"locationType":"RANGE_INTERPOLATED"}]}
================================================================================
#
--Output from testState--
Switching to browser client [default]
Creating to new client [default] of type [class com.grailsrocks.functionaltest.client.BrowserClient]

== Making request POST http://localhost:8080/moovt/location/search parameters: ==
== Request headers: ============================================================
Accept-Encoding: gzip, deflate
Content-Type: application/json
Accept: */*
== Content =====================================================================

{"location":"MG"}	
				
================================================================================
Interceptor createPage: TopLevelWindow[name=""]
Content of web window [TopLevelWindow[name=""]] changed
== Response was 200 (OK) headers: ==============================================
================================================================================
== Content =====================================================================
{"locations":[]}
================================================================================
#
]]></system-out>

      <system-err><![CDATA[--Output from testSearchBadJSON--
--Output from testSearchNoLocation--
--Output from testSearchCity--
--Output from testSearchStreet--
--Output from testState--
]]></system-err>

  </testsuite>
  <testsuite errors="0" failures="0" hostname="Eduardo-Goncalvess-MacBook-Pro.local" id="2" name="LoginFunctionalTests" package="com.moovt" tests="15" time="2.017" timestamp="2013-08-01T04:17:18">
      <properties />

      <testcase classname="com.moovt.LoginFunctionalTests" name="testLoginBadMessage" time="0.088" />

      <testcase classname="com.moovt.LoginFunctionalTests" name="testLoginSuccessEnglish" time="0.143" />

      <testcase classname="com.moovt.LoginFunctionalTests" name="testLoginSuccessPortuguese" time="0.158" />

      <testcase classname="com.moovt.LoginFunctionalTests" name="testLoginNoTenantEnglish" time="0.165" />

      <testcase classname="com.moovt.LoginFunctionalTests" name="testLoginNoTenantPortuguese" time="0.092" />

      <testcase classname="com.moovt.LoginFunctionalTests" name="testLoginTenantNotFoundEnglish" time="0.142" />

      <testcase classname="com.moovt.LoginFunctionalTests" name="testLoginTenantNotFoundPortuguese" time="0.104" />

      <testcase classname="com.moovt.LoginFunctionalTests" name="testLoginNoPasswordEnglish" time="0.197" />

      <testcase classname="com.moovt.LoginFunctionalTests" name="testLoginNoUsernamedEnglish" time="0.087" />

      <testcase classname="com.moovt.LoginFunctionalTests" name="testLoginFailedEnglish" time="0.225" />

      <testcase classname="com.moovt.LoginFunctionalTests" name="testLoginNoPasswordPortuguese" time="0.077" />

      <testcase classname="com.moovt.LoginFunctionalTests" name="testLoginNoUsernamedPortuguese" time="0.079" />

      <testcase classname="com.moovt.LoginFunctionalTests" name="testLoginFailedPortuguese" time="0.16" />

      <testcase classname="com.moovt.LoginFunctionalTests" name="testLoginWithApnsToken" time="0.184" />

      <testcase classname="com.moovt.LoginFunctionalTests" name="testLoginKeepApnsToken" time="0.086" />

      <system-out><![CDATA[--Output from testLoginBadMessage--
Switching to browser client [default]
Creating to new client [default] of type [class com.grailsrocks.functionaltest.client.BrowserClient]

== Making request POST http://localhost:8080/moovt/login/authenticateUser parameters: ==
== Request headers: ============================================================
Accept-Encoding: gzip, deflate
Content-Type: application/json
Accept: */*
== Content =====================================================================

================================================================================
Interceptor createPage: TopLevelWindow[name=""]
Content of web window [TopLevelWindow[name=""]] changed
== Response was 200 (OK) headers: ==============================================
================================================================================
== Content =====================================================================
{"result":{"type":"SYSTEM","code":"ERROR","message":"A JSONObject text must begin with '{' at character 0 of "}}
================================================================================
#
--Output from testLoginSuccessEnglish--
Switching to browser client [default]
Creating to new client [default] of type [class com.grailsrocks.functionaltest.client.BrowserClient]

== Making request POST http://localhost:8080/moovt/login/authenticateUser parameters: ==
== Request headers: ============================================================
Accept-Language: en-US
Accept-Encoding: gzip, deflate
Content-Type: application/json
Accept: */*
== Content =====================================================================

				{"type":"Self","tenantname":"WorldTaxi","username":"jgoodrider","password":"Welcome!1"}
				
================================================================================
Hibernate: select this_.id as id3_0_, this_.version as version3_0_, this_.created_by as created3_3_0_, this_.date_created as date4_3_0_, this_.last_updated as last5_3_0_, this_.last_updated_by as last6_3_0_, this_.name as name3_0_ from tenant this_ where this_.name=? limit ?
Hibernate: select this_.id as id8_0_, this_.version as version8_0_, this_.account_expired as account3_8_0_, this_.account_locked as account4_8_0_, this_.apns_token as apns5_8_0_, this_.created_by as created6_8_0_, this_.date_created as date7_8_0_, this_.email as email8_0_, this_.enabled as enabled8_0_, this_.first_name as first10_8_0_, this_.last_name as last11_8_0_, this_.last_updated as last12_8_0_, this_.last_updated_by as last13_8_0_, this_.locale as locale8_0_, this_.`password` as password15_8_0_, this_.password_expired as password16_8_0_, this_.phone as phone8_0_, this_.tenant_id as tenant18_8_0_, this_.username as username8_0_ from user this_ where this_.tenant_id=? and this_.username=? limit ?
Hibernate: select driver0_.user_id as user1_2_0_, driver0_.version as version2_0_, driver0_.active_status as active3_2_0_, driver0_.car_type as car4_2_0_, driver0_.created_by as created5_2_0_, driver0_.date_created as date6_2_0_, driver0_.last_updated as last7_2_0_, driver0_.last_updated_by as last8_2_0_, driver0_.served_location_id as served9_2_0_, driver0_.tenant_id as tenant10_2_0_ from driver driver0_ where driver0_.user_id=?
Hibernate: select passenger0_.user_id as user1_1_0_, passenger0_.version as version1_0_, passenger0_.created_by as created3_1_0_, passenger0_.date_created as date4_1_0_, passenger0_.last_updated as last5_1_0_, passenger0_.last_updated_by as last6_1_0_, passenger0_.tenant_id as tenant7_1_0_ from passenger passenger0_ where passenger0_.user_id=?
Hibernate: select this_.role_id as role1_4_0_, this_.user_id as user2_4_0_, this_.created_by as created3_4_0_, this_.date_created as date4_4_0_, this_.last_updated as last5_4_0_, this_.last_updated_by as last6_4_0_, this_.tenant_id as tenant7_4_0_ from user_role this_ where this_.tenant_id=? and this_.user_id=?
Hibernate: select this_.role_id as role1_4_0_, this_.user_id as user2_4_0_, this_.created_by as created3_4_0_, this_.date_created as date4_4_0_, this_.last_updated as last5_4_0_, this_.last_updated_by as last6_4_0_, this_.tenant_id as tenant7_4_0_ from user_role this_ where this_.tenant_id=? and this_.user_id=?
ROLE_DRIVER
ROLE_PASSENGER
ROLE_RIDE_MGR
Interceptor createPage: TopLevelWindow[name=""]
Content of web window [TopLevelWindow[name=""]] changed
== Response was 200 (OK) headers: ==============================================
================================================================================
== Content =====================================================================
{"result":{"type":"USER","code":"SUCCESS","message":"Login successful."}, "additionalInfo":{"JSESSIONID":"36D632ACCB84E0912BBFCCE09EC9415E","userType":"PASSENGER"}}
================================================================================
#
--Output from testLoginSuccessPortuguese--
Switching to browser client [default]
Creating to new client [default] of type [class com.grailsrocks.functionaltest.client.BrowserClient]

== Making request POST http://localhost:8080/moovt/login/authenticateUser parameters: ==
== Request headers: ============================================================
Accept-Language: pt-BR
Accept-Encoding: gzip, deflate
Content-Type: application/json
Accept: */*
== Content =====================================================================

				{"type":"Self","tenantname": "naSavassi", "username": "admin", "password":"admin"}
				
================================================================================
Hibernate: select this_.id as id3_0_, this_.version as version3_0_, this_.created_by as created3_3_0_, this_.date_created as date4_3_0_, this_.last_updated as last5_3_0_, this_.last_updated_by as last6_3_0_, this_.name as name3_0_ from tenant this_ where this_.name=? limit ?
Hibernate: select this_.id as id8_0_, this_.version as version8_0_, this_.account_expired as account3_8_0_, this_.account_locked as account4_8_0_, this_.apns_token as apns5_8_0_, this_.created_by as created6_8_0_, this_.date_created as date7_8_0_, this_.email as email8_0_, this_.enabled as enabled8_0_, this_.first_name as first10_8_0_, this_.last_name as last11_8_0_, this_.last_updated as last12_8_0_, this_.last_updated_by as last13_8_0_, this_.locale as locale8_0_, this_.`password` as password15_8_0_, this_.password_expired as password16_8_0_, this_.phone as phone8_0_, this_.tenant_id as tenant18_8_0_, this_.username as username8_0_ from user this_ where this_.tenant_id=? and this_.username=? limit ?
Hibernate: select driver0_.user_id as user1_2_0_, driver0_.version as version2_0_, driver0_.active_status as active3_2_0_, driver0_.car_type as car4_2_0_, driver0_.created_by as created5_2_0_, driver0_.date_created as date6_2_0_, driver0_.last_updated as last7_2_0_, driver0_.last_updated_by as last8_2_0_, driver0_.served_location_id as served9_2_0_, driver0_.tenant_id as tenant10_2_0_ from driver driver0_ where driver0_.user_id=?
Hibernate: select passenger0_.user_id as user1_1_0_, passenger0_.version as version1_0_, passenger0_.created_by as created3_1_0_, passenger0_.date_created as date4_1_0_, passenger0_.last_updated as last5_1_0_, passenger0_.last_updated_by as last6_1_0_, passenger0_.tenant_id as tenant7_1_0_ from passenger passenger0_ where passenger0_.user_id=?
Hibernate: select this_.role_id as role1_4_0_, this_.user_id as user2_4_0_, this_.created_by as created3_4_0_, this_.date_created as date4_4_0_, this_.last_updated as last5_4_0_, this_.last_updated_by as last6_4_0_, this_.tenant_id as tenant7_4_0_ from user_role this_ where this_.tenant_id=? and this_.user_id=?
Hibernate: select role0_.id as id6_0_, role0_.version as version6_0_, role0_.authority as authority6_0_, role0_.created_by as created4_6_0_, role0_.date_created as date5_6_0_, role0_.last_updated as last6_6_0_, role0_.last_updated_by as last7_6_0_, role0_.tenant_id as tenant8_6_0_ from role role0_ where role0_.id=?
Hibernate: select role0_.id as id6_0_, role0_.version as version6_0_, role0_.authority as authority6_0_, role0_.created_by as created4_6_0_, role0_.date_created as date5_6_0_, role0_.last_updated as last6_6_0_, role0_.last_updated_by as last7_6_0_, role0_.tenant_id as tenant8_6_0_ from role role0_ where role0_.id=?
Hibernate: select this_.role_id as role1_4_0_, this_.user_id as user2_4_0_, this_.created_by as created3_4_0_, this_.date_created as date4_4_0_, this_.last_updated as last5_4_0_, this_.last_updated_by as last6_4_0_, this_.tenant_id as tenant7_4_0_ from user_role this_ where this_.tenant_id=? and this_.user_id=?
ROLE_ADMIN
ROLE_ITEM_MGR
Interceptor createPage: TopLevelWindow[name=""]
Content of web window [TopLevelWindow[name=""]] changed
== Response was 200 (OK) headers: ==============================================
================================================================================
== Content =====================================================================
{"result":{"type":"USER","code":"SUCCESS","message":"Login bem sucedido."}, "additionalInfo":{"JSESSIONID":"D620646E816C243F23EC85E3704ED7AE","userType":"NO_TYPE"}}
================================================================================
#
--Output from testLoginNoTenantEnglish--
Switching to browser client [default]
Creating to new client [default] of type [class com.grailsrocks.functionaltest.client.BrowserClient]

== Making request POST http://localhost:8080/moovt/login/authenticateUser parameters: ==
== Request headers: ============================================================
Accept-Language: en-US
Accept-Encoding: gzip, deflate
Content-Type: application/json
Accept: */*
== Content =====================================================================

				{"type":"Self","tenantname": "", "username": "admin", "password":"admin"}
				
================================================================================
Interceptor createPage: TopLevelWindow[name=""]
Content of web window [TopLevelWindow[name=""]] changed
== Response was 200 (OK) headers: ==============================================
================================================================================
== Content =====================================================================
{"result":{"type":"SYSTEM","code":"ERROR","message":"Authentication failed because no company was provided. Please enter a company."}}
================================================================================
#
--Output from testLoginNoTenantPortuguese--
Switching to browser client [default]
Creating to new client [default] of type [class com.grailsrocks.functionaltest.client.BrowserClient]

== Making request POST http://localhost:8080/moovt/login/authenticateUser parameters: ==
== Request headers: ============================================================
Accept-Language: pt-BR
Accept-Encoding: gzip, deflate
Content-Type: application/json
Accept: */*
== Content =====================================================================

				{"type":"Self","tenantname": "", "username": "admin", "password":"admin"}
				
================================================================================
Interceptor createPage: TopLevelWindow[name=""]
Content of web window [TopLevelWindow[name=""]] changed
== Response was 200 (OK) headers: ==============================================
================================================================================
== Content =====================================================================
{"result":{"type":"SYSTEM","code":"ERROR","message":"A companhia deve ser preenchida."}}
================================================================================
#
--Output from testLoginTenantNotFoundEnglish--
Switching to browser client [default]
Creating to new client [default] of type [class com.grailsrocks.functionaltest.client.BrowserClient]

== Making request POST http://localhost:8080/moovt/login/authenticateUser parameters: ==
== Request headers: ============================================================
Accept-Language: en-US
Accept-Encoding: gzip, deflate
Content-Type: application/json
Accept: */*
== Content =====================================================================

				{"type":"Self","tenantname": "BadTenant", "username": "admin", "password":"admin"}
				
================================================================================
Hibernate: select this_.id as id3_0_, this_.version as version3_0_, this_.created_by as created3_3_0_, this_.date_created as date4_3_0_, this_.last_updated as last5_3_0_, this_.last_updated_by as last6_3_0_, this_.name as name3_0_ from tenant this_ where this_.name=? limit ?
Interceptor createPage: TopLevelWindow[name=""]
Content of web window [TopLevelWindow[name=""]] changed
== Response was 200 (OK) headers: ==============================================
================================================================================
== Content =====================================================================
{"result":{"type":"SYSTEM","code":"ERROR","message":"This company (BadTenant) was not found. Please enter a valid company name."}}
================================================================================
#
--Output from testLoginTenantNotFoundPortuguese--
Switching to browser client [default]
Creating to new client [default] of type [class com.grailsrocks.functionaltest.client.BrowserClient]

== Making request POST http://localhost:8080/moovt/login/authenticateUser parameters: ==
== Request headers: ============================================================
Accept-Language: pt-BR
Accept-Encoding: gzip, deflate
Content-Type: application/json
Accept: */*
== Content =====================================================================

				{"type":"Self","tenantname": "BadTenant", "username": "admin", "password":"admin"}
				
================================================================================
Hibernate: select this_.id as id3_0_, this_.version as version3_0_, this_.created_by as created3_3_0_, this_.date_created as date4_3_0_, this_.last_updated as last5_3_0_, this_.last_updated_by as last6_3_0_, this_.name as name3_0_ from tenant this_ where this_.name=? limit ?
Interceptor createPage: TopLevelWindow[name=""]
Content of web window [TopLevelWindow[name=""]] changed
== Response was 200 (OK) headers: ==============================================
================================================================================
== Content =====================================================================
{"result":{"type":"SYSTEM","code":"ERROR","message":"Esta companhia (BadTenant) não foi encontrada."}}
================================================================================
#
--Output from testLoginNoPasswordEnglish--
Switching to browser client [default]
Creating to new client [default] of type [class com.grailsrocks.functionaltest.client.BrowserClient]

== Making request POST http://localhost:8080/moovt/login/authenticateUser parameters: ==
== Request headers: ============================================================
Accept-Language: en-US
Accept-Encoding: gzip, deflate
Content-Type: application/json
Accept: */*
== Content =====================================================================

				{"type":"Self","tenantname": "naSavassi", "username": "admin", "password":""}
				
================================================================================
Hibernate: select this_.id as id3_0_, this_.version as version3_0_, this_.created_by as created3_3_0_, this_.date_created as date4_3_0_, this_.last_updated as last5_3_0_, this_.last_updated_by as last6_3_0_, this_.name as name3_0_ from tenant this_ where this_.name=? limit ?
Interceptor createPage: TopLevelWindow[name=""]
Content of web window [TopLevelWindow[name=""]] changed
== Response was 200 (OK) headers: ==============================================
================================================================================
== Content =====================================================================
{"result":{"type":"SYSTEM","code":"ERROR","message":"Authentication failed because no password was provided. Please enter a password."}}
================================================================================
#
--Output from testLoginNoUsernamedEnglish--
Switching to browser client [default]
Creating to new client [default] of type [class com.grailsrocks.functionaltest.client.BrowserClient]

== Making request POST http://localhost:8080/moovt/login/authenticateUser parameters: ==
== Request headers: ============================================================
Accept-Language: en-US
Accept-Encoding: gzip, deflate
Content-Type: application/json
Accept: */*
== Content =====================================================================

				{"type":"Self","tenantname": "naSavassi", "username": "", "password":"admin"}
				
================================================================================
Hibernate: select this_.id as id3_0_, this_.version as version3_0_, this_.created_by as created3_3_0_, this_.date_created as date4_3_0_, this_.last_updated as last5_3_0_, this_.last_updated_by as last6_3_0_, this_.name as name3_0_ from tenant this_ where this_.name=? limit ?
Interceptor createPage: TopLevelWindow[name=""]
Content of web window [TopLevelWindow[name=""]] changed
== Response was 200 (OK) headers: ==============================================
================================================================================
== Content =====================================================================
{"result":{"type":"SYSTEM","code":"ERROR","message":"Authentication failed because no username was provided. Please enter a username."}}
================================================================================
#
--Output from testLoginFailedEnglish--
Switching to browser client [default]
Creating to new client [default] of type [class com.grailsrocks.functionaltest.client.BrowserClient]

== Making request POST http://localhost:8080/moovt/login/authenticateUser parameters: ==
== Request headers: ============================================================
Accept-Language: en-US
Accept-Encoding: gzip, deflate
Content-Type: application/json
Accept: */*
== Content =====================================================================

				{"type":"Self","tenantname": "naSavassi", "username": "admin", "password":"badPw"}
				
================================================================================
Hibernate: select this_.id as id3_0_, this_.version as version3_0_, this_.created_by as created3_3_0_, this_.date_created as date4_3_0_, this_.last_updated as last5_3_0_, this_.last_updated_by as last6_3_0_, this_.name as name3_0_ from tenant this_ where this_.name=? limit ?
Hibernate: select this_.id as id8_0_, this_.version as version8_0_, this_.account_expired as account3_8_0_, this_.account_locked as account4_8_0_, this_.apns_token as apns5_8_0_, this_.created_by as created6_8_0_, this_.date_created as date7_8_0_, this_.email as email8_0_, this_.enabled as enabled8_0_, this_.first_name as first10_8_0_, this_.last_name as last11_8_0_, this_.last_updated as last12_8_0_, this_.last_updated_by as last13_8_0_, this_.locale as locale8_0_, this_.`password` as password15_8_0_, this_.password_expired as password16_8_0_, this_.phone as phone8_0_, this_.tenant_id as tenant18_8_0_, this_.username as username8_0_ from user this_ where this_.tenant_id=? and this_.username=? limit ?
Hibernate: select driver0_.user_id as user1_2_0_, driver0_.version as version2_0_, driver0_.active_status as active3_2_0_, driver0_.car_type as car4_2_0_, driver0_.created_by as created5_2_0_, driver0_.date_created as date6_2_0_, driver0_.last_updated as last7_2_0_, driver0_.last_updated_by as last8_2_0_, driver0_.served_location_id as served9_2_0_, driver0_.tenant_id as tenant10_2_0_ from driver driver0_ where driver0_.user_id=?
Hibernate: select passenger0_.user_id as user1_1_0_, passenger0_.version as version1_0_, passenger0_.created_by as created3_1_0_, passenger0_.date_created as date4_1_0_, passenger0_.last_updated as last5_1_0_, passenger0_.last_updated_by as last6_1_0_, passenger0_.tenant_id as tenant7_1_0_ from passenger passenger0_ where passenger0_.user_id=?
Hibernate: select this_.role_id as role1_4_0_, this_.user_id as user2_4_0_, this_.created_by as created3_4_0_, this_.date_created as date4_4_0_, this_.last_updated as last5_4_0_, this_.last_updated_by as last6_4_0_, this_.tenant_id as tenant7_4_0_ from user_role this_ where this_.tenant_id=? and this_.user_id=?
Hibernate: select this_.role_id as role1_4_0_, this_.user_id as user2_4_0_, this_.created_by as created3_4_0_, this_.date_created as date4_4_0_, this_.last_updated as last5_4_0_, this_.last_updated_by as last6_4_0_, this_.tenant_id as tenant7_4_0_ from user_role this_ where this_.tenant_id=? and this_.user_id=?
Interceptor createPage: TopLevelWindow[name=""]
Content of web window [TopLevelWindow[name=""]] changed
== Response was 200 (OK) headers: ==============================================
================================================================================
== Content =====================================================================
{"result":{"type":"USER","code":"ERROR","message":"User name and or password is invalid. Please try again."}}
================================================================================
#
--Output from testLoginNoPasswordPortuguese--
Switching to browser client [default]
Creating to new client [default] of type [class com.grailsrocks.functionaltest.client.BrowserClient]

== Making request POST http://localhost:8080/moovt/login/authenticateUser parameters: ==
== Request headers: ============================================================
Accept-Language: pt-BR
Accept-Encoding: gzip, deflate
Content-Type: application/json
Accept: */*
== Content =====================================================================

				{"type":"Self","tenantname": "naSavassi", "username": "admin", "password":""}
				
================================================================================
Hibernate: select this_.id as id3_0_, this_.version as version3_0_, this_.created_by as created3_3_0_, this_.date_created as date4_3_0_, this_.last_updated as last5_3_0_, this_.last_updated_by as last6_3_0_, this_.name as name3_0_ from tenant this_ where this_.name=? limit ?
Interceptor createPage: TopLevelWindow[name=""]
Content of web window [TopLevelWindow[name=""]] changed
== Response was 200 (OK) headers: ==============================================
================================================================================
== Content =====================================================================
{"result":{"type":"SYSTEM","code":"ERROR","message":"A senha deve ser preenchida."}}
================================================================================
#
--Output from testLoginNoUsernamedPortuguese--
Switching to browser client [default]
Creating to new client [default] of type [class com.grailsrocks.functionaltest.client.BrowserClient]

== Making request POST http://localhost:8080/moovt/login/authenticateUser parameters: ==
== Request headers: ============================================================
Accept-Language: pt-BR
Accept-Encoding: gzip, deflate
Content-Type: application/json
Accept: */*
== Content =====================================================================

				{"type":"Self","tenantname": "naSavassi", "username": "", "password":"admin"}
				
================================================================================
Hibernate: select this_.id as id3_0_, this_.version as version3_0_, this_.created_by as created3_3_0_, this_.date_created as date4_3_0_, this_.last_updated as last5_3_0_, this_.last_updated_by as last6_3_0_, this_.name as name3_0_ from tenant this_ where this_.name=? limit ?
Interceptor createPage: TopLevelWindow[name=""]
Content of web window [TopLevelWindow[name=""]] changed
== Response was 200 (OK) headers: ==============================================
================================================================================
== Content =====================================================================
{"result":{"type":"SYSTEM","code":"ERROR","message":"O nome do usuário deve ser preenchido."}}
================================================================================
#
--Output from testLoginFailedPortuguese--
Switching to browser client [default]
Creating to new client [default] of type [class com.grailsrocks.functionaltest.client.BrowserClient]

== Making request POST http://localhost:8080/moovt/login/authenticateUser parameters: ==
== Request headers: ============================================================
Accept-Language: pt-BR
Accept-Encoding: gzip, deflate
Content-Type: application/json
Accept: */*
== Content =====================================================================

				{"type":"Self","tenantname": "naSavassi", "username": "admin", "password":"badPw"}
				
================================================================================
Hibernate: select this_.id as id3_0_, this_.version as version3_0_, this_.created_by as created3_3_0_, this_.date_created as date4_3_0_, this_.last_updated as last5_3_0_, this_.last_updated_by as last6_3_0_, this_.name as name3_0_ from tenant this_ where this_.name=? limit ?
Hibernate: select this_.id as id8_0_, this_.version as version8_0_, this_.account_expired as account3_8_0_, this_.account_locked as account4_8_0_, this_.apns_token as apns5_8_0_, this_.created_by as created6_8_0_, this_.date_created as date7_8_0_, this_.email as email8_0_, this_.enabled as enabled8_0_, this_.first_name as first10_8_0_, this_.last_name as last11_8_0_, this_.last_updated as last12_8_0_, this_.last_updated_by as last13_8_0_, this_.locale as locale8_0_, this_.`password` as password15_8_0_, this_.password_expired as password16_8_0_, this_.phone as phone8_0_, this_.tenant_id as tenant18_8_0_, this_.username as username8_0_ from user this_ where this_.tenant_id=? and this_.username=? limit ?
Hibernate: select driver0_.user_id as user1_2_0_, driver0_.version as version2_0_, driver0_.active_status as active3_2_0_, driver0_.car_type as car4_2_0_, driver0_.created_by as created5_2_0_, driver0_.date_created as date6_2_0_, driver0_.last_updated as last7_2_0_, driver0_.last_updated_by as last8_2_0_, driver0_.served_location_id as served9_2_0_, driver0_.tenant_id as tenant10_2_0_ from driver driver0_ where driver0_.user_id=?
Hibernate: select passenger0_.user_id as user1_1_0_, passenger0_.version as version1_0_, passenger0_.created_by as created3_1_0_, passenger0_.date_created as date4_1_0_, passenger0_.last_updated as last5_1_0_, passenger0_.last_updated_by as last6_1_0_, passenger0_.tenant_id as tenant7_1_0_ from passenger passenger0_ where passenger0_.user_id=?
Hibernate: select this_.role_id as role1_4_0_, this_.user_id as user2_4_0_, this_.created_by as created3_4_0_, this_.date_created as date4_4_0_, this_.last_updated as last5_4_0_, this_.last_updated_by as last6_4_0_, this_.tenant_id as tenant7_4_0_ from user_role this_ where this_.tenant_id=? and this_.user_id=?
Hibernate: select this_.role_id as role1_4_0_, this_.user_id as user2_4_0_, this_.created_by as created3_4_0_, this_.date_created as date4_4_0_, this_.last_updated as last5_4_0_, this_.last_updated_by as last6_4_0_, this_.tenant_id as tenant7_4_0_ from user_role this_ where this_.tenant_id=? and this_.user_id=?
Interceptor createPage: TopLevelWindow[name=""]
Content of web window [TopLevelWindow[name=""]] changed
== Response was 200 (OK) headers: ==============================================
================================================================================
== Content =====================================================================
{"result":{"type":"USER","code":"ERROR","message":"Usuário e senha inválidos."}}
================================================================================
#
--Output from testLoginWithApnsToken--
Switching to browser client [default]
Creating to new client [default] of type [class com.grailsrocks.functionaltest.client.BrowserClient]

== Making request POST http://localhost:8080/moovt/login/authenticateUser parameters: ==
== Request headers: ============================================================
Accept-Language: pt-BR
Accept-Encoding: gzip, deflate
Content-Type: application/json
Accept: */*
== Content =====================================================================

				{"type":"Self","tenantname":"WorldTaxi","username":"jWillGainApnsToken","password":"Welcome!1","apnsToken":"9a1cd75847e20f1a27132790dfe1a0cb4107f42da1a39c019dd1a0820fc5c504"}

				
================================================================================
Hibernate: select this_.id as id3_0_, this_.version as version3_0_, this_.created_by as created3_3_0_, this_.date_created as date4_3_0_, this_.last_updated as last5_3_0_, this_.last_updated_by as last6_3_0_, this_.name as name3_0_ from tenant this_ where this_.name=? limit ?
Hibernate: select this_.id as id8_0_, this_.version as version8_0_, this_.account_expired as account3_8_0_, this_.account_locked as account4_8_0_, this_.apns_token as apns5_8_0_, this_.created_by as created6_8_0_, this_.date_created as date7_8_0_, this_.email as email8_0_, this_.enabled as enabled8_0_, this_.first_name as first10_8_0_, this_.last_name as last11_8_0_, this_.last_updated as last12_8_0_, this_.last_updated_by as last13_8_0_, this_.locale as locale8_0_, this_.`password` as password15_8_0_, this_.password_expired as password16_8_0_, this_.phone as phone8_0_, this_.tenant_id as tenant18_8_0_, this_.username as username8_0_ from user this_ where this_.tenant_id=? and this_.username=? limit ?
Hibernate: select driver0_.user_id as user1_2_0_, driver0_.version as version2_0_, driver0_.active_status as active3_2_0_, driver0_.car_type as car4_2_0_, driver0_.created_by as created5_2_0_, driver0_.date_created as date6_2_0_, driver0_.last_updated as last7_2_0_, driver0_.last_updated_by as last8_2_0_, driver0_.served_location_id as served9_2_0_, driver0_.tenant_id as tenant10_2_0_ from driver driver0_ where driver0_.user_id=?
Hibernate: select passenger0_.user_id as user1_1_0_, passenger0_.version as version1_0_, passenger0_.created_by as created3_1_0_, passenger0_.date_created as date4_1_0_, passenger0_.last_updated as last5_1_0_, passenger0_.last_updated_by as last6_1_0_, passenger0_.tenant_id as tenant7_1_0_ from passenger passenger0_ where passenger0_.user_id=?
Hibernate: select this_.role_id as role1_4_0_, this_.user_id as user2_4_0_, this_.created_by as created3_4_0_, this_.date_created as date4_4_0_, this_.last_updated as last5_4_0_, this_.last_updated_by as last6_4_0_, this_.tenant_id as tenant7_4_0_ from user_role this_ where this_.tenant_id=? and this_.user_id=?
Hibernate: select this_.role_id as role1_4_0_, this_.user_id as user2_4_0_, this_.created_by as created3_4_0_, this_.date_created as date4_4_0_, this_.last_updated as last5_4_0_, this_.last_updated_by as last6_4_0_, this_.tenant_id as tenant7_4_0_ from user_role this_ where this_.tenant_id=? and this_.user_id=?
ROLE_NO_ROLES
Interceptor createPage: TopLevelWindow[name=""]
Content of web window [TopLevelWindow[name=""]] changed
== Response was 200 (OK) headers: ==============================================
================================================================================
== Content =====================================================================
{"result":{"type":"USER","code":"SUCCESS","message":"Login bem sucedido."}, "additionalInfo":{"JSESSIONID":"6D3D1E80897D27C08F75423679A7BB5F","userType":"NO_TYPE"}}
================================================================================
#
--Output from testLoginKeepApnsToken--
Switching to browser client [default]
Creating to new client [default] of type [class com.grailsrocks.functionaltest.client.BrowserClient]

== Making request POST http://localhost:8080/moovt/login/authenticateUser parameters: ==
== Request headers: ============================================================
Accept-Language: pt-BR
Accept-Encoding: gzip, deflate
Content-Type: application/json
Accept: */*
== Content =====================================================================

				{"type":"Self","tenantname":"WorldTaxi","username":"jKeepApnsToken","password":"Welcome!1","apnsToken":"9a1cd75847e20f1a27132790dfe1a0cb4107f42da1a39c019dd1a0820fc5c504"}

				
================================================================================
Hibernate: select this_.id as id3_0_, this_.version as version3_0_, this_.created_by as created3_3_0_, this_.date_created as date4_3_0_, this_.last_updated as last5_3_0_, this_.last_updated_by as last6_3_0_, this_.name as name3_0_ from tenant this_ where this_.name=? limit ?
Hibernate: select this_.id as id8_0_, this_.version as version8_0_, this_.account_expired as account3_8_0_, this_.account_locked as account4_8_0_, this_.apns_token as apns5_8_0_, this_.created_by as created6_8_0_, this_.date_created as date7_8_0_, this_.email as email8_0_, this_.enabled as enabled8_0_, this_.first_name as first10_8_0_, this_.last_name as last11_8_0_, this_.last_updated as last12_8_0_, this_.last_updated_by as last13_8_0_, this_.locale as locale8_0_, this_.`password` as password15_8_0_, this_.password_expired as password16_8_0_, this_.phone as phone8_0_, this_.tenant_id as tenant18_8_0_, this_.username as username8_0_ from user this_ where this_.tenant_id=? and this_.username=? limit ?
Hibernate: select driver0_.user_id as user1_2_0_, driver0_.version as version2_0_, driver0_.active_status as active3_2_0_, driver0_.car_type as car4_2_0_, driver0_.created_by as created5_2_0_, driver0_.date_created as date6_2_0_, driver0_.last_updated as last7_2_0_, driver0_.last_updated_by as last8_2_0_, driver0_.served_location_id as served9_2_0_, driver0_.tenant_id as tenant10_2_0_ from driver driver0_ where driver0_.user_id=?
Hibernate: select passenger0_.user_id as user1_1_0_, passenger0_.version as version1_0_, passenger0_.created_by as created3_1_0_, passenger0_.date_created as date4_1_0_, passenger0_.last_updated as last5_1_0_, passenger0_.last_updated_by as last6_1_0_, passenger0_.tenant_id as tenant7_1_0_ from passenger passenger0_ where passenger0_.user_id=?
Hibernate: select this_.role_id as role1_4_0_, this_.user_id as user2_4_0_, this_.created_by as created3_4_0_, this_.date_created as date4_4_0_, this_.last_updated as last5_4_0_, this_.last_updated_by as last6_4_0_, this_.tenant_id as tenant7_4_0_ from user_role this_ where this_.tenant_id=? and this_.user_id=?
Hibernate: select this_.role_id as role1_4_0_, this_.user_id as user2_4_0_, this_.created_by as created3_4_0_, this_.date_created as date4_4_0_, this_.last_updated as last5_4_0_, this_.last_updated_by as last6_4_0_, this_.tenant_id as tenant7_4_0_ from user_role this_ where this_.tenant_id=? and this_.user_id=?
ROLE_NO_ROLES
Interceptor createPage: TopLevelWindow[name=""]
Content of web window [TopLevelWindow[name=""]] changed
== Response was 200 (OK) headers: ==============================================
================================================================================
== Content =====================================================================
{"result":{"type":"USER","code":"SUCCESS","message":"Login bem sucedido."}, "additionalInfo":{"JSESSIONID":"DBE2F61C8BF96B47136901F212417FFF","userType":"NO_TYPE"}}
================================================================================
#
]]></system-out>

      <system-err><![CDATA[--Output from testLoginBadMessage--
--Output from testLoginSuccessEnglish--
--Output from testLoginSuccessPortuguese--
--Output from testLoginNoTenantEnglish--
--Output from testLoginNoTenantPortuguese--
--Output from testLoginTenantNotFoundEnglish--
--Output from testLoginTenantNotFoundPortuguese--
--Output from testLoginNoPasswordEnglish--
--Output from testLoginNoUsernamedEnglish--
--Output from testLoginFailedEnglish--
--Output from testLoginNoPasswordPortuguese--
--Output from testLoginNoUsernamedPortuguese--
--Output from testLoginFailedPortuguese--
--Output from testLoginWithApnsToken--
--Output from testLoginKeepApnsToken--
]]></system-err>

  </testsuite>
  <testsuite errors="0" failures="0" hostname="Eduardo-Goncalvess-MacBook-Pro.local" id="3" name="RideFunctionalTests" package="com.moovt" tests="17" time="7.003" timestamp="2013-08-01T04:17:20">
      <properties />

      <testcase classname="com.moovt.RideFunctionalTests" name="testRetrievePassengerRidesEnglish" time="0.551" />

      <testcase classname="com.moovt.RideFunctionalTests" name="testRetrieveUnassignedRideInServedAreaEnglish" time="0.521" />

      <testcase classname="com.moovt.RideFunctionalTests" name="testAssignRideToDriverEnglish" time="0.871" />

      <testcase classname="com.moovt.RideFunctionalTests" name="testRetrieveAllRidesEnglish" time="0.399" />

      <testcase classname="com.moovt.RideFunctionalTests" name="testRetrieveAssignedRidesEnglish" time="0.625" />

      <testcase classname="com.moovt.RideFunctionalTests" name="testCreateRideENglish" time="0.465" />

      <testcase classname="com.moovt.RideFunctionalTests" name="testCloneRide" time="0.241" />

      <testcase classname="com.moovt.RideFunctionalTests" name="testCloneRideBadMessage" time="0.432" />

      <testcase classname="com.moovt.RideFunctionalTests" name="testCloseRideSuccessEnglish" time="0.54" />

      <testcase classname="com.moovt.RideFunctionalTests" name="testCloseRideSuccessPortuguese" time="0.17" />

      <testcase classname="com.moovt.RideFunctionalTests" name="testCloseRideBadMessage" time="0.137" />

      <testcase classname="com.moovt.RideFunctionalTests" name="testCloseRideAlreadyClosed" time="0.191" />

      <testcase classname="com.moovt.RideFunctionalTests" name="testCloseRideUnsassignedError" time="0.335" />

      <testcase classname="com.moovt.RideFunctionalTests" name="testCancelRideSuccessEnglish" time="0.368" />

      <testcase classname="com.moovt.RideFunctionalTests" name="testCancelRideSuccessPortuguese" time="0.281" />

      <testcase classname="com.moovt.RideFunctionalTests" name="testCancelRideNotFoundEnglish" time="0.718" />

      <testcase classname="com.moovt.RideFunctionalTests" name="testCancelRideNotFoundPortuguese" time="0.13" />

      <system-out><![CDATA[--Output from testRetrievePassengerRidesEnglish--
Switching to browser client [default]
Creating to new client [default] of type [class com.grailsrocks.functionaltest.client.BrowserClient]

== Making request POST http://localhost:8080/moovt/login/authenticateUser parameters: ==
== Request headers: ============================================================
Accept-Encoding: gzip, deflate
Content-Type: application/json
Accept: */*
== Content =====================================================================

				{"type":"Self","tenantname":"WorldTaxi","username":"jgoodrider","password":"Welcome!1"}
				
================================================================================
Hibernate: select this_.id as id3_0_, this_.version as version3_0_, this_.created_by as created3_3_0_, this_.date_created as date4_3_0_, this_.last_updated as last5_3_0_, this_.last_updated_by as last6_3_0_, this_.name as name3_0_ from tenant this_ where this_.name=? limit ?
Hibernate: select this_.id as id8_0_, this_.version as version8_0_, this_.account_expired as account3_8_0_, this_.account_locked as account4_8_0_, this_.apns_token as apns5_8_0_, this_.created_by as created6_8_0_, this_.date_created as date7_8_0_, this_.email as email8_0_, this_.enabled as enabled8_0_, this_.first_name as first10_8_0_, this_.last_name as last11_8_0_, this_.last_updated as last12_8_0_, this_.last_updated_by as last13_8_0_, this_.locale as locale8_0_, this_.`password` as password15_8_0_, this_.password_expired as password16_8_0_, this_.phone as phone8_0_, this_.tenant_id as tenant18_8_0_, this_.username as username8_0_ from user this_ where this_.tenant_id=? and this_.username=? limit ?
Hibernate: select driver0_.user_id as user1_2_0_, driver0_.version as version2_0_, driver0_.active_status as active3_2_0_, driver0_.car_type as car4_2_0_, driver0_.created_by as created5_2_0_, driver0_.date_created as date6_2_0_, driver0_.last_updated as last7_2_0_, driver0_.last_updated_by as last8_2_0_, driver0_.served_location_id as served9_2_0_, driver0_.tenant_id as tenant10_2_0_ from driver driver0_ where driver0_.user_id=?
Hibernate: select passenger0_.user_id as user1_1_0_, passenger0_.version as version1_0_, passenger0_.created_by as created3_1_0_, passenger0_.date_created as date4_1_0_, passenger0_.last_updated as last5_1_0_, passenger0_.last_updated_by as last6_1_0_, passenger0_.tenant_id as tenant7_1_0_ from passenger passenger0_ where passenger0_.user_id=?
Hibernate: select this_.role_id as role1_4_0_, this_.user_id as user2_4_0_, this_.created_by as created3_4_0_, this_.date_created as date4_4_0_, this_.last_updated as last5_4_0_, this_.last_updated_by as last6_4_0_, this_.tenant_id as tenant7_4_0_ from user_role this_ where this_.tenant_id=? and this_.user_id=?
Hibernate: select this_.role_id as role1_4_0_, this_.user_id as user2_4_0_, this_.created_by as created3_4_0_, this_.date_created as date4_4_0_, this_.last_updated as last5_4_0_, this_.last_updated_by as last6_4_0_, this_.tenant_id as tenant7_4_0_ from user_role this_ where this_.tenant_id=? and this_.user_id=?
ROLE_DRIVER
ROLE_PASSENGER
ROLE_RIDE_MGR
Interceptor createPage: TopLevelWindow[name=""]
Content of web window [TopLevelWindow[name=""]] changed
== Response was 200 (OK) headers: ==============================================
================================================================================
== Content =====================================================================
{"result":{"type":"USER","code":"SUCCESS","message":"Login successful."}, "additionalInfo":{"JSESSIONID":"D9E43AD861D5703FEB383A383E3AF16E","userType":"PASSENGER"}}
================================================================================
#
== Making request POST http://localhost:8080/moovt/ride/retrievePassengerRides parameters: ==
== Request headers: ============================================================
Accept-Encoding: gzip, deflate
Content-Type: application/json
Accept: */*
== Content =====================================================================

				{}
				
================================================================================
Hibernate: select passenger0_.user_id as user1_1_0_, passenger0_.version as version1_0_, passenger0_.created_by as created3_1_0_, passenger0_.date_created as date4_1_0_, passenger0_.last_updated as last5_1_0_, passenger0_.last_updated_by as last6_1_0_, passenger0_.tenant_id as tenant7_1_0_ from passenger passenger0_ where passenger0_.user_id=?
Hibernate: select this_.id as id5_0_, this_.version as version5_0_, this_.car_type as car3_5_0_, this_.comments as comments5_0_, this_.created_by as created5_5_0_, this_.date_created as date6_5_0_, this_.driver_id as driver7_5_0_, this_.drop_off_location_id as drop8_5_0_, this_.last_updated as last9_5_0_, this_.last_updated_by as last10_5_0_, this_.message_to_the_driver as message11_5_0_, this_.passenger_id as passenger12_5_0_, this_.pick_up_location_id as pick13_5_0_, this_.pick_up_location_complement as pick14_5_0_, this_.pickup_date_time as pickup15_5_0_, this_.rating as rating5_0_, this_.ride_status as ride17_5_0_, this_.tenant_id as tenant18_5_0_ from ride this_ where (this_.passenger_id=?) order by this_.last_updated asc
Hibernate: select user0_.id as id8_0_, user0_.version as version8_0_, user0_.account_expired as account3_8_0_, user0_.account_locked as account4_8_0_, user0_.apns_token as apns5_8_0_, user0_.created_by as created6_8_0_, user0_.date_created as date7_8_0_, user0_.email as email8_0_, user0_.enabled as enabled8_0_, user0_.first_name as first10_8_0_, user0_.last_name as last11_8_0_, user0_.last_updated as last12_8_0_, user0_.last_updated_by as last13_8_0_, user0_.locale as locale8_0_, user0_.`password` as password15_8_0_, user0_.password_expired as password16_8_0_, user0_.phone as phone8_0_, user0_.tenant_id as tenant18_8_0_, user0_.username as username8_0_ from user user0_ where user0_.id=?
Hibernate: select driver0_.user_id as user1_2_0_, driver0_.version as version2_0_, driver0_.active_status as active3_2_0_, driver0_.car_type as car4_2_0_, driver0_.created_by as created5_2_0_, driver0_.date_created as date6_2_0_, driver0_.last_updated as last7_2_0_, driver0_.last_updated_by as last8_2_0_, driver0_.served_location_id as served9_2_0_, driver0_.tenant_id as tenant10_2_0_ from driver driver0_ where driver0_.user_id=?
Hibernate: select passenger0_.user_id as user1_1_0_, passenger0_.version as version1_0_, passenger0_.created_by as created3_1_0_, passenger0_.date_created as date4_1_0_, passenger0_.last_updated as last5_1_0_, passenger0_.last_updated_by as last6_1_0_, passenger0_.tenant_id as tenant7_1_0_ from passenger passenger0_ where passenger0_.user_id=?
Hibernate: select location0_.id as id0_0_, location0_.version as version0_0_, location0_.created_by as created3_0_0_, location0_.date_created as date4_0_0_, location0_.last_updated as last5_0_0_, location0_.last_updated_by as last6_0_0_, location0_.latitude as latitude0_0_, location0_.location_name as location8_0_0_, location0_.location_type as location9_0_0_, location0_.longitude as longitude0_0_, location0_.political_name as political11_0_0_, location0_.tenant_id as tenant12_0_0_ from location location0_ where location0_.id=?
Hibernate: select location0_.id as id0_0_, location0_.version as version0_0_, location0_.created_by as created3_0_0_, location0_.date_created as date4_0_0_, location0_.last_updated as last5_0_0_, location0_.last_updated_by as last6_0_0_, location0_.latitude as latitude0_0_, location0_.location_name as location8_0_0_, location0_.location_type as location9_0_0_, location0_.longitude as longitude0_0_, location0_.political_name as political11_0_0_, location0_.tenant_id as tenant12_0_0_ from location location0_ where location0_.id=?
Hibernate: select location0_.id as id0_0_, location0_.version as version0_0_, location0_.created_by as created3_0_0_, location0_.date_created as date4_0_0_, location0_.last_updated as last5_0_0_, location0_.last_updated_by as last6_0_0_, location0_.latitude as latitude0_0_, location0_.location_name as location8_0_0_, location0_.location_type as location9_0_0_, location0_.longitude as longitude0_0_, location0_.political_name as political11_0_0_, location0_.tenant_id as tenant12_0_0_ from location location0_ where location0_.id=?
Hibernate: select driver0_.user_id as user1_2_0_, driver0_.version as version2_0_, driver0_.active_status as active3_2_0_, driver0_.car_type as car4_2_0_, driver0_.created_by as created5_2_0_, driver0_.date_created as date6_2_0_, driver0_.last_updated as last7_2_0_, driver0_.last_updated_by as last8_2_0_, driver0_.served_location_id as served9_2_0_, driver0_.tenant_id as tenant10_2_0_ from driver driver0_ where driver0_.user_id=?
Hibernate: select user0_.id as id8_0_, user0_.version as version8_0_, user0_.account_expired as account3_8_0_, user0_.account_locked as account4_8_0_, user0_.apns_token as apns5_8_0_, user0_.created_by as created6_8_0_, user0_.date_created as date7_8_0_, user0_.email as email8_0_, user0_.enabled as enabled8_0_, user0_.first_name as first10_8_0_, user0_.last_name as last11_8_0_, user0_.last_updated as last12_8_0_, user0_.last_updated_by as last13_8_0_, user0_.locale as locale8_0_, user0_.`password` as password15_8_0_, user0_.password_expired as password16_8_0_, user0_.phone as phone8_0_, user0_.tenant_id as tenant18_8_0_, user0_.username as username8_0_ from user user0_ where user0_.id=?
Hibernate: select driver0_.user_id as user1_2_0_, driver0_.version as version2_0_, driver0_.active_status as active3_2_0_, driver0_.car_type as car4_2_0_, driver0_.created_by as created5_2_0_, driver0_.date_created as date6_2_0_, driver0_.last_updated as last7_2_0_, driver0_.last_updated_by as last8_2_0_, driver0_.served_location_id as served9_2_0_, driver0_.tenant_id as tenant10_2_0_ from driver driver0_ where driver0_.user_id=?
Hibernate: select passenger0_.user_id as user1_1_0_, passenger0_.version as version1_0_, passenger0_.created_by as created3_1_0_, passenger0_.date_created as date4_1_0_, passenger0_.last_updated as last5_1_0_, passenger0_.last_updated_by as last6_1_0_, passenger0_.tenant_id as tenant7_1_0_ from passenger passenger0_ where passenger0_.user_id=?
Hibernate: select location0_.id as id0_0_, location0_.version as version0_0_, location0_.created_by as created3_0_0_, location0_.date_created as date4_0_0_, location0_.last_updated as last5_0_0_, location0_.last_updated_by as last6_0_0_, location0_.latitude as latitude0_0_, location0_.location_name as location8_0_0_, location0_.location_type as location9_0_0_, location0_.longitude as longitude0_0_, location0_.political_name as political11_0_0_, location0_.tenant_id as tenant12_0_0_ from location location0_ where location0_.id=?
Hibernate: select location0_.id as id0_0_, location0_.version as version0_0_, location0_.created_by as created3_0_0_, location0_.date_created as date4_0_0_, location0_.last_updated as last5_0_0_, location0_.last_updated_by as last6_0_0_, location0_.latitude as latitude0_0_, location0_.location_name as location8_0_0_, location0_.location_type as location9_0_0_, location0_.longitude as longitude0_0_, location0_.political_name as political11_0_0_, location0_.tenant_id as tenant12_0_0_ from location location0_ where location0_.id=?
Hibernate: select location0_.id as id0_0_, location0_.version as version0_0_, location0_.created_by as created3_0_0_, location0_.date_created as date4_0_0_, location0_.last_updated as last5_0_0_, location0_.last_updated_by as last6_0_0_, location0_.latitude as latitude0_0_, location0_.location_name as location8_0_0_, location0_.location_type as location9_0_0_, location0_.longitude as longitude0_0_, location0_.political_name as political11_0_0_, location0_.tenant_id as tenant12_0_0_ from location location0_ where location0_.id=?
Hibernate: select location0_.id as id0_0_, location0_.version as version0_0_, location0_.created_by as created3_0_0_, location0_.date_created as date4_0_0_, location0_.last_updated as last5_0_0_, location0_.last_updated_by as last6_0_0_, location0_.latitude as latitude0_0_, location0_.location_name as location8_0_0_, location0_.location_type as location9_0_0_, location0_.longitude as longitude0_0_, location0_.political_name as political11_0_0_, location0_.tenant_id as tenant12_0_0_ from location location0_ where location0_.id=?
Hibernate: select location0_.id as id0_0_, location0_.version as version0_0_, location0_.created_by as created3_0_0_, location0_.date_created as date4_0_0_, location0_.last_updated as last5_0_0_, location0_.last_updated_by as last6_0_0_, location0_.latitude as latitude0_0_, location0_.location_name as location8_0_0_, location0_.location_type as location9_0_0_, location0_.longitude as longitude0_0_, location0_.political_name as political11_0_0_, location0_.tenant_id as tenant12_0_0_ from location location0_ where location0_.id=?
Hibernate: select location0_.id as id0_0_, location0_.version as version0_0_, location0_.created_by as created3_0_0_, location0_.date_created as date4_0_0_, location0_.last_updated as last5_0_0_, location0_.last_updated_by as last6_0_0_, location0_.latitude as latitude0_0_, location0_.location_name as location8_0_0_, location0_.location_type as location9_0_0_, location0_.longitude as longitude0_0_, location0_.political_name as political11_0_0_, location0_.tenant_id as tenant12_0_0_ from location location0_ where location0_.id=?
Hibernate: select location0_.id as id0_0_, location0_.version as version0_0_, location0_.created_by as created3_0_0_, location0_.date_created as date4_0_0_, location0_.last_updated as last5_0_0_, location0_.last_updated_by as last6_0_0_, location0_.latitude as latitude0_0_, location0_.location_name as location8_0_0_, location0_.location_type as location9_0_0_, location0_.longitude as longitude0_0_, location0_.political_name as political11_0_0_, location0_.tenant_id as tenant12_0_0_ from location location0_ where location0_.id=?
Hibernate: select location0_.id as id0_0_, location0_.version as version0_0_, location0_.created_by as created3_0_0_, location0_.date_created as date4_0_0_, location0_.last_updated as last5_0_0_, location0_.last_updated_by as last6_0_0_, location0_.latitude as latitude0_0_, location0_.location_name as location8_0_0_, location0_.location_type as location9_0_0_, location0_.longitude as longitude0_0_, location0_.political_name as political11_0_0_, location0_.tenant_id as tenant12_0_0_ from location location0_ where location0_.id=?
Hibernate: select location0_.id as id0_0_, location0_.version as version0_0_, location0_.created_by as created3_0_0_, location0_.date_created as date4_0_0_, location0_.last_updated as last5_0_0_, location0_.last_updated_by as last6_0_0_, location0_.latitude as latitude0_0_, location0_.location_name as location8_0_0_, location0_.location_type as location9_0_0_, location0_.longitude as longitude0_0_, location0_.political_name as political11_0_0_, location0_.tenant_id as tenant12_0_0_ from location location0_ where location0_.id=?
Hibernate: select location0_.id as id0_0_, location0_.version as version0_0_, location0_.created_by as created3_0_0_, location0_.date_created as date4_0_0_, location0_.last_updated as last5_0_0_, location0_.last_updated_by as last6_0_0_, location0_.latitude as latitude0_0_, location0_.location_name as location8_0_0_, location0_.location_type as location9_0_0_, location0_.longitude as longitude0_0_, location0_.political_name as political11_0_0_, location0_.tenant_id as tenant12_0_0_ from location location0_ where location0_.id=?
Interceptor createPage: TopLevelWindow[name=""]
Content of web window [TopLevelWindow[name=""]] changed
== Response was 200 (OK) headers: ==============================================
================================================================================
== Content =====================================================================
{"rides":[{"id":1,"version":0,"rideStatus":{"code":"UNASSIGNED","description":"Unassigned"},"carType":{"code":"A_SEDAN","description":"Sedan"},"driver":null,"passenger":{"id":5,"version":1,"username":"jgoodrider","firstName":"John","lastName":"DecidedToBeADriver","phone":"773-329-1784","email":"jgoodrider@worldtaxi.com","driver":{"servedLocation":{"locationName":"Rua Major Lopes, 55","politicalName":"Belo Horizonte, MG, BR","latitude":-19.9413628,"longitude":-43.9373064,"locationType":"RANGE_INTERPOLATED"},"carType":{"code":"B_VAN","description":"Van"},"activeStatus":{"code":"ENABLED","description":"Enabled"}},"passenger":{}},"pickUpDateTime":"2013-03-13 20:10","pickUpLocation":{"locationName":"Naperville","politicalName":"Illinois, United States","latitude":41.7858629,"longitude":-88.1472893,"locationType":"APPROXIMATE"},"dropOffLocation":{"locationName":"Naperville","politicalName":"Illinois, United States","latitude":41.7858629,"longitude":-88.1472893,"locationType":"APPROXIMATE"},"rating":null,"comments":null,"pickUpLocationComplement":"Close to Vest Ride 1","messageToTheDriver":"Please come fast ride 1"},{"id":2,"version":0,"rideStatus":{"code":"ASSIGNED","description":"Assigned"},"carType":{"code":"A_SEDAN","description":"Sedan"},"driver":{"id":6,"version":0,"username":"jgoodarm","firstName":"John","lastName":"Goodarm","phone":"800-800-2020","email":"jgoodarm@worldtaxi.com","driver":{"servedLocation":{"locationName":"Naperville","politicalName":"Illinois, United States","latitude":41.7858629,"longitude":-88.1472893,"locationType":"APPROXIMATE"},"carType":{"code":"B_VAN","description":"Van"},"activeStatus":{"code":"ENABLED","description":"Enabled"}}},"passenger":{"id":5,"version":1,"username":"jgoodrider","firstName":"John","lastName":"DecidedToBeADriver","phone":"773-329-1784","email":"jgoodrider@worldtaxi.com","driver":{"servedLocation":{"locationName":"Rua Major Lopes, 55","politicalName":"Belo Horizonte, MG, BR","latitude":-19.9413628,"longitude":-43.9373064,"locationType":"RANGE_INTERPOLATED"},"carType":{"code":"B_VAN","description":"Van"},"activeStatus":{"code":"ENABLED","description":"Enabled"}},"passenger":{}},"pickUpDateTime":"2013-03-13 20:10","pickUpLocation":{"locationName":"Functional Test Major Lopes, 55","politicalName":"Belo Horizonte, MG, BR","latitude":-19.9413628,"longitude":-43.9373064,"locationType":"RANGE_INTERPOLATED"},"dropOffLocation":{"locationName":"Naperville","politicalName":"Illinois, United States","latitude":41.7858629,"longitude":-88.1472893,"locationType":"APPROXIMATE"},"rating":null,"comments":null,"pickUpLocationComplement":"Close to Vest Ride 2","messageToTheDriver":"Please come fast ride 2"},{"id":3,"version":0,"rideStatus":{"code":"UNASSIGNED","description":"Unassigned"},"carType":{"code":"A_SEDAN","description":"Sedan"},"driver":null,"passenger":{"id":5,"version":1,"username":"jgoodrider","firstName":"John","lastName":"DecidedToBeADriver","phone":"773-329-1784","email":"jgoodrider@worldtaxi.com","driver":{"servedLocation":{"locationName":"Rua Major Lopes, 55","politicalName":"Belo Horizonte, MG, BR","latitude":-19.9413628,"longitude":-43.9373064,"locationType":"RANGE_INTERPOLATED"},"carType":{"code":"B_VAN","description":"Van"},"activeStatus":{"code":"ENABLED","description":"Enabled"}},"passenger":{}},"pickUpDateTime":"2013-03-13 20:10","pickUpLocation":{"locationName":"Contagem","politicalName":"Minas Gerais, Brazil","latitude":-19.9385599,"longitude":-44.0529377,"locationType":"APPROXIMATE"},"dropOffLocation":{"locationName":"Naperville","politicalName":"Illinois, United States","latitude":41.7858629,"longitude":-88.1472893,"locationType":"APPROXIMATE"},"rating":null,"comments":null,"pickUpLocationComplement":null,"messageToTheDriver":null},{"id":4,"version":0,"rideStatus":{"code":"ASSIGNED","description":"Assigned"},"carType":{"code":"A_SEDAN","description":"Sedan"},"driver":{"id":6,"version":0,"username":"jgoodarm","firstName":"John","lastName":"Goodarm","phone":"800-800-2020","email":"jgoodarm@worldtaxi.com","driver":{"servedLocation":{"locationName":"Naperville","politicalName":"Illinois, United States","latitude":41.7858629,"longitude":-88.1472893,"locationType":"APPROXIMATE"},"carType":{"code":"B_VAN","description":"Van"},"activeStatus":{"code":"ENABLED","description":"Enabled"}}},"passenger":{"id":5,"version":1,"username":"jgoodrider","firstName":"John","lastName":"DecidedToBeADriver","phone":"773-329-1784","email":"jgoodrider@worldtaxi.com","driver":{"servedLocation":{"locationName":"Rua Major Lopes, 55","politicalName":"Belo Horizonte, MG, BR","latitude":-19.9413628,"longitude":-43.9373064,"locationType":"RANGE_INTERPOLATED"},"carType":{"code":"B_VAN","description":"Van"},"activeStatus":{"code":"ENABLED","description":"Enabled"}},"passenger":{}},"pickUpDateTime":"2013-03-13 20:10","pickUpLocation":{"locationName":"Contagem","politicalName":"Minas Gerais, Brazil","latitude":-19.9385599,"longitude":-44.0529377,"locationType":"APPROXIMATE"},"dropOffLocation":{"locationName":"Naperville","politicalName":"Illinois, United States","latitude":41.7858629,"longitude":-88.1472893,"locationType":"APPROXIMATE"},"rating":null,"comments":null,"pickUpLocationComplement":null,"messageToTheDriver":null},{"id":5,"version":0,"rideStatus":{"code":"COMPLETED","description":"Completed"},"carType":{"code":"A_SEDAN","description":"Sedan"},"driver":null,"passenger":{"id":5,"version":1,"username":"jgoodrider","firstName":"John","lastName":"DecidedToBeADriver","phone":"773-329-1784","email":"jgoodrider@worldtaxi.com","driver":{"servedLocation":{"locationName":"Rua Major Lopes, 55","politicalName":"Belo Horizonte, MG, BR","latitude":-19.9413628,"longitude":-43.9373064,"locationType":"RANGE_INTERPOLATED"},"carType":{"code":"B_VAN","description":"Van"},"activeStatus":{"code":"ENABLED","description":"Enabled"}},"passenger":{}},"pickUpDateTime":"2013-03-13 20:10","pickUpLocation":{"locationName":"Contagem","politicalName":"Minas Gerais, Brazil","latitude":-19.9385599,"longitude":-44.0529377,"locationType":"APPROXIMATE"},"dropOffLocation":{"locationName":"Naperville","politicalName":"Illinois, United States","latitude":41.7858629,"longitude":-88.1472893,"locationType":"APPROXIMATE"},"rating":3.5,"comments":"Great Driver","pickUpLocationComplement":"Close to Vest Ride 5","messageToTheDriver":"Please come fast Ride 5"},{"id":6,"version":0,"rideStatus":{"code":"UNASSIGNED","description":"Unassigned"},"carType":{"code":"A_SEDAN","description":"Sedan"},"driver":null,"passenger":{"id":5,"version":1,"username":"jgoodrider","firstName":"John","lastName":"DecidedToBeADriver","phone":"773-329-1784","email":"jgoodrider@worldtaxi.com","driver":{"servedLocation":{"locationName":"Rua Major Lopes, 55","politicalName":"Belo Horizonte, MG, BR","latitude":-19.9413628,"longitude":-43.9373064,"locationType":"RANGE_INTERPOLATED"},"carType":{"code":"B_VAN","description":"Van"},"activeStatus":{"code":"ENABLED","description":"Enabled"}},"passenger":{}},"pickUpDateTime":"2013-03-13 20:10","pickUpLocation":{"locationName":"Contagem","politicalName":"Minas Gerais, Brazil","latitude":-19.9385599,"longitude":-44.0529377,"locationType":"APPROXIMATE"},"dropOffLocation":{"locationName":"Naperville","politicalName":"Illinois, United States","latitude":41.7858629,"longitude":-88.1472893,"locationType":"APPROXIMATE"},"rating":null,"comments":null,"pickUpLocationComplement":null,"messageToTheDriver":null},{"id":7,"version":0,"rideStatus":{"code":"UNASSIGNED","description":"Unassigned"},"carType":{"code":"A_SEDAN","description":"Sedan"},"driver":null,"passenger":{"id":5,"version":1,"username":"jgoodrider","firstName":"John","lastName":"DecidedToBeADriver","phone":"773-329-1784","email":"jgoodrider@worldtaxi.com","driver":{"servedLocation":{"locationName":"Rua Major Lopes, 55","politicalName":"Belo Horizonte, MG, BR","latitude":-19.9413628,"longitude":-43.9373064,"locationType":"RANGE_INTERPOLATED"},"carType":{"code":"B_VAN","description":"Van"},"activeStatus":{"code":"ENABLED","description":"Enabled"}},"passenger":{}},"pickUpDateTime":"2013-03-13 20:10","pickUpLocation":{"locationName":"Contagem","politicalName":"Minas Gerais, Brazil","latitude":-19.9385599,"longitude":-44.0529377,"locationType":"APPROXIMATE"},"dropOffLocation":{"locationName":"Naperville","politicalName":"Illinois, United States","latitude":41.7858629,"longitude":-88.1472893,"locationType":"APPROXIMATE"},"rating":null,"comments":null,"pickUpLocationComplement":null,"messageToTheDriver":null},{"id":8,"version":0,"rideStatus":{"code":"UNASSIGNED","description":"Unassigned"},"carType":{"code":"A_SEDAN","description":"Sedan"},"driver":null,"passenger":{"id":5,"version":1,"username":"jgoodrider","firstName":"John","lastName":"DecidedToBeADriver","phone":"773-329-1784","email":"jgoodrider@worldtaxi.com","driver":{"servedLocation":{"locationName":"Rua Major Lopes, 55","politicalName":"Belo Horizonte, MG, BR","latitude":-19.9413628,"longitude":-43.9373064,"locationType":"RANGE_INTERPOLATED"},"carType":{"code":"B_VAN","description":"Van"},"activeStatus":{"code":"ENABLED","description":"Enabled"}},"passenger":{}},"pickUpDateTime":"2013-03-13 20:10","pickUpLocation":{"locationName":"Contagem","politicalName":"Minas Gerais, Brazil","latitude":-19.9385599,"longitude":-44.0529377,"locationType":"APPROXIMATE"},"dropOffLocation":{"locationName":"Naperville","politicalName":"Illinois, United States","latitude":41.7858629,"longitude":-88.1472893,"locationType":"APPROXIMATE"},"rating":null,"comments":null,"pickUpLocationComplement":null,"messageToTheDriver":null}]}
================================================================================
#
--Output from testRetrieveUnassignedRideInServedAreaEnglish--
Switching to browser client [default]
Creating to new client [default] of type [class com.grailsrocks.functionaltest.client.BrowserClient]

== Making request POST http://localhost:8080/moovt/login/authenticateUser parameters: ==
== Request headers: ============================================================
Accept-Encoding: gzip, deflate
Content-Type: application/json
Accept: */*
== Content =====================================================================

				{"type":"Self","tenantname":"WorldTaxi","username":"jspeedy","password":"Welcome!1"}
				
================================================================================
Hibernate: select this_.id as id3_0_, this_.version as version3_0_, this_.created_by as created3_3_0_, this_.date_created as date4_3_0_, this_.last_updated as last5_3_0_, this_.last_updated_by as last6_3_0_, this_.name as name3_0_ from tenant this_ where this_.name=? limit ?
Hibernate: select this_.id as id8_0_, this_.version as version8_0_, this_.account_expired as account3_8_0_, this_.account_locked as account4_8_0_, this_.apns_token as apns5_8_0_, this_.created_by as created6_8_0_, this_.date_created as date7_8_0_, this_.email as email8_0_, this_.enabled as enabled8_0_, this_.first_name as first10_8_0_, this_.last_name as last11_8_0_, this_.last_updated as last12_8_0_, this_.last_updated_by as last13_8_0_, this_.locale as locale8_0_, this_.`password` as password15_8_0_, this_.password_expired as password16_8_0_, this_.phone as phone8_0_, this_.tenant_id as tenant18_8_0_, this_.username as username8_0_ from user this_ where this_.tenant_id=? and this_.username=? limit ?
Hibernate: select driver0_.user_id as user1_2_0_, driver0_.version as version2_0_, driver0_.active_status as active3_2_0_, driver0_.car_type as car4_2_0_, driver0_.created_by as created5_2_0_, driver0_.date_created as date6_2_0_, driver0_.last_updated as last7_2_0_, driver0_.last_updated_by as last8_2_0_, driver0_.served_location_id as served9_2_0_, driver0_.tenant_id as tenant10_2_0_ from driver driver0_ where driver0_.user_id=?
Hibernate: select passenger0_.user_id as user1_1_0_, passenger0_.version as version1_0_, passenger0_.created_by as created3_1_0_, passenger0_.date_created as date4_1_0_, passenger0_.last_updated as last5_1_0_, passenger0_.last_updated_by as last6_1_0_, passenger0_.tenant_id as tenant7_1_0_ from passenger passenger0_ where passenger0_.user_id=?
Hibernate: select this_.role_id as role1_4_0_, this_.user_id as user2_4_0_, this_.created_by as created3_4_0_, this_.date_created as date4_4_0_, this_.last_updated as last5_4_0_, this_.last_updated_by as last6_4_0_, this_.tenant_id as tenant7_4_0_ from user_role this_ where this_.tenant_id=? and this_.user_id=?
Hibernate: select this_.role_id as role1_4_0_, this_.user_id as user2_4_0_, this_.created_by as created3_4_0_, this_.date_created as date4_4_0_, this_.last_updated as last5_4_0_, this_.last_updated_by as last6_4_0_, this_.tenant_id as tenant7_4_0_ from user_role this_ where this_.tenant_id=? and this_.user_id=?
ROLE_DRIVER
ROLE_RIDE_MGR
Interceptor createPage: TopLevelWindow[name=""]
Content of web window [TopLevelWindow[name=""]] changed
== Response was 200 (OK) headers: ==============================================
================================================================================
== Content =====================================================================
{"result":{"type":"USER","code":"SUCCESS","message":"Login successful."}, "additionalInfo":{"JSESSIONID":"78D34FF9A1CFC4BEDF95FB3D5C771D5E","userType":"DRIVER"}}
================================================================================
#
== Making request POST http://localhost:8080/moovt/ride/retrieveUnassignedRideInServedArea parameters: ==
== Request headers: ============================================================
Accept-Encoding: gzip, deflate
Content-Type: application/json
Accept: */*
== Content =====================================================================

				{}
				
================================================================================
Hibernate: select driver0_.user_id as user1_2_0_, driver0_.version as version2_0_, driver0_.active_status as active3_2_0_, driver0_.car_type as car4_2_0_, driver0_.created_by as created5_2_0_, driver0_.date_created as date6_2_0_, driver0_.last_updated as last7_2_0_, driver0_.last_updated_by as last8_2_0_, driver0_.served_location_id as served9_2_0_, driver0_.tenant_id as tenant10_2_0_ from driver driver0_ where driver0_.user_id=?
Hibernate: select location0_.id as id0_0_, location0_.version as version0_0_, location0_.created_by as created3_0_0_, location0_.date_created as date4_0_0_, location0_.last_updated as last5_0_0_, location0_.last_updated_by as last6_0_0_, location0_.latitude as latitude0_0_, location0_.location_name as location8_0_0_, location0_.location_type as location9_0_0_, location0_.longitude as longitude0_0_, location0_.political_name as political11_0_0_, location0_.tenant_id as tenant12_0_0_ from location location0_ where location0_.id=?
Hibernate: select user0_.id as id8_0_, user0_.version as version8_0_, user0_.account_expired as account3_8_0_, user0_.account_locked as account4_8_0_, user0_.apns_token as apns5_8_0_, user0_.created_by as created6_8_0_, user0_.date_created as date7_8_0_, user0_.email as email8_0_, user0_.enabled as enabled8_0_, user0_.first_name as first10_8_0_, user0_.last_name as last11_8_0_, user0_.last_updated as last12_8_0_, user0_.last_updated_by as last13_8_0_, user0_.locale as locale8_0_, user0_.`password` as password15_8_0_, user0_.password_expired as password16_8_0_, user0_.phone as phone8_0_, user0_.tenant_id as tenant18_8_0_, user0_.username as username8_0_ from user user0_ where user0_.id=?
Hibernate: select driver0_.user_id as user1_2_0_, driver0_.version as version2_0_, driver0_.active_status as active3_2_0_, driver0_.car_type as car4_2_0_, driver0_.created_by as created5_2_0_, driver0_.date_created as date6_2_0_, driver0_.last_updated as last7_2_0_, driver0_.last_updated_by as last8_2_0_, driver0_.served_location_id as served9_2_0_, driver0_.tenant_id as tenant10_2_0_ from driver driver0_ where driver0_.user_id=?
Hibernate: select passenger0_.user_id as user1_1_0_, passenger0_.version as version1_0_, passenger0_.created_by as created3_1_0_, passenger0_.date_created as date4_1_0_, passenger0_.last_updated as last5_1_0_, passenger0_.last_updated_by as last6_1_0_, passenger0_.tenant_id as tenant7_1_0_ from passenger passenger0_ where passenger0_.user_id=?
Hibernate: SELECT r.id as rideId, 3956 * 2 * ASIN(SQRT( POWER(SIN((? - latitude) * pi()/180 / 2), 2) +COS(? * pi()/180) * COS(latitude * pi()/180) *POWER(SIN((? - longitude) * pi()/180 / 2), 2) )) as distance FROM  ride r, location l WHERE r.pick_up_location_id = l.id AND r.ride_status = 'UNASSIGNED' AND l.longitude between ? and ? and l.latitude between ? and ? having distance < ? ORDER BY distance limit 10
Hibernate: select ride0_.id as id5_0_, ride0_.version as version5_0_, ride0_.car_type as car3_5_0_, ride0_.comments as comments5_0_, ride0_.created_by as created5_5_0_, ride0_.date_created as date6_5_0_, ride0_.driver_id as driver7_5_0_, ride0_.drop_off_location_id as drop8_5_0_, ride0_.last_updated as last9_5_0_, ride0_.last_updated_by as last10_5_0_, ride0_.message_to_the_driver as message11_5_0_, ride0_.passenger_id as passenger12_5_0_, ride0_.pick_up_location_id as pick13_5_0_, ride0_.pick_up_location_complement as pick14_5_0_, ride0_.pickup_date_time as pickup15_5_0_, ride0_.rating as rating5_0_, ride0_.ride_status as ride17_5_0_, ride0_.tenant_id as tenant18_5_0_ from ride ride0_ where ride0_.id=?
Hibernate: select passenger0_.user_id as user1_1_0_, passenger0_.version as version1_0_, passenger0_.created_by as created3_1_0_, passenger0_.date_created as date4_1_0_, passenger0_.last_updated as last5_1_0_, passenger0_.last_updated_by as last6_1_0_, passenger0_.tenant_id as tenant7_1_0_ from passenger passenger0_ where passenger0_.user_id=?
Hibernate: select user0_.id as id8_0_, user0_.version as version8_0_, user0_.account_expired as account3_8_0_, user0_.account_locked as account4_8_0_, user0_.apns_token as apns5_8_0_, user0_.created_by as created6_8_0_, user0_.date_created as date7_8_0_, user0_.email as email8_0_, user0_.enabled as enabled8_0_, user0_.first_name as first10_8_0_, user0_.last_name as last11_8_0_, user0_.last_updated as last12_8_0_, user0_.last_updated_by as last13_8_0_, user0_.locale as locale8_0_, user0_.`password` as password15_8_0_, user0_.password_expired as password16_8_0_, user0_.phone as phone8_0_, user0_.tenant_id as tenant18_8_0_, user0_.username as username8_0_ from user user0_ where user0_.id=?
Hibernate: select driver0_.user_id as user1_2_0_, driver0_.version as version2_0_, driver0_.active_status as active3_2_0_, driver0_.car_type as car4_2_0_, driver0_.created_by as created5_2_0_, driver0_.date_created as date6_2_0_, driver0_.last_updated as last7_2_0_, driver0_.last_updated_by as last8_2_0_, driver0_.served_location_id as served9_2_0_, driver0_.tenant_id as tenant10_2_0_ from driver driver0_ where driver0_.user_id=?
Hibernate: select passenger0_.user_id as user1_1_0_, passenger0_.version as version1_0_, passenger0_.created_by as created3_1_0_, passenger0_.date_created as date4_1_0_, passenger0_.last_updated as last5_1_0_, passenger0_.last_updated_by as last6_1_0_, passenger0_.tenant_id as tenant7_1_0_ from passenger passenger0_ where passenger0_.user_id=?
Hibernate: select location0_.id as id0_0_, location0_.version as version0_0_, location0_.created_by as created3_0_0_, location0_.date_created as date4_0_0_, location0_.last_updated as last5_0_0_, location0_.last_updated_by as last6_0_0_, location0_.latitude as latitude0_0_, location0_.location_name as location8_0_0_, location0_.location_type as location9_0_0_, location0_.longitude as longitude0_0_, location0_.political_name as political11_0_0_, location0_.tenant_id as tenant12_0_0_ from location location0_ where location0_.id=?
Hibernate: select location0_.id as id0_0_, location0_.version as version0_0_, location0_.created_by as created3_0_0_, location0_.date_created as date4_0_0_, location0_.last_updated as last5_0_0_, location0_.last_updated_by as last6_0_0_, location0_.latitude as latitude0_0_, location0_.location_name as location8_0_0_, location0_.location_type as location9_0_0_, location0_.longitude as longitude0_0_, location0_.political_name as political11_0_0_, location0_.tenant_id as tenant12_0_0_ from location location0_ where location0_.id=?
Hibernate: select location0_.id as id0_0_, location0_.version as version0_0_, location0_.created_by as created3_0_0_, location0_.date_created as date4_0_0_, location0_.last_updated as last5_0_0_, location0_.last_updated_by as last6_0_0_, location0_.latitude as latitude0_0_, location0_.location_name as location8_0_0_, location0_.location_type as location9_0_0_, location0_.longitude as longitude0_0_, location0_.political_name as political11_0_0_, location0_.tenant_id as tenant12_0_0_ from location location0_ where location0_.id=?
Interceptor createPage: TopLevelWindow[name=""]
Content of web window [TopLevelWindow[name=""]] changed
== Response was 200 (OK) headers: ==============================================
================================================================================
== Content =====================================================================
{"rides":[{"id":1,"version":0,"rideStatus":{"code":"UNASSIGNED","description":"Unassigned"},"carType":{"code":"A_SEDAN","description":"Sedan"},"driver":null,"passenger":{"id":5,"version":1,"username":"jgoodrider","firstName":"John","lastName":"DecidedToBeADriver","phone":"773-329-1784","email":"jgoodrider@worldtaxi.com","driver":{"servedLocation":{"locationName":"Rua Major Lopes, 55","politicalName":"Belo Horizonte, MG, BR","latitude":-19.9413628,"longitude":-43.9373064,"locationType":"RANGE_INTERPOLATED"},"carType":{"code":"B_VAN","description":"Van"},"activeStatus":{"code":"ENABLED","description":"Enabled"}},"passenger":{}},"pickUpDateTime":"2013-03-13 20:10","pickUpLocation":{"locationName":"Naperville","politicalName":"Illinois, United States","latitude":41.7858629,"longitude":-88.1472893,"locationType":"APPROXIMATE"},"dropOffLocation":{"locationName":"Naperville","politicalName":"Illinois, United States","latitude":41.7858629,"longitude":-88.1472893,"locationType":"APPROXIMATE"},"rating":null,"comments":null,"pickUpLocationComplement":"Close to Vest Ride 1","messageToTheDriver":"Please come fast ride 1"}]}
================================================================================
#
--Output from testAssignRideToDriverEnglish--
Switching to browser client [default]
Creating to new client [default] of type [class com.grailsrocks.functionaltest.client.BrowserClient]

== Making request POST http://localhost:8080/moovt/login/authenticateUser parameters: ==
== Request headers: ============================================================
Accept-Encoding: gzip, deflate
Content-Type: application/json
Accept: */*
== Content =====================================================================

				{"type":"Self","tenantname":"WorldTaxi","username":"jspeedy","password":"Welcome!1"}
				
================================================================================
Hibernate: select this_.id as id3_0_, this_.version as version3_0_, this_.created_by as created3_3_0_, this_.date_created as date4_3_0_, this_.last_updated as last5_3_0_, this_.last_updated_by as last6_3_0_, this_.name as name3_0_ from tenant this_ where this_.name=? limit ?
Hibernate: select this_.id as id8_0_, this_.version as version8_0_, this_.account_expired as account3_8_0_, this_.account_locked as account4_8_0_, this_.apns_token as apns5_8_0_, this_.created_by as created6_8_0_, this_.date_created as date7_8_0_, this_.email as email8_0_, this_.enabled as enabled8_0_, this_.first_name as first10_8_0_, this_.last_name as last11_8_0_, this_.last_updated as last12_8_0_, this_.last_updated_by as last13_8_0_, this_.locale as locale8_0_, this_.`password` as password15_8_0_, this_.password_expired as password16_8_0_, this_.phone as phone8_0_, this_.tenant_id as tenant18_8_0_, this_.username as username8_0_ from user this_ where this_.tenant_id=? and this_.username=? limit ?
Hibernate: select driver0_.user_id as user1_2_0_, driver0_.version as version2_0_, driver0_.active_status as active3_2_0_, driver0_.car_type as car4_2_0_, driver0_.created_by as created5_2_0_, driver0_.date_created as date6_2_0_, driver0_.last_updated as last7_2_0_, driver0_.last_updated_by as last8_2_0_, driver0_.served_location_id as served9_2_0_, driver0_.tenant_id as tenant10_2_0_ from driver driver0_ where driver0_.user_id=?
Hibernate: select passenger0_.user_id as user1_1_0_, passenger0_.version as version1_0_, passenger0_.created_by as created3_1_0_, passenger0_.date_created as date4_1_0_, passenger0_.last_updated as last5_1_0_, passenger0_.last_updated_by as last6_1_0_, passenger0_.tenant_id as tenant7_1_0_ from passenger passenger0_ where passenger0_.user_id=?
Hibernate: select this_.role_id as role1_4_0_, this_.user_id as user2_4_0_, this_.created_by as created3_4_0_, this_.date_created as date4_4_0_, this_.last_updated as last5_4_0_, this_.last_updated_by as last6_4_0_, this_.tenant_id as tenant7_4_0_ from user_role this_ where this_.tenant_id=? and this_.user_id=?
Hibernate: select this_.role_id as role1_4_0_, this_.user_id as user2_4_0_, this_.created_by as created3_4_0_, this_.date_created as date4_4_0_, this_.last_updated as last5_4_0_, this_.last_updated_by as last6_4_0_, this_.tenant_id as tenant7_4_0_ from user_role this_ where this_.tenant_id=? and this_.user_id=?
ROLE_DRIVER
ROLE_RIDE_MGR
Interceptor createPage: TopLevelWindow[name=""]
Content of web window [TopLevelWindow[name=""]] changed
== Response was 200 (OK) headers: ==============================================
================================================================================
== Content =====================================================================
{"result":{"type":"USER","code":"SUCCESS","message":"Login successful."}, "additionalInfo":{"JSESSIONID":"AE3C91760600B929708147E57D8BCFDE","userType":"DRIVER"}}
================================================================================
#
== Making request POST http://localhost:8080/moovt/ride/assignRideToDriver parameters: ==
== Request headers: ============================================================
Accept-Encoding: gzip, deflate
Content-Type: application/json
Accept: */*
== Content =====================================================================

				{"id":"3","version":"1"}
				
================================================================================
Hibernate: select driver0_.user_id as user1_2_0_, driver0_.version as version2_0_, driver0_.active_status as active3_2_0_, driver0_.car_type as car4_2_0_, driver0_.created_by as created5_2_0_, driver0_.date_created as date6_2_0_, driver0_.last_updated as last7_2_0_, driver0_.last_updated_by as last8_2_0_, driver0_.served_location_id as served9_2_0_, driver0_.tenant_id as tenant10_2_0_ from driver driver0_ where driver0_.user_id=?
Hibernate: select ride0_.id as id5_0_, ride0_.version as version5_0_, ride0_.car_type as car3_5_0_, ride0_.comments as comments5_0_, ride0_.created_by as created5_5_0_, ride0_.date_created as date6_5_0_, ride0_.driver_id as driver7_5_0_, ride0_.drop_off_location_id as drop8_5_0_, ride0_.last_updated as last9_5_0_, ride0_.last_updated_by as last10_5_0_, ride0_.message_to_the_driver as message11_5_0_, ride0_.passenger_id as passenger12_5_0_, ride0_.pick_up_location_id as pick13_5_0_, ride0_.pick_up_location_complement as pick14_5_0_, ride0_.pickup_date_time as pickup15_5_0_, ride0_.rating as rating5_0_, ride0_.ride_status as ride17_5_0_, ride0_.tenant_id as tenant18_5_0_ from ride ride0_ where ride0_.id=?
Hibernate: select location0_.id as id0_0_, location0_.version as version0_0_, location0_.created_by as created3_0_0_, location0_.date_created as date4_0_0_, location0_.last_updated as last5_0_0_, location0_.last_updated_by as last6_0_0_, location0_.latitude as latitude0_0_, location0_.location_name as location8_0_0_, location0_.location_type as location9_0_0_, location0_.longitude as longitude0_0_, location0_.political_name as political11_0_0_, location0_.tenant_id as tenant12_0_0_ from location location0_ where location0_.id=?
Hibernate: select passenger0_.user_id as user1_1_0_, passenger0_.version as version1_0_, passenger0_.created_by as created3_1_0_, passenger0_.date_created as date4_1_0_, passenger0_.last_updated as last5_1_0_, passenger0_.last_updated_by as last6_1_0_, passenger0_.tenant_id as tenant7_1_0_ from passenger passenger0_ where passenger0_.user_id=?
Hibernate: select location0_.id as id0_0_, location0_.version as version0_0_, location0_.created_by as created3_0_0_, location0_.date_created as date4_0_0_, location0_.last_updated as last5_0_0_, location0_.last_updated_by as last6_0_0_, location0_.latitude as latitude0_0_, location0_.location_name as location8_0_0_, location0_.location_type as location9_0_0_, location0_.longitude as longitude0_0_, location0_.political_name as political11_0_0_, location0_.tenant_id as tenant12_0_0_ from location location0_ where location0_.id=?
Hibernate: update ride set version=?, car_type=?, comments=?, created_by=?, date_created=?, driver_id=?, drop_off_location_id=?, last_updated=?, last_updated_by=?, message_to_the_driver=?, passenger_id=?, pick_up_location_id=?, pick_up_location_complement=?, pickup_date_time=?, rating=?, ride_status=?, tenant_id=? where id=? and version=?
Hibernate: select user0_.id as id8_0_, user0_.version as version8_0_, user0_.account_expired as account3_8_0_, user0_.account_locked as account4_8_0_, user0_.apns_token as apns5_8_0_, user0_.created_by as created6_8_0_, user0_.date_created as date7_8_0_, user0_.email as email8_0_, user0_.enabled as enabled8_0_, user0_.first_name as first10_8_0_, user0_.last_name as last11_8_0_, user0_.last_updated as last12_8_0_, user0_.last_updated_by as last13_8_0_, user0_.locale as locale8_0_, user0_.`password` as password15_8_0_, user0_.password_expired as password16_8_0_, user0_.phone as phone8_0_, user0_.tenant_id as tenant18_8_0_, user0_.username as username8_0_ from user user0_ where user0_.id=?
Hibernate: select driver0_.user_id as user1_2_0_, driver0_.version as version2_0_, driver0_.active_status as active3_2_0_, driver0_.car_type as car4_2_0_, driver0_.created_by as created5_2_0_, driver0_.date_created as date6_2_0_, driver0_.last_updated as last7_2_0_, driver0_.last_updated_by as last8_2_0_, driver0_.served_location_id as served9_2_0_, driver0_.tenant_id as tenant10_2_0_ from driver driver0_ where driver0_.user_id=?
Hibernate: select passenger0_.user_id as user1_1_0_, passenger0_.version as version1_0_, passenger0_.created_by as created3_1_0_, passenger0_.date_created as date4_1_0_, passenger0_.last_updated as last5_1_0_, passenger0_.last_updated_by as last6_1_0_, passenger0_.tenant_id as tenant7_1_0_ from passenger passenger0_ where passenger0_.user_id=?
Hibernate: select user0_.id as id8_0_, user0_.version as version8_0_, user0_.account_expired as account3_8_0_, user0_.account_locked as account4_8_0_, user0_.apns_token as apns5_8_0_, user0_.created_by as created6_8_0_, user0_.date_created as date7_8_0_, user0_.email as email8_0_, user0_.enabled as enabled8_0_, user0_.first_name as first10_8_0_, user0_.last_name as last11_8_0_, user0_.last_updated as last12_8_0_, user0_.last_updated_by as last13_8_0_, user0_.locale as locale8_0_, user0_.`password` as password15_8_0_, user0_.password_expired as password16_8_0_, user0_.phone as phone8_0_, user0_.tenant_id as tenant18_8_0_, user0_.username as username8_0_ from user user0_ where user0_.id=?
Hibernate: select driver0_.user_id as user1_2_0_, driver0_.version as version2_0_, driver0_.active_status as active3_2_0_, driver0_.car_type as car4_2_0_, driver0_.created_by as created5_2_0_, driver0_.date_created as date6_2_0_, driver0_.last_updated as last7_2_0_, driver0_.last_updated_by as last8_2_0_, driver0_.served_location_id as served9_2_0_, driver0_.tenant_id as tenant10_2_0_ from driver driver0_ where driver0_.user_id=?
Hibernate: select passenger0_.user_id as user1_1_0_, passenger0_.version as version1_0_, passenger0_.created_by as created3_1_0_, passenger0_.date_created as date4_1_0_, passenger0_.last_updated as last5_1_0_, passenger0_.last_updated_by as last6_1_0_, passenger0_.tenant_id as tenant7_1_0_ from passenger passenger0_ where passenger0_.user_id=?
Hibernate: insert into notification_task (version, created_by, date_created, failed_reason, last_updated, last_updated_by, message, notification_from, notification_to, process_date, subject, task_status, task_type, tenant_id) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: insert into notification_task (version, created_by, date_created, failed_reason, last_updated, last_updated_by, message, notification_from, notification_to, process_date, subject, task_status, task_type, tenant_id) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Interceptor createPage: TopLevelWindow[name=""]
Content of web window [TopLevelWindow[name=""]] changed
== Response was 200 (OK) headers: ==============================================
================================================================================
== Content =====================================================================
{"result":{"type":"USER","code":"SUCCESS","message":"Ride 3 updated"}}
================================================================================
#
--Output from testRetrieveAllRidesEnglish--
Switching to browser client [default]
Creating to new client [default] of type [class com.grailsrocks.functionaltest.client.BrowserClient]

== Making request POST http://localhost:8080/moovt/login/authenticateUser parameters: ==
== Request headers: ============================================================
Accept-Encoding: gzip, deflate
Content-Type: application/json
Accept: */*
== Content =====================================================================

				{"type":"Self","tenantname":"WorldTaxi","username":"admin","password":"admin"}
				
================================================================================
Hibernate: select this_.id as id3_0_, this_.version as version3_0_, this_.created_by as created3_3_0_, this_.date_created as date4_3_0_, this_.last_updated as last5_3_0_, this_.last_updated_by as last6_3_0_, this_.name as name3_0_ from tenant this_ where this_.name=? limit ?
Hibernate: select this_.id as id8_0_, this_.version as version8_0_, this_.account_expired as account3_8_0_, this_.account_locked as account4_8_0_, this_.apns_token as apns5_8_0_, this_.created_by as created6_8_0_, this_.date_created as date7_8_0_, this_.email as email8_0_, this_.enabled as enabled8_0_, this_.first_name as first10_8_0_, this_.last_name as last11_8_0_, this_.last_updated as last12_8_0_, this_.last_updated_by as last13_8_0_, this_.locale as locale8_0_, this_.`password` as password15_8_0_, this_.password_expired as password16_8_0_, this_.phone as phone8_0_, this_.tenant_id as tenant18_8_0_, this_.username as username8_0_ from user this_ where this_.tenant_id=? and this_.username=? limit ?
Hibernate: select driver0_.user_id as user1_2_0_, driver0_.version as version2_0_, driver0_.active_status as active3_2_0_, driver0_.car_type as car4_2_0_, driver0_.created_by as created5_2_0_, driver0_.date_created as date6_2_0_, driver0_.last_updated as last7_2_0_, driver0_.last_updated_by as last8_2_0_, driver0_.served_location_id as served9_2_0_, driver0_.tenant_id as tenant10_2_0_ from driver driver0_ where driver0_.user_id=?
Hibernate: select passenger0_.user_id as user1_1_0_, passenger0_.version as version1_0_, passenger0_.created_by as created3_1_0_, passenger0_.date_created as date4_1_0_, passenger0_.last_updated as last5_1_0_, passenger0_.last_updated_by as last6_1_0_, passenger0_.tenant_id as tenant7_1_0_ from passenger passenger0_ where passenger0_.user_id=?
Hibernate: select this_.role_id as role1_4_0_, this_.user_id as user2_4_0_, this_.created_by as created3_4_0_, this_.date_created as date4_4_0_, this_.last_updated as last5_4_0_, this_.last_updated_by as last6_4_0_, this_.tenant_id as tenant7_4_0_ from user_role this_ where this_.tenant_id=? and this_.user_id=?
Hibernate: select this_.role_id as role1_4_0_, this_.user_id as user2_4_0_, this_.created_by as created3_4_0_, this_.date_created as date4_4_0_, this_.last_updated as last5_4_0_, this_.last_updated_by as last6_4_0_, this_.tenant_id as tenant7_4_0_ from user_role this_ where this_.tenant_id=? and this_.user_id=?
ROLE_ADMIN
Interceptor createPage: TopLevelWindow[name=""]
Content of web window [TopLevelWindow[name=""]] changed
== Response was 200 (OK) headers: ==============================================
================================================================================
== Content =====================================================================
{"result":{"type":"USER","code":"SUCCESS","message":"Login successful."}, "additionalInfo":{"JSESSIONID":"DA71D43CC6AA38266D2D6AC6CE6D0879","userType":"NO_TYPE"}}
================================================================================
#
== Making request POST http://localhost:8080/moovt/ride/retrieveAllRides parameters: ==
== Request headers: ============================================================
Accept-Encoding: gzip, deflate
Content-Type: application/json
Accept: */*
== Content =====================================================================

				{}
				
================================================================================
Hibernate: select this_.id as id5_0_, this_.version as version5_0_, this_.car_type as car3_5_0_, this_.comments as comments5_0_, this_.created_by as created5_5_0_, this_.date_created as date6_5_0_, this_.driver_id as driver7_5_0_, this_.drop_off_location_id as drop8_5_0_, this_.last_updated as last9_5_0_, this_.last_updated_by as last10_5_0_, this_.message_to_the_driver as message11_5_0_, this_.passenger_id as passenger12_5_0_, this_.pick_up_location_id as pick13_5_0_, this_.pick_up_location_complement as pick14_5_0_, this_.pickup_date_time as pickup15_5_0_, this_.rating as rating5_0_, this_.ride_status as ride17_5_0_, this_.tenant_id as tenant18_5_0_ from ride this_
Hibernate: select passenger0_.user_id as user1_1_0_, passenger0_.version as version1_0_, passenger0_.created_by as created3_1_0_, passenger0_.date_created as date4_1_0_, passenger0_.last_updated as last5_1_0_, passenger0_.last_updated_by as last6_1_0_, passenger0_.tenant_id as tenant7_1_0_ from passenger passenger0_ where passenger0_.user_id=?
Hibernate: select user0_.id as id8_0_, user0_.version as version8_0_, user0_.account_expired as account3_8_0_, user0_.account_locked as account4_8_0_, user0_.apns_token as apns5_8_0_, user0_.created_by as created6_8_0_, user0_.date_created as date7_8_0_, user0_.email as email8_0_, user0_.enabled as enabled8_0_, user0_.first_name as first10_8_0_, user0_.last_name as last11_8_0_, user0_.last_updated as last12_8_0_, user0_.last_updated_by as last13_8_0_, user0_.locale as locale8_0_, user0_.`password` as password15_8_0_, user0_.password_expired as password16_8_0_, user0_.phone as phone8_0_, user0_.tenant_id as tenant18_8_0_, user0_.username as username8_0_ from user user0_ where user0_.id=?
Hibernate: select driver0_.user_id as user1_2_0_, driver0_.version as version2_0_, driver0_.active_status as active3_2_0_, driver0_.car_type as car4_2_0_, driver0_.created_by as created5_2_0_, driver0_.date_created as date6_2_0_, driver0_.last_updated as last7_2_0_, driver0_.last_updated_by as last8_2_0_, driver0_.served_location_id as served9_2_0_, driver0_.tenant_id as tenant10_2_0_ from driver driver0_ where driver0_.user_id=?
Hibernate: select passenger0_.user_id as user1_1_0_, passenger0_.version as version1_0_, passenger0_.created_by as created3_1_0_, passenger0_.date_created as date4_1_0_, passenger0_.last_updated as last5_1_0_, passenger0_.last_updated_by as last6_1_0_, passenger0_.tenant_id as tenant7_1_0_ from passenger passenger0_ where passenger0_.user_id=?
Hibernate: select location0_.id as id0_0_, location0_.version as version0_0_, location0_.created_by as created3_0_0_, location0_.date_created as date4_0_0_, location0_.last_updated as last5_0_0_, location0_.last_updated_by as last6_0_0_, location0_.latitude as latitude0_0_, location0_.location_name as location8_0_0_, location0_.location_type as location9_0_0_, location0_.longitude as longitude0_0_, location0_.political_name as political11_0_0_, location0_.tenant_id as tenant12_0_0_ from location location0_ where location0_.id=?
Hibernate: select location0_.id as id0_0_, location0_.version as version0_0_, location0_.created_by as created3_0_0_, location0_.date_created as date4_0_0_, location0_.last_updated as last5_0_0_, location0_.last_updated_by as last6_0_0_, location0_.latitude as latitude0_0_, location0_.location_name as location8_0_0_, location0_.location_type as location9_0_0_, location0_.longitude as longitude0_0_, location0_.political_name as political11_0_0_, location0_.tenant_id as tenant12_0_0_ from location location0_ where location0_.id=?
Hibernate: select location0_.id as id0_0_, location0_.version as version0_0_, location0_.created_by as created3_0_0_, location0_.date_created as date4_0_0_, location0_.last_updated as last5_0_0_, location0_.last_updated_by as last6_0_0_, location0_.latitude as latitude0_0_, location0_.location_name as location8_0_0_, location0_.location_type as location9_0_0_, location0_.longitude as longitude0_0_, location0_.political_name as political11_0_0_, location0_.tenant_id as tenant12_0_0_ from location location0_ where location0_.id=?
Hibernate: select driver0_.user_id as user1_2_0_, driver0_.version as version2_0_, driver0_.active_status as active3_2_0_, driver0_.car_type as car4_2_0_, driver0_.created_by as created5_2_0_, driver0_.date_created as date6_2_0_, driver0_.last_updated as last7_2_0_, driver0_.last_updated_by as last8_2_0_, driver0_.served_location_id as served9_2_0_, driver0_.tenant_id as tenant10_2_0_ from driver driver0_ where driver0_.user_id=?
Hibernate: select user0_.id as id8_0_, user0_.version as version8_0_, user0_.account_expired as account3_8_0_, user0_.account_locked as account4_8_0_, user0_.apns_token as apns5_8_0_, user0_.created_by as created6_8_0_, user0_.date_created as date7_8_0_, user0_.email as email8_0_, user0_.enabled as enabled8_0_, user0_.first_name as first10_8_0_, user0_.last_name as last11_8_0_, user0_.last_updated as last12_8_0_, user0_.last_updated_by as last13_8_0_, user0_.locale as locale8_0_, user0_.`password` as password15_8_0_, user0_.password_expired as password16_8_0_, user0_.phone as phone8_0_, user0_.tenant_id as tenant18_8_0_, user0_.username as username8_0_ from user user0_ where user0_.id=?
Hibernate: select driver0_.user_id as user1_2_0_, driver0_.version as version2_0_, driver0_.active_status as active3_2_0_, driver0_.car_type as car4_2_0_, driver0_.created_by as created5_2_0_, driver0_.date_created as date6_2_0_, driver0_.last_updated as last7_2_0_, driver0_.last_updated_by as last8_2_0_, driver0_.served_location_id as served9_2_0_, driver0_.tenant_id as tenant10_2_0_ from driver driver0_ where driver0_.user_id=?
Hibernate: select passenger0_.user_id as user1_1_0_, passenger0_.version as version1_0_, passenger0_.created_by as created3_1_0_, passenger0_.date_created as date4_1_0_, passenger0_.last_updated as last5_1_0_, passenger0_.last_updated_by as last6_1_0_, passenger0_.tenant_id as tenant7_1_0_ from passenger passenger0_ where passenger0_.user_id=?
Hibernate: select location0_.id as id0_0_, location0_.version as version0_0_, location0_.created_by as created3_0_0_, location0_.date_created as date4_0_0_, location0_.last_updated as last5_0_0_, location0_.last_updated_by as last6_0_0_, location0_.latitude as latitude0_0_, location0_.location_name as location8_0_0_, location0_.location_type as location9_0_0_, location0_.longitude as longitude0_0_, location0_.political_name as political11_0_0_, location0_.tenant_id as tenant12_0_0_ from location location0_ where location0_.id=?
Hibernate: select location0_.id as id0_0_, location0_.version as version0_0_, location0_.created_by as created3_0_0_, location0_.date_created as date4_0_0_, location0_.last_updated as last5_0_0_, location0_.last_updated_by as last6_0_0_, location0_.latitude as latitude0_0_, location0_.location_name as location8_0_0_, location0_.location_type as location9_0_0_, location0_.longitude as longitude0_0_, location0_.political_name as political11_0_0_, location0_.tenant_id as tenant12_0_0_ from location location0_ where location0_.id=?
Hibernate: select location0_.id as id0_0_, location0_.version as version0_0_, location0_.created_by as created3_0_0_, location0_.date_created as date4_0_0_, location0_.last_updated as last5_0_0_, location0_.last_updated_by as last6_0_0_, location0_.latitude as latitude0_0_, location0_.location_name as location8_0_0_, location0_.location_type as location9_0_0_, location0_.longitude as longitude0_0_, location0_.political_name as political11_0_0_, location0_.tenant_id as tenant12_0_0_ from location location0_ where location0_.id=?
Hibernate: select driver0_.user_id as user1_2_0_, driver0_.version as version2_0_, driver0_.active_status as active3_2_0_, driver0_.car_type as car4_2_0_, driver0_.created_by as created5_2_0_, driver0_.date_created as date6_2_0_, driver0_.last_updated as last7_2_0_, driver0_.last_updated_by as last8_2_0_, driver0_.served_location_id as served9_2_0_, driver0_.tenant_id as tenant10_2_0_ from driver driver0_ where driver0_.user_id=?
Hibernate: select user0_.id as id8_0_, user0_.version as version8_0_, user0_.account_expired as account3_8_0_, user0_.account_locked as account4_8_0_, user0_.apns_token as apns5_8_0_, user0_.created_by as created6_8_0_, user0_.date_created as date7_8_0_, user0_.email as email8_0_, user0_.enabled as enabled8_0_, user0_.first_name as first10_8_0_, user0_.last_name as last11_8_0_, user0_.last_updated as last12_8_0_, user0_.last_updated_by as last13_8_0_, user0_.locale as locale8_0_, user0_.`password` as password15_8_0_, user0_.password_expired as password16_8_0_, user0_.phone as phone8_0_, user0_.tenant_id as tenant18_8_0_, user0_.username as username8_0_ from user user0_ where user0_.id=?
Hibernate: select driver0_.user_id as user1_2_0_, driver0_.version as version2_0_, driver0_.active_status as active3_2_0_, driver0_.car_type as car4_2_0_, driver0_.created_by as created5_2_0_, driver0_.date_created as date6_2_0_, driver0_.last_updated as last7_2_0_, driver0_.last_updated_by as last8_2_0_, driver0_.served_location_id as served9_2_0_, driver0_.tenant_id as tenant10_2_0_ from driver driver0_ where driver0_.user_id=?
Hibernate: select passenger0_.user_id as user1_1_0_, passenger0_.version as version1_0_, passenger0_.created_by as created3_1_0_, passenger0_.date_created as date4_1_0_, passenger0_.last_updated as last5_1_0_, passenger0_.last_updated_by as last6_1_0_, passenger0_.tenant_id as tenant7_1_0_ from passenger passenger0_ where passenger0_.user_id=?
Hibernate: select location0_.id as id0_0_, location0_.version as version0_0_, location0_.created_by as created3_0_0_, location0_.date_created as date4_0_0_, location0_.last_updated as last5_0_0_, location0_.last_updated_by as last6_0_0_, location0_.latitude as latitude0_0_, location0_.location_name as location8_0_0_, location0_.location_type as location9_0_0_, location0_.longitude as longitude0_0_, location0_.political_name as political11_0_0_, location0_.tenant_id as tenant12_0_0_ from location location0_ where location0_.id=?
Hibernate: select location0_.id as id0_0_, location0_.version as version0_0_, location0_.created_by as created3_0_0_, location0_.date_created as date4_0_0_, location0_.last_updated as last5_0_0_, location0_.last_updated_by as last6_0_0_, location0_.latitude as latitude0_0_, location0_.location_name as location8_0_0_, location0_.location_type as location9_0_0_, location0_.longitude as longitude0_0_, location0_.political_name as political11_0_0_, location0_.tenant_id as tenant12_0_0_ from location location0_ where location0_.id=?
Hibernate: select location0_.id as id0_0_, location0_.version as version0_0_, location0_.created_by as created3_0_0_, location0_.date_created as date4_0_0_, location0_.last_updated as last5_0_0_, location0_.last_updated_by as last6_0_0_, location0_.latitude as latitude0_0_, location0_.location_name as location8_0_0_, location0_.location_type as location9_0_0_, location0_.longitude as longitude0_0_, location0_.political_name as political11_0_0_, location0_.tenant_id as tenant12_0_0_ from location location0_ where location0_.id=?
Hibernate: select location0_.id as id0_0_, location0_.version as version0_0_, location0_.created_by as created3_0_0_, location0_.date_created as date4_0_0_, location0_.last_updated as last5_0_0_, location0_.last_updated_by as last6_0_0_, location0_.latitude as latitude0_0_, location0_.location_name as location8_0_0_, location0_.location_type as location9_0_0_, location0_.longitude as longitude0_0_, location0_.political_name as political11_0_0_, location0_.tenant_id as tenant12_0_0_ from location location0_ where location0_.id=?
Hibernate: select location0_.id as id0_0_, location0_.version as version0_0_, location0_.created_by as created3_0_0_, location0_.date_created as date4_0_0_, location0_.last_updated as last5_0_0_, location0_.last_updated_by as last6_0_0_, location0_.latitude as latitude0_0_, location0_.location_name as location8_0_0_, location0_.location_type as location9_0_0_, location0_.longitude as longitude0_0_, location0_.political_name as political11_0_0_, location0_.tenant_id as tenant12_0_0_ from location location0_ where location0_.id=?
Hibernate: select location0_.id as id0_0_, location0_.version as version0_0_, location0_.created_by as created3_0_0_, location0_.date_created as date4_0_0_, location0_.last_updated as last5_0_0_, location0_.last_updated_by as last6_0_0_, location0_.latitude as latitude0_0_, location0_.location_name as location8_0_0_, location0_.location_type as location9_0_0_, location0_.longitude as longitude0_0_, location0_.political_name as political11_0_0_, location0_.tenant_id as tenant12_0_0_ from location location0_ where location0_.id=?
Hibernate: select location0_.id as id0_0_, location0_.version as version0_0_, location0_.created_by as created3_0_0_, location0_.date_created as date4_0_0_, location0_.last_updated as last5_0_0_, location0_.last_updated_by as last6_0_0_, location0_.latitude as latitude0_0_, location0_.location_name as location8_0_0_, location0_.location_type as location9_0_0_, location0_.longitude as longitude0_0_, location0_.political_name as political11_0_0_, location0_.tenant_id as tenant12_0_0_ from location location0_ where location0_.id=?
Hibernate: select location0_.id as id0_0_, location0_.version as version0_0_, location0_.created_by as created3_0_0_, location0_.date_created as date4_0_0_, location0_.last_updated as last5_0_0_, location0_.last_updated_by as last6_0_0_, location0_.latitude as latitude0_0_, location0_.location_name as location8_0_0_, location0_.location_type as location9_0_0_, location0_.longitude as longitude0_0_, location0_.political_name as political11_0_0_, location0_.tenant_id as tenant12_0_0_ from location location0_ where location0_.id=?
Interceptor createPage: TopLevelWindow[name=""]
Content of web window [TopLevelWindow[name=""]] changed
== Response was 200 (OK) headers: ==============================================
================================================================================
== Content =====================================================================
{"rides":[{"id":1,"version":0,"rideStatus":{"code":"UNASSIGNED","description":"Unassigned"},"carType":{"code":"A_SEDAN","description":"Sedan"},"driver":null,"passenger":{"id":5,"version":1,"username":"jgoodrider","firstName":"John","lastName":"DecidedToBeADriver","phone":"773-329-1784","email":"jgoodrider@worldtaxi.com","driver":{"servedLocation":{"locationName":"Rua Major Lopes, 55","politicalName":"Belo Horizonte, MG, BR","latitude":-19.9413628,"longitude":-43.9373064,"locationType":"RANGE_INTERPOLATED"},"carType":{"code":"B_VAN","description":"Van"},"activeStatus":{"code":"ENABLED","description":"Enabled"}},"passenger":{}},"pickUpDateTime":"2013-03-13 20:10","pickUpLocation":{"locationName":"Naperville","politicalName":"Illinois, United States","latitude":41.7858629,"longitude":-88.1472893,"locationType":"APPROXIMATE"},"dropOffLocation":{"locationName":"Naperville","politicalName":"Illinois, United States","latitude":41.7858629,"longitude":-88.1472893,"locationType":"APPROXIMATE"},"rating":null,"comments":null,"pickUpLocationComplement":"Close to Vest Ride 1","messageToTheDriver":"Please come fast ride 1"},{"id":2,"version":0,"rideStatus":{"code":"ASSIGNED","description":"Assigned"},"carType":{"code":"A_SEDAN","description":"Sedan"},"driver":{"id":6,"version":0,"username":"jgoodarm","firstName":"John","lastName":"Goodarm","phone":"800-800-2020","email":"jgoodarm@worldtaxi.com","driver":{"servedLocation":{"locationName":"Naperville","politicalName":"Illinois, United States","latitude":41.7858629,"longitude":-88.1472893,"locationType":"APPROXIMATE"},"carType":{"code":"B_VAN","description":"Van"},"activeStatus":{"code":"ENABLED","description":"Enabled"}}},"passenger":{"id":5,"version":1,"username":"jgoodrider","firstName":"John","lastName":"DecidedToBeADriver","phone":"773-329-1784","email":"jgoodrider@worldtaxi.com","driver":{"servedLocation":{"locationName":"Rua Major Lopes, 55","politicalName":"Belo Horizonte, MG, BR","latitude":-19.9413628,"longitude":-43.9373064,"locationType":"RANGE_INTERPOLATED"},"carType":{"code":"B_VAN","description":"Van"},"activeStatus":{"code":"ENABLED","description":"Enabled"}},"passenger":{}},"pickUpDateTime":"2013-03-13 20:10","pickUpLocation":{"locationName":"Functional Test Major Lopes, 55","politicalName":"Belo Horizonte, MG, BR","latitude":-19.9413628,"longitude":-43.9373064,"locationType":"RANGE_INTERPOLATED"},"dropOffLocation":{"locationName":"Naperville","politicalName":"Illinois, United States","latitude":41.7858629,"longitude":-88.1472893,"locationType":"APPROXIMATE"},"rating":null,"comments":null,"pickUpLocationComplement":"Close to Vest Ride 2","messageToTheDriver":"Please come fast ride 2"},{"id":3,"version":1,"rideStatus":{"code":"ASSIGNED","description":"Assigned"},"carType":{"code":"A_SEDAN","description":"Sedan"},"driver":{"id":7,"version":0,"username":"jspeedy","firstName":"John","lastName":"Speedy","phone":"800-800-2020","email":"jspeedy@worldtaxi.com","driver":{"servedLocation":{"locationName":"Naperville","politicalName":"Illinois, United States","latitude":41.7858629,"longitude":-88.1472893,"locationType":"APPROXIMATE"},"carType":{"code":"B_VAN","description":"Van"},"activeStatus":{"code":"ENABLED","description":"Enabled"}}},"passenger":{"id":5,"version":1,"username":"jgoodrider","firstName":"John","lastName":"DecidedToBeADriver","phone":"773-329-1784","email":"jgoodrider@worldtaxi.com","driver":{"servedLocation":{"locationName":"Rua Major Lopes, 55","politicalName":"Belo Horizonte, MG, BR","latitude":-19.9413628,"longitude":-43.9373064,"locationType":"RANGE_INTERPOLATED"},"carType":{"code":"B_VAN","description":"Van"},"activeStatus":{"code":"ENABLED","description":"Enabled"}},"passenger":{}},"pickUpDateTime":"2013-03-13 20:10","pickUpLocation":{"locationName":"Contagem","politicalName":"Minas Gerais, Brazil","latitude":-19.9385599,"longitude":-44.0529377,"locationType":"APPROXIMATE"},"dropOffLocation":{"locationName":"Naperville","politicalName":"Illinois, United States","latitude":41.7858629,"longitude":-88.1472893,"locationType":"APPROXIMATE"},"rating":null,"comments":null,"pickUpLocationComplement":null,"messageToTheDriver":null},{"id":4,"version":0,"rideStatus":{"code":"ASSIGNED","description":"Assigned"},"carType":{"code":"A_SEDAN","description":"Sedan"},"driver":{"id":6,"version":0,"username":"jgoodarm","firstName":"John","lastName":"Goodarm","phone":"800-800-2020","email":"jgoodarm@worldtaxi.com","driver":{"servedLocation":{"locationName":"Naperville","politicalName":"Illinois, United States","latitude":41.7858629,"longitude":-88.1472893,"locationType":"APPROXIMATE"},"carType":{"code":"B_VAN","description":"Van"},"activeStatus":{"code":"ENABLED","description":"Enabled"}}},"passenger":{"id":5,"version":1,"username":"jgoodrider","firstName":"John","lastName":"DecidedToBeADriver","phone":"773-329-1784","email":"jgoodrider@worldtaxi.com","driver":{"servedLocation":{"locationName":"Rua Major Lopes, 55","politicalName":"Belo Horizonte, MG, BR","latitude":-19.9413628,"longitude":-43.9373064,"locationType":"RANGE_INTERPOLATED"},"carType":{"code":"B_VAN","description":"Van"},"activeStatus":{"code":"ENABLED","description":"Enabled"}},"passenger":{}},"pickUpDateTime":"2013-03-13 20:10","pickUpLocation":{"locationName":"Contagem","politicalName":"Minas Gerais, Brazil","latitude":-19.9385599,"longitude":-44.0529377,"locationType":"APPROXIMATE"},"dropOffLocation":{"locationName":"Naperville","politicalName":"Illinois, United States","latitude":41.7858629,"longitude":-88.1472893,"locationType":"APPROXIMATE"},"rating":null,"comments":null,"pickUpLocationComplement":null,"messageToTheDriver":null},{"id":5,"version":0,"rideStatus":{"code":"COMPLETED","description":"Completed"},"carType":{"code":"A_SEDAN","description":"Sedan"},"driver":null,"passenger":{"id":5,"version":1,"username":"jgoodrider","firstName":"John","lastName":"DecidedToBeADriver","phone":"773-329-1784","email":"jgoodrider@worldtaxi.com","driver":{"servedLocation":{"locationName":"Rua Major Lopes, 55","politicalName":"Belo Horizonte, MG, BR","latitude":-19.9413628,"longitude":-43.9373064,"locationType":"RANGE_INTERPOLATED"},"carType":{"code":"B_VAN","description":"Van"},"activeStatus":{"code":"ENABLED","description":"Enabled"}},"passenger":{}},"pickUpDateTime":"2013-03-13 20:10","pickUpLocation":{"locationName":"Contagem","politicalName":"Minas Gerais, Brazil","latitude":-19.9385599,"longitude":-44.0529377,"locationType":"APPROXIMATE"},"dropOffLocation":{"locationName":"Naperville","politicalName":"Illinois, United States","latitude":41.7858629,"longitude":-88.1472893,"locationType":"APPROXIMATE"},"rating":3.5,"comments":"Great Driver","pickUpLocationComplement":"Close to Vest Ride 5","messageToTheDriver":"Please come fast Ride 5"},{"id":6,"version":0,"rideStatus":{"code":"UNASSIGNED","description":"Unassigned"},"carType":{"code":"A_SEDAN","description":"Sedan"},"driver":null,"passenger":{"id":5,"version":1,"username":"jgoodrider","firstName":"John","lastName":"DecidedToBeADriver","phone":"773-329-1784","email":"jgoodrider@worldtaxi.com","driver":{"servedLocation":{"locationName":"Rua Major Lopes, 55","politicalName":"Belo Horizonte, MG, BR","latitude":-19.9413628,"longitude":-43.9373064,"locationType":"RANGE_INTERPOLATED"},"carType":{"code":"B_VAN","description":"Van"},"activeStatus":{"code":"ENABLED","description":"Enabled"}},"passenger":{}},"pickUpDateTime":"2013-03-13 20:10","pickUpLocation":{"locationName":"Contagem","politicalName":"Minas Gerais, Brazil","latitude":-19.9385599,"longitude":-44.0529377,"locationType":"APPROXIMATE"},"dropOffLocation":{"locationName":"Naperville","politicalName":"Illinois, United States","latitude":41.7858629,"longitude":-88.1472893,"locationType":"APPROXIMATE"},"rating":null,"comments":null,"pickUpLocationComplement":null,"messageToTheDriver":null},{"id":7,"version":0,"rideStatus":{"code":"UNASSIGNED","description":"Unassigned"},"carType":{"code":"A_SEDAN","description":"Sedan"},"driver":null,"passenger":{"id":5,"version":1,"username":"jgoodrider","firstName":"John","lastName":"DecidedToBeADriver","phone":"773-329-1784","email":"jgoodrider@worldtaxi.com","driver":{"servedLocation":{"locationName":"Rua Major Lopes, 55","politicalName":"Belo Horizonte, MG, BR","latitude":-19.9413628,"longitude":-43.9373064,"locationType":"RANGE_INTERPOLATED"},"carType":{"code":"B_VAN","description":"Van"},"activeStatus":{"code":"ENABLED","description":"Enabled"}},"passenger":{}},"pickUpDateTime":"2013-03-13 20:10","pickUpLocation":{"locationName":"Contagem","politicalName":"Minas Gerais, Brazil","latitude":-19.9385599,"longitude":-44.0529377,"locationType":"APPROXIMATE"},"dropOffLocation":{"locationName":"Naperville","politicalName":"Illinois, United States","latitude":41.7858629,"longitude":-88.1472893,"locationType":"APPROXIMATE"},"rating":null,"comments":null,"pickUpLocationComplement":null,"messageToTheDriver":null},{"id":8,"version":0,"rideStatus":{"code":"UNASSIGNED","description":"Unassigned"},"carType":{"code":"A_SEDAN","description":"Sedan"},"driver":null,"passenger":{"id":5,"version":1,"username":"jgoodrider","firstName":"John","lastName":"DecidedToBeADriver","phone":"773-329-1784","email":"jgoodrider@worldtaxi.com","driver":{"servedLocation":{"locationName":"Rua Major Lopes, 55","politicalName":"Belo Horizonte, MG, BR","latitude":-19.9413628,"longitude":-43.9373064,"locationType":"RANGE_INTERPOLATED"},"carType":{"code":"B_VAN","description":"Van"},"activeStatus":{"code":"ENABLED","description":"Enabled"}},"passenger":{}},"pickUpDateTime":"2013-03-13 20:10","pickUpLocation":{"locationName":"Contagem","politicalName":"Minas Gerais, Brazil","latitude":-19.9385599,"longitude":-44.0529377,"locationType":"APPROXIMATE"},"dropOffLocation":{"locationName":"Naperville","politicalName":"Illinois, United States","latitude":41.7858629,"longitude":-88.1472893,"locationType":"APPROXIMATE"},"rating":null,"comments":null,"pickUpLocationComplement":null,"messageToTheDriver":null}]}
================================================================================
#
--Output from testRetrieveAssignedRidesEnglish--
Switching to browser client [default]
Creating to new client [default] of type [class com.grailsrocks.functionaltest.client.BrowserClient]

== Making request POST http://localhost:8080/moovt/login/authenticateUser parameters: ==
== Request headers: ============================================================
Accept-Encoding: gzip, deflate
Content-Type: application/json
Accept: */*
== Content =====================================================================

                        {"type":"Self","tenantname":"WorldTaxi","username":"jgoodarm","password":"Welcome!1"}
				
================================================================================
Hibernate: select this_.id as id3_0_, this_.version as version3_0_, this_.created_by as created3_3_0_, this_.date_created as date4_3_0_, this_.last_updated as last5_3_0_, this_.last_updated_by as last6_3_0_, this_.name as name3_0_ from tenant this_ where this_.name=? limit ?
Hibernate: select this_.id as id8_0_, this_.version as version8_0_, this_.account_expired as account3_8_0_, this_.account_locked as account4_8_0_, this_.apns_token as apns5_8_0_, this_.created_by as created6_8_0_, this_.date_created as date7_8_0_, this_.email as email8_0_, this_.enabled as enabled8_0_, this_.first_name as first10_8_0_, this_.last_name as last11_8_0_, this_.last_updated as last12_8_0_, this_.last_updated_by as last13_8_0_, this_.locale as locale8_0_, this_.`password` as password15_8_0_, this_.password_expired as password16_8_0_, this_.phone as phone8_0_, this_.tenant_id as tenant18_8_0_, this_.username as username8_0_ from user this_ where this_.tenant_id=? and this_.username=? limit ?
Hibernate: select driver0_.user_id as user1_2_0_, driver0_.version as version2_0_, driver0_.active_status as active3_2_0_, driver0_.car_type as car4_2_0_, driver0_.created_by as created5_2_0_, driver0_.date_created as date6_2_0_, driver0_.last_updated as last7_2_0_, driver0_.last_updated_by as last8_2_0_, driver0_.served_location_id as served9_2_0_, driver0_.tenant_id as tenant10_2_0_ from driver driver0_ where driver0_.user_id=?
Hibernate: select passenger0_.user_id as user1_1_0_, passenger0_.version as version1_0_, passenger0_.created_by as created3_1_0_, passenger0_.date_created as date4_1_0_, passenger0_.last_updated as last5_1_0_, passenger0_.last_updated_by as last6_1_0_, passenger0_.tenant_id as tenant7_1_0_ from passenger passenger0_ where passenger0_.user_id=?
Hibernate: select this_.role_id as role1_4_0_, this_.user_id as user2_4_0_, this_.created_by as created3_4_0_, this_.date_created as date4_4_0_, this_.last_updated as last5_4_0_, this_.last_updated_by as last6_4_0_, this_.tenant_id as tenant7_4_0_ from user_role this_ where this_.tenant_id=? and this_.user_id=?
Hibernate: select this_.role_id as role1_4_0_, this_.user_id as user2_4_0_, this_.created_by as created3_4_0_, this_.date_created as date4_4_0_, this_.last_updated as last5_4_0_, this_.last_updated_by as last6_4_0_, this_.tenant_id as tenant7_4_0_ from user_role this_ where this_.tenant_id=? and this_.user_id=?
ROLE_DRIVER
ROLE_RIDE_MGR
Interceptor createPage: TopLevelWindow[name=""]
Content of web window [TopLevelWindow[name=""]] changed
== Response was 200 (OK) headers: ==============================================
================================================================================
== Content =====================================================================
{"result":{"type":"USER","code":"SUCCESS","message":"Login successful."}, "additionalInfo":{"JSESSIONID":"2536B4547E1CD3FC00F459DFDD8C0DF8","userType":"DRIVER"}}
================================================================================
#
== Making request POST http://localhost:8080/moovt/ride/retrieveAssignedRides parameters: ==
== Request headers: ============================================================
Accept-Encoding: gzip, deflate
Content-Type: application/json
Accept: */*
== Content =====================================================================

				{}
				
================================================================================
Hibernate: select driver0_.user_id as user1_2_0_, driver0_.version as version2_0_, driver0_.active_status as active3_2_0_, driver0_.car_type as car4_2_0_, driver0_.created_by as created5_2_0_, driver0_.date_created as date6_2_0_, driver0_.last_updated as last7_2_0_, driver0_.last_updated_by as last8_2_0_, driver0_.served_location_id as served9_2_0_, driver0_.tenant_id as tenant10_2_0_ from driver driver0_ where driver0_.user_id=?
Hibernate: select this_.id as id5_0_, this_.version as version5_0_, this_.car_type as car3_5_0_, this_.comments as comments5_0_, this_.created_by as created5_5_0_, this_.date_created as date6_5_0_, this_.driver_id as driver7_5_0_, this_.drop_off_location_id as drop8_5_0_, this_.last_updated as last9_5_0_, this_.last_updated_by as last10_5_0_, this_.message_to_the_driver as message11_5_0_, this_.passenger_id as passenger12_5_0_, this_.pick_up_location_id as pick13_5_0_, this_.pick_up_location_complement as pick14_5_0_, this_.pickup_date_time as pickup15_5_0_, this_.rating as rating5_0_, this_.ride_status as ride17_5_0_, this_.tenant_id as tenant18_5_0_ from ride this_ where (this_.driver_id=?) order by this_.last_updated asc
Hibernate: select user0_.id as id8_0_, user0_.version as version8_0_, user0_.account_expired as account3_8_0_, user0_.account_locked as account4_8_0_, user0_.apns_token as apns5_8_0_, user0_.created_by as created6_8_0_, user0_.date_created as date7_8_0_, user0_.email as email8_0_, user0_.enabled as enabled8_0_, user0_.first_name as first10_8_0_, user0_.last_name as last11_8_0_, user0_.last_updated as last12_8_0_, user0_.last_updated_by as last13_8_0_, user0_.locale as locale8_0_, user0_.`password` as password15_8_0_, user0_.password_expired as password16_8_0_, user0_.phone as phone8_0_, user0_.tenant_id as tenant18_8_0_, user0_.username as username8_0_ from user user0_ where user0_.id=?
Hibernate: select driver0_.user_id as user1_2_0_, driver0_.version as version2_0_, driver0_.active_status as active3_2_0_, driver0_.car_type as car4_2_0_, driver0_.created_by as created5_2_0_, driver0_.date_created as date6_2_0_, driver0_.last_updated as last7_2_0_, driver0_.last_updated_by as last8_2_0_, driver0_.served_location_id as served9_2_0_, driver0_.tenant_id as tenant10_2_0_ from driver driver0_ where driver0_.user_id=?
Hibernate: select passenger0_.user_id as user1_1_0_, passenger0_.version as version1_0_, passenger0_.created_by as created3_1_0_, passenger0_.date_created as date4_1_0_, passenger0_.last_updated as last5_1_0_, passenger0_.last_updated_by as last6_1_0_, passenger0_.tenant_id as tenant7_1_0_ from passenger passenger0_ where passenger0_.user_id=?
Hibernate: select passenger0_.user_id as user1_1_0_, passenger0_.version as version1_0_, passenger0_.created_by as created3_1_0_, passenger0_.date_created as date4_1_0_, passenger0_.last_updated as last5_1_0_, passenger0_.last_updated_by as last6_1_0_, passenger0_.tenant_id as tenant7_1_0_ from passenger passenger0_ where passenger0_.user_id=?
Hibernate: select user0_.id as id8_0_, user0_.version as version8_0_, user0_.account_expired as account3_8_0_, user0_.account_locked as account4_8_0_, user0_.apns_token as apns5_8_0_, user0_.created_by as created6_8_0_, user0_.date_created as date7_8_0_, user0_.email as email8_0_, user0_.enabled as enabled8_0_, user0_.first_name as first10_8_0_, user0_.last_name as last11_8_0_, user0_.last_updated as last12_8_0_, user0_.last_updated_by as last13_8_0_, user0_.locale as locale8_0_, user0_.`password` as password15_8_0_, user0_.password_expired as password16_8_0_, user0_.phone as phone8_0_, user0_.tenant_id as tenant18_8_0_, user0_.username as username8_0_ from user user0_ where user0_.id=?
Hibernate: select driver0_.user_id as user1_2_0_, driver0_.version as version2_0_, driver0_.active_status as active3_2_0_, driver0_.car_type as car4_2_0_, driver0_.created_by as created5_2_0_, driver0_.date_created as date6_2_0_, driver0_.last_updated as last7_2_0_, driver0_.last_updated_by as last8_2_0_, driver0_.served_location_id as served9_2_0_, driver0_.tenant_id as tenant10_2_0_ from driver driver0_ where driver0_.user_id=?
Hibernate: select passenger0_.user_id as user1_1_0_, passenger0_.version as version1_0_, passenger0_.created_by as created3_1_0_, passenger0_.date_created as date4_1_0_, passenger0_.last_updated as last5_1_0_, passenger0_.last_updated_by as last6_1_0_, passenger0_.tenant_id as tenant7_1_0_ from passenger passenger0_ where passenger0_.user_id=?
Hibernate: select location0_.id as id0_0_, location0_.version as version0_0_, location0_.created_by as created3_0_0_, location0_.date_created as date4_0_0_, location0_.last_updated as last5_0_0_, location0_.last_updated_by as last6_0_0_, location0_.latitude as latitude0_0_, location0_.location_name as location8_0_0_, location0_.location_type as location9_0_0_, location0_.longitude as longitude0_0_, location0_.political_name as political11_0_0_, location0_.tenant_id as tenant12_0_0_ from location location0_ where location0_.id=?
Hibernate: select location0_.id as id0_0_, location0_.version as version0_0_, location0_.created_by as created3_0_0_, location0_.date_created as date4_0_0_, location0_.last_updated as last5_0_0_, location0_.last_updated_by as last6_0_0_, location0_.latitude as latitude0_0_, location0_.location_name as location8_0_0_, location0_.location_type as location9_0_0_, location0_.longitude as longitude0_0_, location0_.political_name as political11_0_0_, location0_.tenant_id as tenant12_0_0_ from location location0_ where location0_.id=?
Hibernate: select location0_.id as id0_0_, location0_.version as version0_0_, location0_.created_by as created3_0_0_, location0_.date_created as date4_0_0_, location0_.last_updated as last5_0_0_, location0_.last_updated_by as last6_0_0_, location0_.latitude as latitude0_0_, location0_.location_name as location8_0_0_, location0_.location_type as location9_0_0_, location0_.longitude as longitude0_0_, location0_.political_name as political11_0_0_, location0_.tenant_id as tenant12_0_0_ from location location0_ where location0_.id=?
Hibernate: select location0_.id as id0_0_, location0_.version as version0_0_, location0_.created_by as created3_0_0_, location0_.date_created as date4_0_0_, location0_.last_updated as last5_0_0_, location0_.last_updated_by as last6_0_0_, location0_.latitude as latitude0_0_, location0_.location_name as location8_0_0_, location0_.location_type as location9_0_0_, location0_.longitude as longitude0_0_, location0_.political_name as political11_0_0_, location0_.tenant_id as tenant12_0_0_ from location location0_ where location0_.id=?
Hibernate: select location0_.id as id0_0_, location0_.version as version0_0_, location0_.created_by as created3_0_0_, location0_.date_created as date4_0_0_, location0_.last_updated as last5_0_0_, location0_.last_updated_by as last6_0_0_, location0_.latitude as latitude0_0_, location0_.location_name as location8_0_0_, location0_.location_type as location9_0_0_, location0_.longitude as longitude0_0_, location0_.political_name as political11_0_0_, location0_.tenant_id as tenant12_0_0_ from location location0_ where location0_.id=?
Hibernate: select location0_.id as id0_0_, location0_.version as version0_0_, location0_.created_by as created3_0_0_, location0_.date_created as date4_0_0_, location0_.last_updated as last5_0_0_, location0_.last_updated_by as last6_0_0_, location0_.latitude as latitude0_0_, location0_.location_name as location8_0_0_, location0_.location_type as location9_0_0_, location0_.longitude as longitude0_0_, location0_.political_name as political11_0_0_, location0_.tenant_id as tenant12_0_0_ from location location0_ where location0_.id=?
Interceptor createPage: TopLevelWindow[name=""]
Content of web window [TopLevelWindow[name=""]] changed
== Response was 200 (OK) headers: ==============================================
================================================================================
== Content =====================================================================
{"rides":[{"id":2,"version":0,"rideStatus":{"code":"ASSIGNED","description":"Assigned"},"carType":{"code":"A_SEDAN","description":"Sedan"},"driver":{"id":6,"version":0,"username":"jgoodarm","firstName":"John","lastName":"Goodarm","phone":"800-800-2020","email":"jgoodarm@worldtaxi.com","driver":{"servedLocation":{"locationName":"Naperville","politicalName":"Illinois, United States","latitude":41.7858629,"longitude":-88.1472893,"locationType":"APPROXIMATE"},"carType":{"code":"B_VAN","description":"Van"},"activeStatus":{"code":"ENABLED","description":"Enabled"}}},"passenger":{"id":5,"version":1,"username":"jgoodrider","firstName":"John","lastName":"DecidedToBeADriver","phone":"773-329-1784","email":"jgoodrider@worldtaxi.com","driver":{"servedLocation":{"locationName":"Rua Major Lopes, 55","politicalName":"Belo Horizonte, MG, BR","latitude":-19.9413628,"longitude":-43.9373064,"locationType":"RANGE_INTERPOLATED"},"carType":{"code":"B_VAN","description":"Van"},"activeStatus":{"code":"ENABLED","description":"Enabled"}},"passenger":{}},"pickUpDateTime":"2013-03-13 20:10","pickUpLocation":{"locationName":"Functional Test Major Lopes, 55","politicalName":"Belo Horizonte, MG, BR","latitude":-19.9413628,"longitude":-43.9373064,"locationType":"RANGE_INTERPOLATED"},"dropOffLocation":{"locationName":"Naperville","politicalName":"Illinois, United States","latitude":41.7858629,"longitude":-88.1472893,"locationType":"APPROXIMATE"},"rating":null,"comments":null,"pickUpLocationComplement":"Close to Vest Ride 2","messageToTheDriver":"Please come fast ride 2"},{"id":4,"version":0,"rideStatus":{"code":"ASSIGNED","description":"Assigned"},"carType":{"code":"A_SEDAN","description":"Sedan"},"driver":{"id":6,"version":0,"username":"jgoodarm","firstName":"John","lastName":"Goodarm","phone":"800-800-2020","email":"jgoodarm@worldtaxi.com","driver":{"servedLocation":{"locationName":"Naperville","politicalName":"Illinois, United States","latitude":41.7858629,"longitude":-88.1472893,"locationType":"APPROXIMATE"},"carType":{"code":"B_VAN","description":"Van"},"activeStatus":{"code":"ENABLED","description":"Enabled"}}},"passenger":{"id":5,"version":1,"username":"jgoodrider","firstName":"John","lastName":"DecidedToBeADriver","phone":"773-329-1784","email":"jgoodrider@worldtaxi.com","driver":{"servedLocation":{"locationName":"Rua Major Lopes, 55","politicalName":"Belo Horizonte, MG, BR","latitude":-19.9413628,"longitude":-43.9373064,"locationType":"RANGE_INTERPOLATED"},"carType":{"code":"B_VAN","description":"Van"},"activeStatus":{"code":"ENABLED","description":"Enabled"}},"passenger":{}},"pickUpDateTime":"2013-03-13 20:10","pickUpLocation":{"locationName":"Contagem","politicalName":"Minas Gerais, Brazil","latitude":-19.9385599,"longitude":-44.0529377,"locationType":"APPROXIMATE"},"dropOffLocation":{"locationName":"Naperville","politicalName":"Illinois, United States","latitude":41.7858629,"longitude":-88.1472893,"locationType":"APPROXIMATE"},"rating":null,"comments":null,"pickUpLocationComplement":null,"messageToTheDriver":null}]}
================================================================================
#
--Output from testCreateRideENglish--
Switching to browser client [default]
Creating to new client [default] of type [class com.grailsrocks.functionaltest.client.BrowserClient]

== Making request POST http://localhost:8080/moovt/login/authenticateUser parameters: ==
== Request headers: ============================================================
Accept-Encoding: gzip, deflate
Content-Type: application/json
Accept: */*
== Content =====================================================================

				{"type":"Self","tenantname":"WorldTaxi","username":"jgoodrider","password":"Welcome!1"}
				
================================================================================
Hibernate: select this_.id as id3_0_, this_.version as version3_0_, this_.created_by as created3_3_0_, this_.date_created as date4_3_0_, this_.last_updated as last5_3_0_, this_.last_updated_by as last6_3_0_, this_.name as name3_0_ from tenant this_ where this_.name=? limit ?
Hibernate: select this_.id as id8_0_, this_.version as version8_0_, this_.account_expired as account3_8_0_, this_.account_locked as account4_8_0_, this_.apns_token as apns5_8_0_, this_.created_by as created6_8_0_, this_.date_created as date7_8_0_, this_.email as email8_0_, this_.enabled as enabled8_0_, this_.first_name as first10_8_0_, this_.last_name as last11_8_0_, this_.last_updated as last12_8_0_, this_.last_updated_by as last13_8_0_, this_.locale as locale8_0_, this_.`password` as password15_8_0_, this_.password_expired as password16_8_0_, this_.phone as phone8_0_, this_.tenant_id as tenant18_8_0_, this_.username as username8_0_ from user this_ where this_.tenant_id=? and this_.username=? limit ?
Hibernate: select driver0_.user_id as user1_2_0_, driver0_.version as version2_0_, driver0_.active_status as active3_2_0_, driver0_.car_type as car4_2_0_, driver0_.created_by as created5_2_0_, driver0_.date_created as date6_2_0_, driver0_.last_updated as last7_2_0_, driver0_.last_updated_by as last8_2_0_, driver0_.served_location_id as served9_2_0_, driver0_.tenant_id as tenant10_2_0_ from driver driver0_ where driver0_.user_id=?
Hibernate: select passenger0_.user_id as user1_1_0_, passenger0_.version as version1_0_, passenger0_.created_by as created3_1_0_, passenger0_.date_created as date4_1_0_, passenger0_.last_updated as last5_1_0_, passenger0_.last_updated_by as last6_1_0_, passenger0_.tenant_id as tenant7_1_0_ from passenger passenger0_ where passenger0_.user_id=?
Hibernate: select this_.role_id as role1_4_0_, this_.user_id as user2_4_0_, this_.created_by as created3_4_0_, this_.date_created as date4_4_0_, this_.last_updated as last5_4_0_, this_.last_updated_by as last6_4_0_, this_.tenant_id as tenant7_4_0_ from user_role this_ where this_.tenant_id=? and this_.user_id=?
Hibernate: select this_.role_id as role1_4_0_, this_.user_id as user2_4_0_, this_.created_by as created3_4_0_, this_.date_created as date4_4_0_, this_.last_updated as last5_4_0_, this_.last_updated_by as last6_4_0_, this_.tenant_id as tenant7_4_0_ from user_role this_ where this_.tenant_id=? and this_.user_id=?
ROLE_DRIVER
ROLE_PASSENGER
ROLE_RIDE_MGR
Interceptor createPage: TopLevelWindow[name=""]
Content of web window [TopLevelWindow[name=""]] changed
== Response was 200 (OK) headers: ==============================================
================================================================================
== Content =====================================================================
{"result":{"type":"USER","code":"SUCCESS","message":"Login successful."}, "additionalInfo":{"JSESSIONID":"15A131BA2612F964E675AF083981AAD8","userType":"PASSENGER"}}
================================================================================
#
== Making request POST http://localhost:8080/moovt/ride/createRide parameters: ==
== Request headers: ============================================================
Accept-Encoding: gzip, deflate
Content-Type: application/json
Accept: */*
== Content =====================================================================

{
  "id" : 0,
  "pickUpLocation" : {
    "locationName" : "Naperville",
    "longitude" : -88.14729,
    "latitude" : 41.78586,
    "politicalName" : "Illinois, United States",
    "locationType" : "APPROXIMATE"
  },
  "pickUpLocationComplement" : "",
  "comments" : "",
  "rating" : "",
  "dropOffLocation" : {
    "locationName" : "Wheaton",
    "longitude" : -88.10701,
    "latitude" : 41.86614,
    "politicalName" : "Illinois, United States",
    "locationType" : "APPROXIMATE"
  },
  "version" : 0,
  "messageToTheDriver" : "",
  "carType" : {
    "code" : "B_VAN",
    "description" : "Van"
  },
  "pickUpDateTime" : "2013-06-05 23:04"
}
				
================================================================================
Hibernate: select passenger0_.user_id as user1_1_0_, passenger0_.version as version1_0_, passenger0_.created_by as created3_1_0_, passenger0_.date_created as date4_1_0_, passenger0_.last_updated as last5_1_0_, passenger0_.last_updated_by as last6_1_0_, passenger0_.tenant_id as tenant7_1_0_ from passenger passenger0_ where passenger0_.user_id=?
Before Insert
Hibernate: insert into location (version, created_by, date_created, last_updated, last_updated_by, latitude, location_name, location_type, longitude, political_name, tenant_id) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Before Insert
Hibernate: insert into location (version, created_by, date_created, last_updated, last_updated_by, latitude, location_name, location_type, longitude, political_name, tenant_id) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: insert into ride (version, car_type, comments, created_by, date_created, driver_id, drop_off_location_id, last_updated, last_updated_by, message_to_the_driver, passenger_id, pick_up_location_id, pick_up_location_complement, pickup_date_time, rating, ride_status, tenant_id) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: SELECT d.user_id as driverId, 3956 * 2 * ASIN(SQRT( POWER(SIN((? - latitude) * pi()/180 / 2), 2) +COS(? * pi()/180) * COS(latitude * pi()/180) *POWER(SIN((? - longitude) * pi()/180 / 2), 2) )) as distance FROM  driver d, location l WHERE d.served_location_id = l.id AND l.longitude between ? and ? and l.latitude between ? and ? and d.car_type >= ? having distance < ? ORDER BY distance limit 10
Hibernate: select driver0_.user_id as user1_2_0_, driver0_.version as version2_0_, driver0_.active_status as active3_2_0_, driver0_.car_type as car4_2_0_, driver0_.created_by as created5_2_0_, driver0_.date_created as date6_2_0_, driver0_.last_updated as last7_2_0_, driver0_.last_updated_by as last8_2_0_, driver0_.served_location_id as served9_2_0_, driver0_.tenant_id as tenant10_2_0_ from driver driver0_ where driver0_.user_id=?
Hibernate: select user0_.id as id8_0_, user0_.version as version8_0_, user0_.account_expired as account3_8_0_, user0_.account_locked as account4_8_0_, user0_.apns_token as apns5_8_0_, user0_.created_by as created6_8_0_, user0_.date_created as date7_8_0_, user0_.email as email8_0_, user0_.enabled as enabled8_0_, user0_.first_name as first10_8_0_, user0_.last_name as last11_8_0_, user0_.last_updated as last12_8_0_, user0_.last_updated_by as last13_8_0_, user0_.locale as locale8_0_, user0_.`password` as password15_8_0_, user0_.password_expired as password16_8_0_, user0_.phone as phone8_0_, user0_.tenant_id as tenant18_8_0_, user0_.username as username8_0_ from user user0_ where user0_.id=?
Hibernate: select driver0_.user_id as user1_2_0_, driver0_.version as version2_0_, driver0_.active_status as active3_2_0_, driver0_.car_type as car4_2_0_, driver0_.created_by as created5_2_0_, driver0_.date_created as date6_2_0_, driver0_.last_updated as last7_2_0_, driver0_.last_updated_by as last8_2_0_, driver0_.served_location_id as served9_2_0_, driver0_.tenant_id as tenant10_2_0_ from driver driver0_ where driver0_.user_id=?
Hibernate: select passenger0_.user_id as user1_1_0_, passenger0_.version as version1_0_, passenger0_.created_by as created3_1_0_, passenger0_.date_created as date4_1_0_, passenger0_.last_updated as last5_1_0_, passenger0_.last_updated_by as last6_1_0_, passenger0_.tenant_id as tenant7_1_0_ from passenger passenger0_ where passenger0_.user_id=?
Hibernate: select user0_.id as id8_0_, user0_.version as version8_0_, user0_.account_expired as account3_8_0_, user0_.account_locked as account4_8_0_, user0_.apns_token as apns5_8_0_, user0_.created_by as created6_8_0_, user0_.date_created as date7_8_0_, user0_.email as email8_0_, user0_.enabled as enabled8_0_, user0_.first_name as first10_8_0_, user0_.last_name as last11_8_0_, user0_.last_updated as last12_8_0_, user0_.last_updated_by as last13_8_0_, user0_.locale as locale8_0_, user0_.`password` as password15_8_0_, user0_.password_expired as password16_8_0_, user0_.phone as phone8_0_, user0_.tenant_id as tenant18_8_0_, user0_.username as username8_0_ from user user0_ where user0_.id=?
Hibernate: select driver0_.user_id as user1_2_0_, driver0_.version as version2_0_, driver0_.active_status as active3_2_0_, driver0_.car_type as car4_2_0_, driver0_.created_by as created5_2_0_, driver0_.date_created as date6_2_0_, driver0_.last_updated as last7_2_0_, driver0_.last_updated_by as last8_2_0_, driver0_.served_location_id as served9_2_0_, driver0_.tenant_id as tenant10_2_0_ from driver driver0_ where driver0_.user_id=?
Hibernate: select passenger0_.user_id as user1_1_0_, passenger0_.version as version1_0_, passenger0_.created_by as created3_1_0_, passenger0_.date_created as date4_1_0_, passenger0_.last_updated as last5_1_0_, passenger0_.last_updated_by as last6_1_0_, passenger0_.tenant_id as tenant7_1_0_ from passenger passenger0_ where passenger0_.user_id=?
Hibernate: select location0_.id as id0_0_, location0_.version as version0_0_, location0_.created_by as created3_0_0_, location0_.date_created as date4_0_0_, location0_.last_updated as last5_0_0_, location0_.last_updated_by as last6_0_0_, location0_.latitude as latitude0_0_, location0_.location_name as location8_0_0_, location0_.location_type as location9_0_0_, location0_.longitude as longitude0_0_, location0_.political_name as political11_0_0_, location0_.tenant_id as tenant12_0_0_ from location location0_ where location0_.id=?
Hibernate: insert into notification_task (version, created_by, date_created, failed_reason, last_updated, last_updated_by, message, notification_from, notification_to, process_date, subject, task_status, task_type, tenant_id) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: select driver0_.user_id as user1_2_0_, driver0_.version as version2_0_, driver0_.active_status as active3_2_0_, driver0_.car_type as car4_2_0_, driver0_.created_by as created5_2_0_, driver0_.date_created as date6_2_0_, driver0_.last_updated as last7_2_0_, driver0_.last_updated_by as last8_2_0_, driver0_.served_location_id as served9_2_0_, driver0_.tenant_id as tenant10_2_0_ from driver driver0_ where driver0_.user_id=?
Hibernate: select user0_.id as id8_0_, user0_.version as version8_0_, user0_.account_expired as account3_8_0_, user0_.account_locked as account4_8_0_, user0_.apns_token as apns5_8_0_, user0_.created_by as created6_8_0_, user0_.date_created as date7_8_0_, user0_.email as email8_0_, user0_.enabled as enabled8_0_, user0_.first_name as first10_8_0_, user0_.last_name as last11_8_0_, user0_.last_updated as last12_8_0_, user0_.last_updated_by as last13_8_0_, user0_.locale as locale8_0_, user0_.`password` as password15_8_0_, user0_.password_expired as password16_8_0_, user0_.phone as phone8_0_, user0_.tenant_id as tenant18_8_0_, user0_.username as username8_0_ from user user0_ where user0_.id=?
Hibernate: select driver0_.user_id as user1_2_0_, driver0_.version as version2_0_, driver0_.active_status as active3_2_0_, driver0_.car_type as car4_2_0_, driver0_.created_by as created5_2_0_, driver0_.date_created as date6_2_0_, driver0_.last_updated as last7_2_0_, driver0_.last_updated_by as last8_2_0_, driver0_.served_location_id as served9_2_0_, driver0_.tenant_id as tenant10_2_0_ from driver driver0_ where driver0_.user_id=?
Hibernate: select passenger0_.user_id as user1_1_0_, passenger0_.version as version1_0_, passenger0_.created_by as created3_1_0_, passenger0_.date_created as date4_1_0_, passenger0_.last_updated as last5_1_0_, passenger0_.last_updated_by as last6_1_0_, passenger0_.tenant_id as tenant7_1_0_ from passenger passenger0_ where passenger0_.user_id=?
Hibernate: select location0_.id as id0_0_, location0_.version as version0_0_, location0_.created_by as created3_0_0_, location0_.date_created as date4_0_0_, location0_.last_updated as last5_0_0_, location0_.last_updated_by as last6_0_0_, location0_.latitude as latitude0_0_, location0_.location_name as location8_0_0_, location0_.location_type as location9_0_0_, location0_.longitude as longitude0_0_, location0_.political_name as political11_0_0_, location0_.tenant_id as tenant12_0_0_ from location location0_ where location0_.id=?
Hibernate: insert into notification_task (version, created_by, date_created, failed_reason, last_updated, last_updated_by, message, notification_from, notification_to, process_date, subject, task_status, task_type, tenant_id) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: select driver0_.user_id as user1_2_0_, driver0_.version as version2_0_, driver0_.active_status as active3_2_0_, driver0_.car_type as car4_2_0_, driver0_.created_by as created5_2_0_, driver0_.date_created as date6_2_0_, driver0_.last_updated as last7_2_0_, driver0_.last_updated_by as last8_2_0_, driver0_.served_location_id as served9_2_0_, driver0_.tenant_id as tenant10_2_0_ from driver driver0_ where driver0_.user_id=?
Hibernate: select user0_.id as id8_0_, user0_.version as version8_0_, user0_.account_expired as account3_8_0_, user0_.account_locked as account4_8_0_, user0_.apns_token as apns5_8_0_, user0_.created_by as created6_8_0_, user0_.date_created as date7_8_0_, user0_.email as email8_0_, user0_.enabled as enabled8_0_, user0_.first_name as first10_8_0_, user0_.last_name as last11_8_0_, user0_.last_updated as last12_8_0_, user0_.last_updated_by as last13_8_0_, user0_.locale as locale8_0_, user0_.`password` as password15_8_0_, user0_.password_expired as password16_8_0_, user0_.phone as phone8_0_, user0_.tenant_id as tenant18_8_0_, user0_.username as username8_0_ from user user0_ where user0_.id=?
Hibernate: select driver0_.user_id as user1_2_0_, driver0_.version as version2_0_, driver0_.active_status as active3_2_0_, driver0_.car_type as car4_2_0_, driver0_.created_by as created5_2_0_, driver0_.date_created as date6_2_0_, driver0_.last_updated as last7_2_0_, driver0_.last_updated_by as last8_2_0_, driver0_.served_location_id as served9_2_0_, driver0_.tenant_id as tenant10_2_0_ from driver driver0_ where driver0_.user_id=?
Hibernate: select passenger0_.user_id as user1_1_0_, passenger0_.version as version1_0_, passenger0_.created_by as created3_1_0_, passenger0_.date_created as date4_1_0_, passenger0_.last_updated as last5_1_0_, passenger0_.last_updated_by as last6_1_0_, passenger0_.tenant_id as tenant7_1_0_ from passenger passenger0_ where passenger0_.user_id=?
Hibernate: select location0_.id as id0_0_, location0_.version as version0_0_, location0_.created_by as created3_0_0_, location0_.date_created as date4_0_0_, location0_.last_updated as last5_0_0_, location0_.last_updated_by as last6_0_0_, location0_.latitude as latitude0_0_, location0_.location_name as location8_0_0_, location0_.location_type as location9_0_0_, location0_.longitude as longitude0_0_, location0_.political_name as political11_0_0_, location0_.tenant_id as tenant12_0_0_ from location location0_ where location0_.id=?
Hibernate: insert into notification_task (version, created_by, date_created, failed_reason, last_updated, last_updated_by, message, notification_from, notification_to, process_date, subject, task_status, task_type, tenant_id) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: select driver0_.user_id as user1_2_0_, driver0_.version as version2_0_, driver0_.active_status as active3_2_0_, driver0_.car_type as car4_2_0_, driver0_.created_by as created5_2_0_, driver0_.date_created as date6_2_0_, driver0_.last_updated as last7_2_0_, driver0_.last_updated_by as last8_2_0_, driver0_.served_location_id as served9_2_0_, driver0_.tenant_id as tenant10_2_0_ from driver driver0_ where driver0_.user_id=?
Hibernate: select user0_.id as id8_0_, user0_.version as version8_0_, user0_.account_expired as account3_8_0_, user0_.account_locked as account4_8_0_, user0_.apns_token as apns5_8_0_, user0_.created_by as created6_8_0_, user0_.date_created as date7_8_0_, user0_.email as email8_0_, user0_.enabled as enabled8_0_, user0_.first_name as first10_8_0_, user0_.last_name as last11_8_0_, user0_.last_updated as last12_8_0_, user0_.last_updated_by as last13_8_0_, user0_.locale as locale8_0_, user0_.`password` as password15_8_0_, user0_.password_expired as password16_8_0_, user0_.phone as phone8_0_, user0_.tenant_id as tenant18_8_0_, user0_.username as username8_0_ from user user0_ where user0_.id=?
Hibernate: select driver0_.user_id as user1_2_0_, driver0_.version as version2_0_, driver0_.active_status as active3_2_0_, driver0_.car_type as car4_2_0_, driver0_.created_by as created5_2_0_, driver0_.date_created as date6_2_0_, driver0_.last_updated as last7_2_0_, driver0_.last_updated_by as last8_2_0_, driver0_.served_location_id as served9_2_0_, driver0_.tenant_id as tenant10_2_0_ from driver driver0_ where driver0_.user_id=?
Hibernate: select passenger0_.user_id as user1_1_0_, passenger0_.version as version1_0_, passenger0_.created_by as created3_1_0_, passenger0_.date_created as date4_1_0_, passenger0_.last_updated as last5_1_0_, passenger0_.last_updated_by as last6_1_0_, passenger0_.tenant_id as tenant7_1_0_ from passenger passenger0_ where passenger0_.user_id=?
Hibernate: select location0_.id as id0_0_, location0_.version as version0_0_, location0_.created_by as created3_0_0_, location0_.date_created as date4_0_0_, location0_.last_updated as last5_0_0_, location0_.last_updated_by as last6_0_0_, location0_.latitude as latitude0_0_, location0_.location_name as location8_0_0_, location0_.location_type as location9_0_0_, location0_.longitude as longitude0_0_, location0_.political_name as political11_0_0_, location0_.tenant_id as tenant12_0_0_ from location location0_ where location0_.id=?
Hibernate: insert into notification_task (version, created_by, date_created, failed_reason, last_updated, last_updated_by, message, notification_from, notification_to, process_date, subject, task_status, task_type, tenant_id) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: select driver0_.user_id as user1_2_0_, driver0_.version as version2_0_, driver0_.active_status as active3_2_0_, driver0_.car_type as car4_2_0_, driver0_.created_by as created5_2_0_, driver0_.date_created as date6_2_0_, driver0_.last_updated as last7_2_0_, driver0_.last_updated_by as last8_2_0_, driver0_.served_location_id as served9_2_0_, driver0_.tenant_id as tenant10_2_0_ from driver driver0_ where driver0_.user_id=?
Hibernate: select user0_.id as id8_0_, user0_.version as version8_0_, user0_.account_expired as account3_8_0_, user0_.account_locked as account4_8_0_, user0_.apns_token as apns5_8_0_, user0_.created_by as created6_8_0_, user0_.date_created as date7_8_0_, user0_.email as email8_0_, user0_.enabled as enabled8_0_, user0_.first_name as first10_8_0_, user0_.last_name as last11_8_0_, user0_.last_updated as last12_8_0_, user0_.last_updated_by as last13_8_0_, user0_.locale as locale8_0_, user0_.`password` as password15_8_0_, user0_.password_expired as password16_8_0_, user0_.phone as phone8_0_, user0_.tenant_id as tenant18_8_0_, user0_.username as username8_0_ from user user0_ where user0_.id=?
Hibernate: select driver0_.user_id as user1_2_0_, driver0_.version as version2_0_, driver0_.active_status as active3_2_0_, driver0_.car_type as car4_2_0_, driver0_.created_by as created5_2_0_, driver0_.date_created as date6_2_0_, driver0_.last_updated as last7_2_0_, driver0_.last_updated_by as last8_2_0_, driver0_.served_location_id as served9_2_0_, driver0_.tenant_id as tenant10_2_0_ from driver driver0_ where driver0_.user_id=?
Hibernate: select passenger0_.user_id as user1_1_0_, passenger0_.version as version1_0_, passenger0_.created_by as created3_1_0_, passenger0_.date_created as date4_1_0_, passenger0_.last_updated as last5_1_0_, passenger0_.last_updated_by as last6_1_0_, passenger0_.tenant_id as tenant7_1_0_ from passenger passenger0_ where passenger0_.user_id=?
Hibernate: select location0_.id as id0_0_, location0_.version as version0_0_, location0_.created_by as created3_0_0_, location0_.date_created as date4_0_0_, location0_.last_updated as last5_0_0_, location0_.last_updated_by as last6_0_0_, location0_.latitude as latitude0_0_, location0_.location_name as location8_0_0_, location0_.location_type as location9_0_0_, location0_.longitude as longitude0_0_, location0_.political_name as political11_0_0_, location0_.tenant_id as tenant12_0_0_ from location location0_ where location0_.id=?
Hibernate: insert into notification_task (version, created_by, date_created, failed_reason, last_updated, last_updated_by, message, notification_from, notification_to, process_date, subject, task_status, task_type, tenant_id) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: select driver0_.user_id as user1_2_0_, driver0_.version as version2_0_, driver0_.active_status as active3_2_0_, driver0_.car_type as car4_2_0_, driver0_.created_by as created5_2_0_, driver0_.date_created as date6_2_0_, driver0_.last_updated as last7_2_0_, driver0_.last_updated_by as last8_2_0_, driver0_.served_location_id as served9_2_0_, driver0_.tenant_id as tenant10_2_0_ from driver driver0_ where driver0_.user_id=?
Hibernate: select user0_.id as id8_0_, user0_.version as version8_0_, user0_.account_expired as account3_8_0_, user0_.account_locked as account4_8_0_, user0_.apns_token as apns5_8_0_, user0_.created_by as created6_8_0_, user0_.date_created as date7_8_0_, user0_.email as email8_0_, user0_.enabled as enabled8_0_, user0_.first_name as first10_8_0_, user0_.last_name as last11_8_0_, user0_.last_updated as last12_8_0_, user0_.last_updated_by as last13_8_0_, user0_.locale as locale8_0_, user0_.`password` as password15_8_0_, user0_.password_expired as password16_8_0_, user0_.phone as phone8_0_, user0_.tenant_id as tenant18_8_0_, user0_.username as username8_0_ from user user0_ where user0_.id=?
Hibernate: select driver0_.user_id as user1_2_0_, driver0_.version as version2_0_, driver0_.active_status as active3_2_0_, driver0_.car_type as car4_2_0_, driver0_.created_by as created5_2_0_, driver0_.date_created as date6_2_0_, driver0_.last_updated as last7_2_0_, driver0_.last_updated_by as last8_2_0_, driver0_.served_location_id as served9_2_0_, driver0_.tenant_id as tenant10_2_0_ from driver driver0_ where driver0_.user_id=?
Hibernate: select passenger0_.user_id as user1_1_0_, passenger0_.version as version1_0_, passenger0_.created_by as created3_1_0_, passenger0_.date_created as date4_1_0_, passenger0_.last_updated as last5_1_0_, passenger0_.last_updated_by as last6_1_0_, passenger0_.tenant_id as tenant7_1_0_ from passenger passenger0_ where passenger0_.user_id=?
Hibernate: select location0_.id as id0_0_, location0_.version as version0_0_, location0_.created_by as created3_0_0_, location0_.date_created as date4_0_0_, location0_.last_updated as last5_0_0_, location0_.last_updated_by as last6_0_0_, location0_.latitude as latitude0_0_, location0_.location_name as location8_0_0_, location0_.location_type as location9_0_0_, location0_.longitude as longitude0_0_, location0_.political_name as political11_0_0_, location0_.tenant_id as tenant12_0_0_ from location location0_ where location0_.id=?
Hibernate: insert into notification_task (version, created_by, date_created, failed_reason, last_updated, last_updated_by, message, notification_from, notification_to, process_date, subject, task_status, task_type, tenant_id) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: select driver0_.user_id as user1_2_0_, driver0_.version as version2_0_, driver0_.active_status as active3_2_0_, driver0_.car_type as car4_2_0_, driver0_.created_by as created5_2_0_, driver0_.date_created as date6_2_0_, driver0_.last_updated as last7_2_0_, driver0_.last_updated_by as last8_2_0_, driver0_.served_location_id as served9_2_0_, driver0_.tenant_id as tenant10_2_0_ from driver driver0_ where driver0_.user_id=?
Hibernate: select user0_.id as id8_0_, user0_.version as version8_0_, user0_.account_expired as account3_8_0_, user0_.account_locked as account4_8_0_, user0_.apns_token as apns5_8_0_, user0_.created_by as created6_8_0_, user0_.date_created as date7_8_0_, user0_.email as email8_0_, user0_.enabled as enabled8_0_, user0_.first_name as first10_8_0_, user0_.last_name as last11_8_0_, user0_.last_updated as last12_8_0_, user0_.last_updated_by as last13_8_0_, user0_.locale as locale8_0_, user0_.`password` as password15_8_0_, user0_.password_expired as password16_8_0_, user0_.phone as phone8_0_, user0_.tenant_id as tenant18_8_0_, user0_.username as username8_0_ from user user0_ where user0_.id=?
Hibernate: select driver0_.user_id as user1_2_0_, driver0_.version as version2_0_, driver0_.active_status as active3_2_0_, driver0_.car_type as car4_2_0_, driver0_.created_by as created5_2_0_, driver0_.date_created as date6_2_0_, driver0_.last_updated as last7_2_0_, driver0_.last_updated_by as last8_2_0_, driver0_.served_location_id as served9_2_0_, driver0_.tenant_id as tenant10_2_0_ from driver driver0_ where driver0_.user_id=?
Hibernate: select passenger0_.user_id as user1_1_0_, passenger0_.version as version1_0_, passenger0_.created_by as created3_1_0_, passenger0_.date_created as date4_1_0_, passenger0_.last_updated as last5_1_0_, passenger0_.last_updated_by as last6_1_0_, passenger0_.tenant_id as tenant7_1_0_ from passenger passenger0_ where passenger0_.user_id=?
Hibernate: select location0_.id as id0_0_, location0_.version as version0_0_, location0_.created_by as created3_0_0_, location0_.date_created as date4_0_0_, location0_.last_updated as last5_0_0_, location0_.last_updated_by as last6_0_0_, location0_.latitude as latitude0_0_, location0_.location_name as location8_0_0_, location0_.location_type as location9_0_0_, location0_.longitude as longitude0_0_, location0_.political_name as political11_0_0_, location0_.tenant_id as tenant12_0_0_ from location location0_ where location0_.id=?
Hibernate: insert into notification_task (version, created_by, date_created, failed_reason, last_updated, last_updated_by, message, notification_from, notification_to, process_date, subject, task_status, task_type, tenant_id) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: select driver0_.user_id as user1_2_0_, driver0_.version as version2_0_, driver0_.active_status as active3_2_0_, driver0_.car_type as car4_2_0_, driver0_.created_by as created5_2_0_, driver0_.date_created as date6_2_0_, driver0_.last_updated as last7_2_0_, driver0_.last_updated_by as last8_2_0_, driver0_.served_location_id as served9_2_0_, driver0_.tenant_id as tenant10_2_0_ from driver driver0_ where driver0_.user_id=?
Hibernate: select user0_.id as id8_0_, user0_.version as version8_0_, user0_.account_expired as account3_8_0_, user0_.account_locked as account4_8_0_, user0_.apns_token as apns5_8_0_, user0_.created_by as created6_8_0_, user0_.date_created as date7_8_0_, user0_.email as email8_0_, user0_.enabled as enabled8_0_, user0_.first_name as first10_8_0_, user0_.last_name as last11_8_0_, user0_.last_updated as last12_8_0_, user0_.last_updated_by as last13_8_0_, user0_.locale as locale8_0_, user0_.`password` as password15_8_0_, user0_.password_expired as password16_8_0_, user0_.phone as phone8_0_, user0_.tenant_id as tenant18_8_0_, user0_.username as username8_0_ from user user0_ where user0_.id=?
Hibernate: select driver0_.user_id as user1_2_0_, driver0_.version as version2_0_, driver0_.active_status as active3_2_0_, driver0_.car_type as car4_2_0_, driver0_.created_by as created5_2_0_, driver0_.date_created as date6_2_0_, driver0_.last_updated as last7_2_0_, driver0_.last_updated_by as last8_2_0_, driver0_.served_location_id as served9_2_0_, driver0_.tenant_id as tenant10_2_0_ from driver driver0_ where driver0_.user_id=?
Hibernate: select passenger0_.user_id as user1_1_0_, passenger0_.version as version1_0_, passenger0_.created_by as created3_1_0_, passenger0_.date_created as date4_1_0_, passenger0_.last_updated as last5_1_0_, passenger0_.last_updated_by as last6_1_0_, passenger0_.tenant_id as tenant7_1_0_ from passenger passenger0_ where passenger0_.user_id=?
Hibernate: select location0_.id as id0_0_, location0_.version as version0_0_, location0_.created_by as created3_0_0_, location0_.date_created as date4_0_0_, location0_.last_updated as last5_0_0_, location0_.last_updated_by as last6_0_0_, location0_.latitude as latitude0_0_, location0_.location_name as location8_0_0_, location0_.location_type as location9_0_0_, location0_.longitude as longitude0_0_, location0_.political_name as political11_0_0_, location0_.tenant_id as tenant12_0_0_ from location location0_ where location0_.id=?
Hibernate: insert into notification_task (version, created_by, date_created, failed_reason, last_updated, last_updated_by, message, notification_from, notification_to, process_date, subject, task_status, task_type, tenant_id) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Interceptor createPage: TopLevelWindow[name=""]
Content of web window [TopLevelWindow[name=""]] changed
== Response was 200 (OK) headers: ==============================================
================================================================================
== Content =====================================================================
{"result":{"type":"USER","code":"SUCCESS","message":"Ride #9 created and sent to 8 drivers. "}}
================================================================================
#
--Output from testCloneRide--
Switching to browser client [default]
Creating to new client [default] of type [class com.grailsrocks.functionaltest.client.BrowserClient]

== Making request POST http://localhost:8080/moovt/login/authenticateUser parameters: ==
== Request headers: ============================================================
Accept-Encoding: gzip, deflate
Content-Type: application/json
Accept: */*
== Content =====================================================================

				{"type":"Self","tenantname":"WorldTaxi","username":"jgoodrider","password":"Welcome!1"}
				
================================================================================
Hibernate: select this_.id as id3_0_, this_.version as version3_0_, this_.created_by as created3_3_0_, this_.date_created as date4_3_0_, this_.last_updated as last5_3_0_, this_.last_updated_by as last6_3_0_, this_.name as name3_0_ from tenant this_ where this_.name=? limit ?
Hibernate: select this_.id as id8_0_, this_.version as version8_0_, this_.account_expired as account3_8_0_, this_.account_locked as account4_8_0_, this_.apns_token as apns5_8_0_, this_.created_by as created6_8_0_, this_.date_created as date7_8_0_, this_.email as email8_0_, this_.enabled as enabled8_0_, this_.first_name as first10_8_0_, this_.last_name as last11_8_0_, this_.last_updated as last12_8_0_, this_.last_updated_by as last13_8_0_, this_.locale as locale8_0_, this_.`password` as password15_8_0_, this_.password_expired as password16_8_0_, this_.phone as phone8_0_, this_.tenant_id as tenant18_8_0_, this_.username as username8_0_ from user this_ where this_.tenant_id=? and this_.username=? limit ?
Hibernate: select driver0_.user_id as user1_2_0_, driver0_.version as version2_0_, driver0_.active_status as active3_2_0_, driver0_.car_type as car4_2_0_, driver0_.created_by as created5_2_0_, driver0_.date_created as date6_2_0_, driver0_.last_updated as last7_2_0_, driver0_.last_updated_by as last8_2_0_, driver0_.served_location_id as served9_2_0_, driver0_.tenant_id as tenant10_2_0_ from driver driver0_ where driver0_.user_id=?
Hibernate: select passenger0_.user_id as user1_1_0_, passenger0_.version as version1_0_, passenger0_.created_by as created3_1_0_, passenger0_.date_created as date4_1_0_, passenger0_.last_updated as last5_1_0_, passenger0_.last_updated_by as last6_1_0_, passenger0_.tenant_id as tenant7_1_0_ from passenger passenger0_ where passenger0_.user_id=?
Hibernate: select this_.role_id as role1_4_0_, this_.user_id as user2_4_0_, this_.created_by as created3_4_0_, this_.date_created as date4_4_0_, this_.last_updated as last5_4_0_, this_.last_updated_by as last6_4_0_, this_.tenant_id as tenant7_4_0_ from user_role this_ where this_.tenant_id=? and this_.user_id=?
Hibernate: select this_.role_id as role1_4_0_, this_.user_id as user2_4_0_, this_.created_by as created3_4_0_, this_.date_created as date4_4_0_, this_.last_updated as last5_4_0_, this_.last_updated_by as last6_4_0_, this_.tenant_id as tenant7_4_0_ from user_role this_ where this_.tenant_id=? and this_.user_id=?
ROLE_DRIVER
ROLE_PASSENGER
ROLE_RIDE_MGR
Interceptor createPage: TopLevelWindow[name=""]
Content of web window [TopLevelWindow[name=""]] changed
== Response was 200 (OK) headers: ==============================================
================================================================================
== Content =====================================================================
{"result":{"type":"USER","code":"SUCCESS","message":"Login successful."}, "additionalInfo":{"JSESSIONID":"7082D79B3CB2C35CB63A0722AFFA4205","userType":"PASSENGER"}}
================================================================================
#
== Making request POST http://localhost:8080/moovt/ride/cloneRide parameters: ==
== Request headers: ============================================================
Accept-Encoding: gzip, deflate
Content-Type: application/json
Accept: */*
== Content =====================================================================

{"id":"5"}				
================================================================================
Hibernate: select passenger0_.user_id as user1_1_0_, passenger0_.version as version1_0_, passenger0_.created_by as created3_1_0_, passenger0_.date_created as date4_1_0_, passenger0_.last_updated as last5_1_0_, passenger0_.last_updated_by as last6_1_0_, passenger0_.tenant_id as tenant7_1_0_ from passenger passenger0_ where passenger0_.user_id=?
Hibernate: select ride0_.id as id5_0_, ride0_.version as version5_0_, ride0_.car_type as car3_5_0_, ride0_.comments as comments5_0_, ride0_.created_by as created5_5_0_, ride0_.date_created as date6_5_0_, ride0_.driver_id as driver7_5_0_, ride0_.drop_off_location_id as drop8_5_0_, ride0_.last_updated as last9_5_0_, ride0_.last_updated_by as last10_5_0_, ride0_.message_to_the_driver as message11_5_0_, ride0_.passenger_id as passenger12_5_0_, ride0_.pick_up_location_id as pick13_5_0_, ride0_.pick_up_location_complement as pick14_5_0_, ride0_.pickup_date_time as pickup15_5_0_, ride0_.rating as rating5_0_, ride0_.ride_status as ride17_5_0_, ride0_.tenant_id as tenant18_5_0_ from ride ride0_ where ride0_.id=?
Hibernate: select location0_.id as id0_0_, location0_.version as version0_0_, location0_.created_by as created3_0_0_, location0_.date_created as date4_0_0_, location0_.last_updated as last5_0_0_, location0_.last_updated_by as last6_0_0_, location0_.latitude as latitude0_0_, location0_.location_name as location8_0_0_, location0_.location_type as location9_0_0_, location0_.longitude as longitude0_0_, location0_.political_name as political11_0_0_, location0_.tenant_id as tenant12_0_0_ from location location0_ where location0_.id=?
Hibernate: select location0_.id as id0_0_, location0_.version as version0_0_, location0_.created_by as created3_0_0_, location0_.date_created as date4_0_0_, location0_.last_updated as last5_0_0_, location0_.last_updated_by as last6_0_0_, location0_.latitude as latitude0_0_, location0_.location_name as location8_0_0_, location0_.location_type as location9_0_0_, location0_.longitude as longitude0_0_, location0_.political_name as political11_0_0_, location0_.tenant_id as tenant12_0_0_ from location location0_ where location0_.id=?
Hibernate: select user0_.id as id8_0_, user0_.version as version8_0_, user0_.account_expired as account3_8_0_, user0_.account_locked as account4_8_0_, user0_.apns_token as apns5_8_0_, user0_.created_by as created6_8_0_, user0_.date_created as date7_8_0_, user0_.email as email8_0_, user0_.enabled as enabled8_0_, user0_.first_name as first10_8_0_, user0_.last_name as last11_8_0_, user0_.last_updated as last12_8_0_, user0_.last_updated_by as last13_8_0_, user0_.locale as locale8_0_, user0_.`password` as password15_8_0_, user0_.password_expired as password16_8_0_, user0_.phone as phone8_0_, user0_.tenant_id as tenant18_8_0_, user0_.username as username8_0_ from user user0_ where user0_.id=?
Hibernate: select driver0_.user_id as user1_2_0_, driver0_.version as version2_0_, driver0_.active_status as active3_2_0_, driver0_.car_type as car4_2_0_, driver0_.created_by as created5_2_0_, driver0_.date_created as date6_2_0_, driver0_.last_updated as last7_2_0_, driver0_.last_updated_by as last8_2_0_, driver0_.served_location_id as served9_2_0_, driver0_.tenant_id as tenant10_2_0_ from driver driver0_ where driver0_.user_id=?
Hibernate: select passenger0_.user_id as user1_1_0_, passenger0_.version as version1_0_, passenger0_.created_by as created3_1_0_, passenger0_.date_created as date4_1_0_, passenger0_.last_updated as last5_1_0_, passenger0_.last_updated_by as last6_1_0_, passenger0_.tenant_id as tenant7_1_0_ from passenger passenger0_ where passenger0_.user_id=?
Hibernate: select location0_.id as id0_0_, location0_.version as version0_0_, location0_.created_by as created3_0_0_, location0_.date_created as date4_0_0_, location0_.last_updated as last5_0_0_, location0_.last_updated_by as last6_0_0_, location0_.latitude as latitude0_0_, location0_.location_name as location8_0_0_, location0_.location_type as location9_0_0_, location0_.longitude as longitude0_0_, location0_.political_name as political11_0_0_, location0_.tenant_id as tenant12_0_0_ from location location0_ where location0_.id=?
Interceptor createPage: TopLevelWindow[name=""]
Content of web window [TopLevelWindow[name=""]] changed
== Response was 200 (OK) headers: ==============================================
================================================================================
== Content =====================================================================
{"ride":{"id":null,"version":null,"rideStatus":{"code":"UNASSIGNED","description":"Unassigned"},"carType":{"code":"A_SEDAN","description":"Sedan"},"driver":null,"passenger":{"id":5,"version":1,"username":"jgoodrider","firstName":"John","lastName":"DecidedToBeADriver","phone":"773-329-1784","email":"jgoodrider@worldtaxi.com","driver":{"servedLocation":{"locationName":"Rua Major Lopes, 55","politicalName":"Belo Horizonte, MG, BR","latitude":-19.9413628,"longitude":-43.9373064,"locationType":"RANGE_INTERPOLATED"},"carType":{"code":"B_VAN","description":"Van"},"activeStatus":{"code":"ENABLED","description":"Enabled"}},"passenger":{}},"pickUpDateTime":"2013-03-13 20:10","pickUpLocation":{"locationName":"Contagem","politicalName":"Minas Gerais, Brazil","latitude":-19.9385599,"longitude":-44.0529377,"locationType":"APPROXIMATE"},"dropOffLocation":{"locationName":"Naperville","politicalName":"Illinois, United States","latitude":41.7858629,"longitude":-88.1472893,"locationType":"APPROXIMATE"},"rating":3.5,"comments":"Great Driver","pickUpLocationComplement":"Close to Vest Ride 5","messageToTheDriver":"Please come fast Ride 5"}}
================================================================================
#
--Output from testCloneRideBadMessage--
Switching to browser client [default]
Creating to new client [default] of type [class com.grailsrocks.functionaltest.client.BrowserClient]

== Making request POST http://localhost:8080/moovt/login/authenticateUser parameters: ==
== Request headers: ============================================================
Accept-Encoding: gzip, deflate
Content-Type: application/json
Accept: */*
== Content =====================================================================

				{"type":"Self","tenantname":"WorldTaxi","username":"jgoodrider","password":"Welcome!1"}
				
================================================================================
Hibernate: select this_.id as id3_0_, this_.version as version3_0_, this_.created_by as created3_3_0_, this_.date_created as date4_3_0_, this_.last_updated as last5_3_0_, this_.last_updated_by as last6_3_0_, this_.name as name3_0_ from tenant this_ where this_.name=? limit ?
Hibernate: select this_.id as id8_0_, this_.version as version8_0_, this_.account_expired as account3_8_0_, this_.account_locked as account4_8_0_, this_.apns_token as apns5_8_0_, this_.created_by as created6_8_0_, this_.date_created as date7_8_0_, this_.email as email8_0_, this_.enabled as enabled8_0_, this_.first_name as first10_8_0_, this_.last_name as last11_8_0_, this_.last_updated as last12_8_0_, this_.last_updated_by as last13_8_0_, this_.locale as locale8_0_, this_.`password` as password15_8_0_, this_.password_expired as password16_8_0_, this_.phone as phone8_0_, this_.tenant_id as tenant18_8_0_, this_.username as username8_0_ from user this_ where this_.tenant_id=? and this_.username=? limit ?
Hibernate: select driver0_.user_id as user1_2_0_, driver0_.version as version2_0_, driver0_.active_status as active3_2_0_, driver0_.car_type as car4_2_0_, driver0_.created_by as created5_2_0_, driver0_.date_created as date6_2_0_, driver0_.last_updated as last7_2_0_, driver0_.last_updated_by as last8_2_0_, driver0_.served_location_id as served9_2_0_, driver0_.tenant_id as tenant10_2_0_ from driver driver0_ where driver0_.user_id=?
Hibernate: select passenger0_.user_id as user1_1_0_, passenger0_.version as version1_0_, passenger0_.created_by as created3_1_0_, passenger0_.date_created as date4_1_0_, passenger0_.last_updated as last5_1_0_, passenger0_.last_updated_by as last6_1_0_, passenger0_.tenant_id as tenant7_1_0_ from passenger passenger0_ where passenger0_.user_id=?
Hibernate: select this_.role_id as role1_4_0_, this_.user_id as user2_4_0_, this_.created_by as created3_4_0_, this_.date_created as date4_4_0_, this_.last_updated as last5_4_0_, this_.last_updated_by as last6_4_0_, this_.tenant_id as tenant7_4_0_ from user_role this_ where this_.tenant_id=? and this_.user_id=?
Hibernate: select this_.role_id as role1_4_0_, this_.user_id as user2_4_0_, this_.created_by as created3_4_0_, this_.date_created as date4_4_0_, this_.last_updated as last5_4_0_, this_.last_updated_by as last6_4_0_, this_.tenant_id as tenant7_4_0_ from user_role this_ where this_.tenant_id=? and this_.user_id=?
ROLE_DRIVER
ROLE_PASSENGER
ROLE_RIDE_MGR
Interceptor createPage: TopLevelWindow[name=""]
Content of web window [TopLevelWindow[name=""]] changed
== Response was 200 (OK) headers: ==============================================
================================================================================
== Content =====================================================================
{"result":{"type":"USER","code":"SUCCESS","message":"Login successful."}, "additionalInfo":{"JSESSIONID":"DB9BBC9BF7CE676702EEBB5A2B884F41","userType":"PASSENGER"}}
================================================================================
#
== Making request POST http://localhost:8080/moovt/ride/cloneRide parameters: ==
== Request headers: ============================================================
Accept-Encoding: gzip, deflate
Content-Type: application/json
Accept: */*
== Content =====================================================================

{"idx":"5"}
				
================================================================================
Hibernate: select passenger0_.user_id as user1_1_0_, passenger0_.version as version1_0_, passenger0_.created_by as created3_1_0_, passenger0_.date_created as date4_1_0_, passenger0_.last_updated as last5_1_0_, passenger0_.last_updated_by as last6_1_0_, passenger0_.tenant_id as tenant7_1_0_ from passenger passenger0_ where passenger0_.user_id=?
Interceptor createPage: TopLevelWindow[name=""]
Content of web window [TopLevelWindow[name=""]] changed
== Response was 200 (OK) headers: ==============================================
================================================================================
== Content =====================================================================
{"result":{"type":"SYSTEM","code":"ERROR","message":"JSONObject[\"id\"] not found."}}
================================================================================
#
--Output from testCloseRideSuccessEnglish--
Switching to browser client [default]
Creating to new client [default] of type [class com.grailsrocks.functionaltest.client.BrowserClient]

== Making request POST http://localhost:8080/moovt/login/authenticateUser parameters: ==
== Request headers: ============================================================
Accept-Encoding: gzip, deflate
Content-Type: application/json
Accept: */*
== Content =====================================================================

				{"type":"Self","tenantname":"WorldTaxi","username":"jgoodrider","password":"Welcome!1"}
				
================================================================================
Hibernate: select this_.id as id3_0_, this_.version as version3_0_, this_.created_by as created3_3_0_, this_.date_created as date4_3_0_, this_.last_updated as last5_3_0_, this_.last_updated_by as last6_3_0_, this_.name as name3_0_ from tenant this_ where this_.name=? limit ?
Hibernate: select this_.id as id8_0_, this_.version as version8_0_, this_.account_expired as account3_8_0_, this_.account_locked as account4_8_0_, this_.apns_token as apns5_8_0_, this_.created_by as created6_8_0_, this_.date_created as date7_8_0_, this_.email as email8_0_, this_.enabled as enabled8_0_, this_.first_name as first10_8_0_, this_.last_name as last11_8_0_, this_.last_updated as last12_8_0_, this_.last_updated_by as last13_8_0_, this_.locale as locale8_0_, this_.`password` as password15_8_0_, this_.password_expired as password16_8_0_, this_.phone as phone8_0_, this_.tenant_id as tenant18_8_0_, this_.username as username8_0_ from user this_ where this_.tenant_id=? and this_.username=? limit ?
Hibernate: select driver0_.user_id as user1_2_0_, driver0_.version as version2_0_, driver0_.active_status as active3_2_0_, driver0_.car_type as car4_2_0_, driver0_.created_by as created5_2_0_, driver0_.date_created as date6_2_0_, driver0_.last_updated as last7_2_0_, driver0_.last_updated_by as last8_2_0_, driver0_.served_location_id as served9_2_0_, driver0_.tenant_id as tenant10_2_0_ from driver driver0_ where driver0_.user_id=?
Hibernate: select passenger0_.user_id as user1_1_0_, passenger0_.version as version1_0_, passenger0_.created_by as created3_1_0_, passenger0_.date_created as date4_1_0_, passenger0_.last_updated as last5_1_0_, passenger0_.last_updated_by as last6_1_0_, passenger0_.tenant_id as tenant7_1_0_ from passenger passenger0_ where passenger0_.user_id=?
Hibernate: select this_.role_id as role1_4_0_, this_.user_id as user2_4_0_, this_.created_by as created3_4_0_, this_.date_created as date4_4_0_, this_.last_updated as last5_4_0_, this_.last_updated_by as last6_4_0_, this_.tenant_id as tenant7_4_0_ from user_role this_ where this_.tenant_id=? and this_.user_id=?
Hibernate: select this_.role_id as role1_4_0_, this_.user_id as user2_4_0_, this_.created_by as created3_4_0_, this_.date_created as date4_4_0_, this_.last_updated as last5_4_0_, this_.last_updated_by as last6_4_0_, this_.tenant_id as tenant7_4_0_ from user_role this_ where this_.tenant_id=? and this_.user_id=?
ROLE_DRIVER
ROLE_PASSENGER
ROLE_RIDE_MGR
Interceptor createPage: TopLevelWindow[name=""]
Content of web window [TopLevelWindow[name=""]] changed
== Response was 200 (OK) headers: ==============================================
================================================================================
== Content =====================================================================
{"result":{"type":"USER","code":"SUCCESS","message":"Login successful."}, "additionalInfo":{"JSESSIONID":"99B28F4C1F7141995AA8A83F6CAFB231","userType":"PASSENGER"}}
================================================================================
#
== Making request POST http://localhost:8080/moovt/ride/closeRide parameters: ==
== Request headers: ============================================================
Accept-Encoding: gzip, deflate
Content-Type: application/json
Accept: */*
== Content =====================================================================

				{"id":"4","version":"1","rating":"5","comments":"Great ride!"}
				
================================================================================
Hibernate: select passenger0_.user_id as user1_1_0_, passenger0_.version as version1_0_, passenger0_.created_by as created3_1_0_, passenger0_.date_created as date4_1_0_, passenger0_.last_updated as last5_1_0_, passenger0_.last_updated_by as last6_1_0_, passenger0_.tenant_id as tenant7_1_0_ from passenger passenger0_ where passenger0_.user_id=?
Hibernate: select ride0_.id as id5_0_, ride0_.version as version5_0_, ride0_.car_type as car3_5_0_, ride0_.comments as comments5_0_, ride0_.created_by as created5_5_0_, ride0_.date_created as date6_5_0_, ride0_.driver_id as driver7_5_0_, ride0_.drop_off_location_id as drop8_5_0_, ride0_.last_updated as last9_5_0_, ride0_.last_updated_by as last10_5_0_, ride0_.message_to_the_driver as message11_5_0_, ride0_.passenger_id as passenger12_5_0_, ride0_.pick_up_location_id as pick13_5_0_, ride0_.pick_up_location_complement as pick14_5_0_, ride0_.pickup_date_time as pickup15_5_0_, ride0_.rating as rating5_0_, ride0_.ride_status as ride17_5_0_, ride0_.tenant_id as tenant18_5_0_ from ride ride0_ where ride0_.id=?
Hibernate: select driver0_.user_id as user1_2_0_, driver0_.version as version2_0_, driver0_.active_status as active3_2_0_, driver0_.car_type as car4_2_0_, driver0_.created_by as created5_2_0_, driver0_.date_created as date6_2_0_, driver0_.last_updated as last7_2_0_, driver0_.last_updated_by as last8_2_0_, driver0_.served_location_id as served9_2_0_, driver0_.tenant_id as tenant10_2_0_ from driver driver0_ where driver0_.user_id=?
Hibernate: select location0_.id as id0_0_, location0_.version as version0_0_, location0_.created_by as created3_0_0_, location0_.date_created as date4_0_0_, location0_.last_updated as last5_0_0_, location0_.last_updated_by as last6_0_0_, location0_.latitude as latitude0_0_, location0_.location_name as location8_0_0_, location0_.location_type as location9_0_0_, location0_.longitude as longitude0_0_, location0_.political_name as political11_0_0_, location0_.tenant_id as tenant12_0_0_ from location location0_ where location0_.id=?
Hibernate: select location0_.id as id0_0_, location0_.version as version0_0_, location0_.created_by as created3_0_0_, location0_.date_created as date4_0_0_, location0_.last_updated as last5_0_0_, location0_.last_updated_by as last6_0_0_, location0_.latitude as latitude0_0_, location0_.location_name as location8_0_0_, location0_.location_type as location9_0_0_, location0_.longitude as longitude0_0_, location0_.political_name as political11_0_0_, location0_.tenant_id as tenant12_0_0_ from location location0_ where location0_.id=?
Hibernate: update ride set version=?, car_type=?, comments=?, created_by=?, date_created=?, driver_id=?, drop_off_location_id=?, last_updated=?, last_updated_by=?, message_to_the_driver=?, passenger_id=?, pick_up_location_id=?, pick_up_location_complement=?, pickup_date_time=?, rating=?, ride_status=?, tenant_id=? where id=? and version=?
Hibernate: select user0_.id as id8_0_, user0_.version as version8_0_, user0_.account_expired as account3_8_0_, user0_.account_locked as account4_8_0_, user0_.apns_token as apns5_8_0_, user0_.created_by as created6_8_0_, user0_.date_created as date7_8_0_, user0_.email as email8_0_, user0_.enabled as enabled8_0_, user0_.first_name as first10_8_0_, user0_.last_name as last11_8_0_, user0_.last_updated as last12_8_0_, user0_.last_updated_by as last13_8_0_, user0_.locale as locale8_0_, user0_.`password` as password15_8_0_, user0_.password_expired as password16_8_0_, user0_.phone as phone8_0_, user0_.tenant_id as tenant18_8_0_, user0_.username as username8_0_ from user user0_ where user0_.id=?
Hibernate: select driver0_.user_id as user1_2_0_, driver0_.version as version2_0_, driver0_.active_status as active3_2_0_, driver0_.car_type as car4_2_0_, driver0_.created_by as created5_2_0_, driver0_.date_created as date6_2_0_, driver0_.last_updated as last7_2_0_, driver0_.last_updated_by as last8_2_0_, driver0_.served_location_id as served9_2_0_, driver0_.tenant_id as tenant10_2_0_ from driver driver0_ where driver0_.user_id=?
Hibernate: select passenger0_.user_id as user1_1_0_, passenger0_.version as version1_0_, passenger0_.created_by as created3_1_0_, passenger0_.date_created as date4_1_0_, passenger0_.last_updated as last5_1_0_, passenger0_.last_updated_by as last6_1_0_, passenger0_.tenant_id as tenant7_1_0_ from passenger passenger0_ where passenger0_.user_id=?
Hibernate: select user0_.id as id8_0_, user0_.version as version8_0_, user0_.account_expired as account3_8_0_, user0_.account_locked as account4_8_0_, user0_.apns_token as apns5_8_0_, user0_.created_by as created6_8_0_, user0_.date_created as date7_8_0_, user0_.email as email8_0_, user0_.enabled as enabled8_0_, user0_.first_name as first10_8_0_, user0_.last_name as last11_8_0_, user0_.last_updated as last12_8_0_, user0_.last_updated_by as last13_8_0_, user0_.locale as locale8_0_, user0_.`password` as password15_8_0_, user0_.password_expired as password16_8_0_, user0_.phone as phone8_0_, user0_.tenant_id as tenant18_8_0_, user0_.username as username8_0_ from user user0_ where user0_.id=?
Hibernate: select driver0_.user_id as user1_2_0_, driver0_.version as version2_0_, driver0_.active_status as active3_2_0_, driver0_.car_type as car4_2_0_, driver0_.created_by as created5_2_0_, driver0_.date_created as date6_2_0_, driver0_.last_updated as last7_2_0_, driver0_.last_updated_by as last8_2_0_, driver0_.served_location_id as served9_2_0_, driver0_.tenant_id as tenant10_2_0_ from driver driver0_ where driver0_.user_id=?
Hibernate: select passenger0_.user_id as user1_1_0_, passenger0_.version as version1_0_, passenger0_.created_by as created3_1_0_, passenger0_.date_created as date4_1_0_, passenger0_.last_updated as last5_1_0_, passenger0_.last_updated_by as last6_1_0_, passenger0_.tenant_id as tenant7_1_0_ from passenger passenger0_ where passenger0_.user_id=?
Hibernate: insert into notification_task (version, created_by, date_created, failed_reason, last_updated, last_updated_by, message, notification_from, notification_to, process_date, subject, task_status, task_type, tenant_id) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: insert into notification_task (version, created_by, date_created, failed_reason, last_updated, last_updated_by, message, notification_from, notification_to, process_date, subject, task_status, task_type, tenant_id) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Interceptor createPage: TopLevelWindow[name=""]
Content of web window [TopLevelWindow[name=""]] changed
== Response was 200 (OK) headers: ==============================================
================================================================================
== Content =====================================================================
{"result":{"type":"USER","code":"SUCCESS","message":"Ride 4 updated"}}{"result":{"type":"USER","code":"SUCCESS","message":"Ride 4 updated"}}
================================================================================
#
--Output from testCloseRideSuccessPortuguese--
Switching to browser client [default]
Creating to new client [default] of type [class com.grailsrocks.functionaltest.client.BrowserClient]

== Making request POST http://localhost:8080/moovt/login/authenticateUser parameters: ==
== Request headers: ============================================================
Accept-Encoding: gzip, deflate
Content-Type: application/json
Accept: */*
== Content =====================================================================

				{"type":"Self","tenantname":"WorldTaxi","username":"jgoodrider","password":"Welcome!1"}
				
================================================================================
Hibernate: select this_.id as id3_0_, this_.version as version3_0_, this_.created_by as created3_3_0_, this_.date_created as date4_3_0_, this_.last_updated as last5_3_0_, this_.last_updated_by as last6_3_0_, this_.name as name3_0_ from tenant this_ where this_.name=? limit ?
Hibernate: select this_.id as id8_0_, this_.version as version8_0_, this_.account_expired as account3_8_0_, this_.account_locked as account4_8_0_, this_.apns_token as apns5_8_0_, this_.created_by as created6_8_0_, this_.date_created as date7_8_0_, this_.email as email8_0_, this_.enabled as enabled8_0_, this_.first_name as first10_8_0_, this_.last_name as last11_8_0_, this_.last_updated as last12_8_0_, this_.last_updated_by as last13_8_0_, this_.locale as locale8_0_, this_.`password` as password15_8_0_, this_.password_expired as password16_8_0_, this_.phone as phone8_0_, this_.tenant_id as tenant18_8_0_, this_.username as username8_0_ from user this_ where this_.tenant_id=? and this_.username=? limit ?
Hibernate: select driver0_.user_id as user1_2_0_, driver0_.version as version2_0_, driver0_.active_status as active3_2_0_, driver0_.car_type as car4_2_0_, driver0_.created_by as created5_2_0_, driver0_.date_created as date6_2_0_, driver0_.last_updated as last7_2_0_, driver0_.last_updated_by as last8_2_0_, driver0_.served_location_id as served9_2_0_, driver0_.tenant_id as tenant10_2_0_ from driver driver0_ where driver0_.user_id=?
Hibernate: select passenger0_.user_id as user1_1_0_, passenger0_.version as version1_0_, passenger0_.created_by as created3_1_0_, passenger0_.date_created as date4_1_0_, passenger0_.last_updated as last5_1_0_, passenger0_.last_updated_by as last6_1_0_, passenger0_.tenant_id as tenant7_1_0_ from passenger passenger0_ where passenger0_.user_id=?
Hibernate: select this_.role_id as role1_4_0_, this_.user_id as user2_4_0_, this_.created_by as created3_4_0_, this_.date_created as date4_4_0_, this_.last_updated as last5_4_0_, this_.last_updated_by as last6_4_0_, this_.tenant_id as tenant7_4_0_ from user_role this_ where this_.tenant_id=? and this_.user_id=?
Hibernate: select this_.role_id as role1_4_0_, this_.user_id as user2_4_0_, this_.created_by as created3_4_0_, this_.date_created as date4_4_0_, this_.last_updated as last5_4_0_, this_.last_updated_by as last6_4_0_, this_.tenant_id as tenant7_4_0_ from user_role this_ where this_.tenant_id=? and this_.user_id=?
ROLE_DRIVER
ROLE_PASSENGER
ROLE_RIDE_MGR
Interceptor createPage: TopLevelWindow[name=""]
Content of web window [TopLevelWindow[name=""]] changed
== Response was 200 (OK) headers: ==============================================
================================================================================
== Content =====================================================================
{"result":{"type":"USER","code":"SUCCESS","message":"Login successful."}, "additionalInfo":{"JSESSIONID":"8F06CE82B0E4E5006A8FBBA253570EC5","userType":"PASSENGER"}}
================================================================================
#
== Making request POST http://localhost:8080/moovt/ride/closeRide parameters: ==
== Request headers: ============================================================
Accept-Language: pt-BR
Accept-Encoding: gzip, deflate
Content-Type: application/json
Accept: */*
== Content =====================================================================

				{"id":"2","version":"1","rating":"5","comments":"Bom motorista"}
				
================================================================================
Hibernate: select passenger0_.user_id as user1_1_0_, passenger0_.version as version1_0_, passenger0_.created_by as created3_1_0_, passenger0_.date_created as date4_1_0_, passenger0_.last_updated as last5_1_0_, passenger0_.last_updated_by as last6_1_0_, passenger0_.tenant_id as tenant7_1_0_ from passenger passenger0_ where passenger0_.user_id=?
Hibernate: select ride0_.id as id5_0_, ride0_.version as version5_0_, ride0_.car_type as car3_5_0_, ride0_.comments as comments5_0_, ride0_.created_by as created5_5_0_, ride0_.date_created as date6_5_0_, ride0_.driver_id as driver7_5_0_, ride0_.drop_off_location_id as drop8_5_0_, ride0_.last_updated as last9_5_0_, ride0_.last_updated_by as last10_5_0_, ride0_.message_to_the_driver as message11_5_0_, ride0_.passenger_id as passenger12_5_0_, ride0_.pick_up_location_id as pick13_5_0_, ride0_.pick_up_location_complement as pick14_5_0_, ride0_.pickup_date_time as pickup15_5_0_, ride0_.rating as rating5_0_, ride0_.ride_status as ride17_5_0_, ride0_.tenant_id as tenant18_5_0_ from ride ride0_ where ride0_.id=?
Hibernate: select driver0_.user_id as user1_2_0_, driver0_.version as version2_0_, driver0_.active_status as active3_2_0_, driver0_.car_type as car4_2_0_, driver0_.created_by as created5_2_0_, driver0_.date_created as date6_2_0_, driver0_.last_updated as last7_2_0_, driver0_.last_updated_by as last8_2_0_, driver0_.served_location_id as served9_2_0_, driver0_.tenant_id as tenant10_2_0_ from driver driver0_ where driver0_.user_id=?
Hibernate: select location0_.id as id0_0_, location0_.version as version0_0_, location0_.created_by as created3_0_0_, location0_.date_created as date4_0_0_, location0_.last_updated as last5_0_0_, location0_.last_updated_by as last6_0_0_, location0_.latitude as latitude0_0_, location0_.location_name as location8_0_0_, location0_.location_type as location9_0_0_, location0_.longitude as longitude0_0_, location0_.political_name as political11_0_0_, location0_.tenant_id as tenant12_0_0_ from location location0_ where location0_.id=?
Hibernate: select location0_.id as id0_0_, location0_.version as version0_0_, location0_.created_by as created3_0_0_, location0_.date_created as date4_0_0_, location0_.last_updated as last5_0_0_, location0_.last_updated_by as last6_0_0_, location0_.latitude as latitude0_0_, location0_.location_name as location8_0_0_, location0_.location_type as location9_0_0_, location0_.longitude as longitude0_0_, location0_.political_name as political11_0_0_, location0_.tenant_id as tenant12_0_0_ from location location0_ where location0_.id=?
Hibernate: update ride set version=?, car_type=?, comments=?, created_by=?, date_created=?, driver_id=?, drop_off_location_id=?, last_updated=?, last_updated_by=?, message_to_the_driver=?, passenger_id=?, pick_up_location_id=?, pick_up_location_complement=?, pickup_date_time=?, rating=?, ride_status=?, tenant_id=? where id=? and version=?
Hibernate: select user0_.id as id8_0_, user0_.version as version8_0_, user0_.account_expired as account3_8_0_, user0_.account_locked as account4_8_0_, user0_.apns_token as apns5_8_0_, user0_.created_by as created6_8_0_, user0_.date_created as date7_8_0_, user0_.email as email8_0_, user0_.enabled as enabled8_0_, user0_.first_name as first10_8_0_, user0_.last_name as last11_8_0_, user0_.last_updated as last12_8_0_, user0_.last_updated_by as last13_8_0_, user0_.locale as locale8_0_, user0_.`password` as password15_8_0_, user0_.password_expired as password16_8_0_, user0_.phone as phone8_0_, user0_.tenant_id as tenant18_8_0_, user0_.username as username8_0_ from user user0_ where user0_.id=?
Hibernate: select driver0_.user_id as user1_2_0_, driver0_.version as version2_0_, driver0_.active_status as active3_2_0_, driver0_.car_type as car4_2_0_, driver0_.created_by as created5_2_0_, driver0_.date_created as date6_2_0_, driver0_.last_updated as last7_2_0_, driver0_.last_updated_by as last8_2_0_, driver0_.served_location_id as served9_2_0_, driver0_.tenant_id as tenant10_2_0_ from driver driver0_ where driver0_.user_id=?
Hibernate: select passenger0_.user_id as user1_1_0_, passenger0_.version as version1_0_, passenger0_.created_by as created3_1_0_, passenger0_.date_created as date4_1_0_, passenger0_.last_updated as last5_1_0_, passenger0_.last_updated_by as last6_1_0_, passenger0_.tenant_id as tenant7_1_0_ from passenger passenger0_ where passenger0_.user_id=?
Hibernate: select user0_.id as id8_0_, user0_.version as version8_0_, user0_.account_expired as account3_8_0_, user0_.account_locked as account4_8_0_, user0_.apns_token as apns5_8_0_, user0_.created_by as created6_8_0_, user0_.date_created as date7_8_0_, user0_.email as email8_0_, user0_.enabled as enabled8_0_, user0_.first_name as first10_8_0_, user0_.last_name as last11_8_0_, user0_.last_updated as last12_8_0_, user0_.last_updated_by as last13_8_0_, user0_.locale as locale8_0_, user0_.`password` as password15_8_0_, user0_.password_expired as password16_8_0_, user0_.phone as phone8_0_, user0_.tenant_id as tenant18_8_0_, user0_.username as username8_0_ from user user0_ where user0_.id=?
Hibernate: select driver0_.user_id as user1_2_0_, driver0_.version as version2_0_, driver0_.active_status as active3_2_0_, driver0_.car_type as car4_2_0_, driver0_.created_by as created5_2_0_, driver0_.date_created as date6_2_0_, driver0_.last_updated as last7_2_0_, driver0_.last_updated_by as last8_2_0_, driver0_.served_location_id as served9_2_0_, driver0_.tenant_id as tenant10_2_0_ from driver driver0_ where driver0_.user_id=?
Hibernate: select passenger0_.user_id as user1_1_0_, passenger0_.version as version1_0_, passenger0_.created_by as created3_1_0_, passenger0_.date_created as date4_1_0_, passenger0_.last_updated as last5_1_0_, passenger0_.last_updated_by as last6_1_0_, passenger0_.tenant_id as tenant7_1_0_ from passenger passenger0_ where passenger0_.user_id=?
Hibernate: insert into notification_task (version, created_by, date_created, failed_reason, last_updated, last_updated_by, message, notification_from, notification_to, process_date, subject, task_status, task_type, tenant_id) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: insert into notification_task (version, created_by, date_created, failed_reason, last_updated, last_updated_by, message, notification_from, notification_to, process_date, subject, task_status, task_type, tenant_id) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Interceptor createPage: TopLevelWindow[name=""]
Content of web window [TopLevelWindow[name=""]] changed
== Response was 200 (OK) headers: ==============================================
================================================================================
== Content =====================================================================
{"result":{"type":"USER","code":"SUCCESS","message":"Corrida 2 atualizado"}}{"result":{"type":"USER","code":"SUCCESS","message":"Corrida 2 atualizado"}}
================================================================================
#
--Output from testCloseRideBadMessage--
Switching to browser client [default]
Creating to new client [default] of type [class com.grailsrocks.functionaltest.client.BrowserClient]

== Making request POST http://localhost:8080/moovt/login/authenticateUser parameters: ==
== Request headers: ============================================================
Accept-Encoding: gzip, deflate
Content-Type: application/json
Accept: */*
== Content =====================================================================

				{"type":"Self","tenantname":"WorldTaxi","username":"jgoodrider","password":"Welcome!1"}
				
================================================================================
Hibernate: select this_.id as id3_0_, this_.version as version3_0_, this_.created_by as created3_3_0_, this_.date_created as date4_3_0_, this_.last_updated as last5_3_0_, this_.last_updated_by as last6_3_0_, this_.name as name3_0_ from tenant this_ where this_.name=? limit ?
Hibernate: select this_.id as id8_0_, this_.version as version8_0_, this_.account_expired as account3_8_0_, this_.account_locked as account4_8_0_, this_.apns_token as apns5_8_0_, this_.created_by as created6_8_0_, this_.date_created as date7_8_0_, this_.email as email8_0_, this_.enabled as enabled8_0_, this_.first_name as first10_8_0_, this_.last_name as last11_8_0_, this_.last_updated as last12_8_0_, this_.last_updated_by as last13_8_0_, this_.locale as locale8_0_, this_.`password` as password15_8_0_, this_.password_expired as password16_8_0_, this_.phone as phone8_0_, this_.tenant_id as tenant18_8_0_, this_.username as username8_0_ from user this_ where this_.tenant_id=? and this_.username=? limit ?
Hibernate: select driver0_.user_id as user1_2_0_, driver0_.version as version2_0_, driver0_.active_status as active3_2_0_, driver0_.car_type as car4_2_0_, driver0_.created_by as created5_2_0_, driver0_.date_created as date6_2_0_, driver0_.last_updated as last7_2_0_, driver0_.last_updated_by as last8_2_0_, driver0_.served_location_id as served9_2_0_, driver0_.tenant_id as tenant10_2_0_ from driver driver0_ where driver0_.user_id=?
Hibernate: select passenger0_.user_id as user1_1_0_, passenger0_.version as version1_0_, passenger0_.created_by as created3_1_0_, passenger0_.date_created as date4_1_0_, passenger0_.last_updated as last5_1_0_, passenger0_.last_updated_by as last6_1_0_, passenger0_.tenant_id as tenant7_1_0_ from passenger passenger0_ where passenger0_.user_id=?
Hibernate: select this_.role_id as role1_4_0_, this_.user_id as user2_4_0_, this_.created_by as created3_4_0_, this_.date_created as date4_4_0_, this_.last_updated as last5_4_0_, this_.last_updated_by as last6_4_0_, this_.tenant_id as tenant7_4_0_ from user_role this_ where this_.tenant_id=? and this_.user_id=?
Hibernate: select this_.role_id as role1_4_0_, this_.user_id as user2_4_0_, this_.created_by as created3_4_0_, this_.date_created as date4_4_0_, this_.last_updated as last5_4_0_, this_.last_updated_by as last6_4_0_, this_.tenant_id as tenant7_4_0_ from user_role this_ where this_.tenant_id=? and this_.user_id=?
ROLE_DRIVER
ROLE_PASSENGER
ROLE_RIDE_MGR
Interceptor createPage: TopLevelWindow[name=""]
Content of web window [TopLevelWindow[name=""]] changed
== Response was 200 (OK) headers: ==============================================
================================================================================
== Content =====================================================================
{"result":{"type":"USER","code":"SUCCESS","message":"Login successful."}, "additionalInfo":{"JSESSIONID":"CA90505286FD93A0AD9A629CBB47EBBC","userType":"PASSENGER"}}
================================================================================
#
== Making request POST http://localhost:8080/moovt/ride/closeRide parameters: ==
== Request headers: ============================================================
Accept-Encoding: gzip, deflate
Content-Type: application/json
Accept: */*
== Content =====================================================================

				{"id":"3","version":"1"}
				
================================================================================
Hibernate: select passenger0_.user_id as user1_1_0_, passenger0_.version as version1_0_, passenger0_.created_by as created3_1_0_, passenger0_.date_created as date4_1_0_, passenger0_.last_updated as last5_1_0_, passenger0_.last_updated_by as last6_1_0_, passenger0_.tenant_id as tenant7_1_0_ from passenger passenger0_ where passenger0_.user_id=?
Interceptor createPage: TopLevelWindow[name=""]
Content of web window [TopLevelWindow[name=""]] changed
== Response was 200 (OK) headers: ==============================================
================================================================================
== Content =====================================================================
{"result":{"type":"SYSTEM","code":"ERROR","message":"JSONObject[\"rating\"] not found."}}
================================================================================
#
--Output from testCloseRideAlreadyClosed--
Switching to browser client [default]
Creating to new client [default] of type [class com.grailsrocks.functionaltest.client.BrowserClient]

== Making request POST http://localhost:8080/moovt/login/authenticateUser parameters: ==
== Request headers: ============================================================
Accept-Encoding: gzip, deflate
Content-Type: application/json
Accept: */*
== Content =====================================================================

				{"type":"Self","tenantname":"WorldTaxi","username":"jgoodrider","password":"Welcome!1"}
				
================================================================================
Hibernate: select this_.id as id3_0_, this_.version as version3_0_, this_.created_by as created3_3_0_, this_.date_created as date4_3_0_, this_.last_updated as last5_3_0_, this_.last_updated_by as last6_3_0_, this_.name as name3_0_ from tenant this_ where this_.name=? limit ?
Hibernate: select this_.id as id8_0_, this_.version as version8_0_, this_.account_expired as account3_8_0_, this_.account_locked as account4_8_0_, this_.apns_token as apns5_8_0_, this_.created_by as created6_8_0_, this_.date_created as date7_8_0_, this_.email as email8_0_, this_.enabled as enabled8_0_, this_.first_name as first10_8_0_, this_.last_name as last11_8_0_, this_.last_updated as last12_8_0_, this_.last_updated_by as last13_8_0_, this_.locale as locale8_0_, this_.`password` as password15_8_0_, this_.password_expired as password16_8_0_, this_.phone as phone8_0_, this_.tenant_id as tenant18_8_0_, this_.username as username8_0_ from user this_ where this_.tenant_id=? and this_.username=? limit ?
Hibernate: select driver0_.user_id as user1_2_0_, driver0_.version as version2_0_, driver0_.active_status as active3_2_0_, driver0_.car_type as car4_2_0_, driver0_.created_by as created5_2_0_, driver0_.date_created as date6_2_0_, driver0_.last_updated as last7_2_0_, driver0_.last_updated_by as last8_2_0_, driver0_.served_location_id as served9_2_0_, driver0_.tenant_id as tenant10_2_0_ from driver driver0_ where driver0_.user_id=?
Hibernate: select passenger0_.user_id as user1_1_0_, passenger0_.version as version1_0_, passenger0_.created_by as created3_1_0_, passenger0_.date_created as date4_1_0_, passenger0_.last_updated as last5_1_0_, passenger0_.last_updated_by as last6_1_0_, passenger0_.tenant_id as tenant7_1_0_ from passenger passenger0_ where passenger0_.user_id=?
Hibernate: select this_.role_id as role1_4_0_, this_.user_id as user2_4_0_, this_.created_by as created3_4_0_, this_.date_created as date4_4_0_, this_.last_updated as last5_4_0_, this_.last_updated_by as last6_4_0_, this_.tenant_id as tenant7_4_0_ from user_role this_ where this_.tenant_id=? and this_.user_id=?
Hibernate: select this_.role_id as role1_4_0_, this_.user_id as user2_4_0_, this_.created_by as created3_4_0_, this_.date_created as date4_4_0_, this_.last_updated as last5_4_0_, this_.last_updated_by as last6_4_0_, this_.tenant_id as tenant7_4_0_ from user_role this_ where this_.tenant_id=? and this_.user_id=?
ROLE_DRIVER
ROLE_PASSENGER
ROLE_RIDE_MGR
Interceptor createPage: TopLevelWindow[name=""]
Content of web window [TopLevelWindow[name=""]] changed
== Response was 200 (OK) headers: ==============================================
================================================================================
== Content =====================================================================
{"result":{"type":"USER","code":"SUCCESS","message":"Login successful."}, "additionalInfo":{"JSESSIONID":"5A2351DDDB6B7C395C1D668071BBAAAE","userType":"PASSENGER"}}
================================================================================
#
== Making request POST http://localhost:8080/moovt/ride/closeRide parameters: ==
== Request headers: ============================================================
Accept-Encoding: gzip, deflate
Content-Type: application/json
Accept: */*
== Content =====================================================================
	
				{"id":"5","version":"1","rating":"5","comments":"Great ride!"}
				
================================================================================
Hibernate: select passenger0_.user_id as user1_1_0_, passenger0_.version as version1_0_, passenger0_.created_by as created3_1_0_, passenger0_.date_created as date4_1_0_, passenger0_.last_updated as last5_1_0_, passenger0_.last_updated_by as last6_1_0_, passenger0_.tenant_id as tenant7_1_0_ from passenger passenger0_ where passenger0_.user_id=?
Hibernate: select ride0_.id as id5_0_, ride0_.version as version5_0_, ride0_.car_type as car3_5_0_, ride0_.comments as comments5_0_, ride0_.created_by as created5_5_0_, ride0_.date_created as date6_5_0_, ride0_.driver_id as driver7_5_0_, ride0_.drop_off_location_id as drop8_5_0_, ride0_.last_updated as last9_5_0_, ride0_.last_updated_by as last10_5_0_, ride0_.message_to_the_driver as message11_5_0_, ride0_.passenger_id as passenger12_5_0_, ride0_.pick_up_location_id as pick13_5_0_, ride0_.pick_up_location_complement as pick14_5_0_, ride0_.pickup_date_time as pickup15_5_0_, ride0_.rating as rating5_0_, ride0_.ride_status as ride17_5_0_, ride0_.tenant_id as tenant18_5_0_ from ride ride0_ where ride0_.id=?
Interceptor createPage: TopLevelWindow[name=""]
Content of web window [TopLevelWindow[name=""]] changed
== Response was 200 (OK) headers: ==============================================
================================================================================
== Content =====================================================================
{"result":{"type":"SYSTEM","code":"ERROR","message":"This ride has already been completed. Unable to add comment."}}
================================================================================
#
--Output from testCloseRideUnsassignedError--
Switching to browser client [default]
Creating to new client [default] of type [class com.grailsrocks.functionaltest.client.BrowserClient]

== Making request POST http://localhost:8080/moovt/login/authenticateUser parameters: ==
== Request headers: ============================================================
Accept-Encoding: gzip, deflate
Content-Type: application/json
Accept: */*
== Content =====================================================================

				{"type":"Self","tenantname":"WorldTaxi","username":"jgoodrider","password":"Welcome!1"}
				
================================================================================
Hibernate: select this_.id as id3_0_, this_.version as version3_0_, this_.created_by as created3_3_0_, this_.date_created as date4_3_0_, this_.last_updated as last5_3_0_, this_.last_updated_by as last6_3_0_, this_.name as name3_0_ from tenant this_ where this_.name=? limit ?
Hibernate: select this_.id as id8_0_, this_.version as version8_0_, this_.account_expired as account3_8_0_, this_.account_locked as account4_8_0_, this_.apns_token as apns5_8_0_, this_.created_by as created6_8_0_, this_.date_created as date7_8_0_, this_.email as email8_0_, this_.enabled as enabled8_0_, this_.first_name as first10_8_0_, this_.last_name as last11_8_0_, this_.last_updated as last12_8_0_, this_.last_updated_by as last13_8_0_, this_.locale as locale8_0_, this_.`password` as password15_8_0_, this_.password_expired as password16_8_0_, this_.phone as phone8_0_, this_.tenant_id as tenant18_8_0_, this_.username as username8_0_ from user this_ where this_.tenant_id=? and this_.username=? limit ?
Hibernate: select driver0_.user_id as user1_2_0_, driver0_.version as version2_0_, driver0_.active_status as active3_2_0_, driver0_.car_type as car4_2_0_, driver0_.created_by as created5_2_0_, driver0_.date_created as date6_2_0_, driver0_.last_updated as last7_2_0_, driver0_.last_updated_by as last8_2_0_, driver0_.served_location_id as served9_2_0_, driver0_.tenant_id as tenant10_2_0_ from driver driver0_ where driver0_.user_id=?
Hibernate: select passenger0_.user_id as user1_1_0_, passenger0_.version as version1_0_, passenger0_.created_by as created3_1_0_, passenger0_.date_created as date4_1_0_, passenger0_.last_updated as last5_1_0_, passenger0_.last_updated_by as last6_1_0_, passenger0_.tenant_id as tenant7_1_0_ from passenger passenger0_ where passenger0_.user_id=?
Hibernate: select this_.role_id as role1_4_0_, this_.user_id as user2_4_0_, this_.created_by as created3_4_0_, this_.date_created as date4_4_0_, this_.last_updated as last5_4_0_, this_.last_updated_by as last6_4_0_, this_.tenant_id as tenant7_4_0_ from user_role this_ where this_.tenant_id=? and this_.user_id=?
Hibernate: select this_.role_id as role1_4_0_, this_.user_id as user2_4_0_, this_.created_by as created3_4_0_, this_.date_created as date4_4_0_, this_.last_updated as last5_4_0_, this_.last_updated_by as last6_4_0_, this_.tenant_id as tenant7_4_0_ from user_role this_ where this_.tenant_id=? and this_.user_id=?
ROLE_DRIVER
ROLE_PASSENGER
ROLE_RIDE_MGR
Interceptor createPage: TopLevelWindow[name=""]
Content of web window [TopLevelWindow[name=""]] changed
== Response was 200 (OK) headers: ==============================================
================================================================================
== Content =====================================================================
{"result":{"type":"USER","code":"SUCCESS","message":"Login successful."}, "additionalInfo":{"JSESSIONID":"29B4BABACDFB6A72F85F9B2608BC4D9C","userType":"PASSENGER"}}
================================================================================
#
== Making request POST http://localhost:8080/moovt/ride/closeRide parameters: ==
== Request headers: ============================================================
Accept-Encoding: gzip, deflate
Content-Type: application/json
Accept: */*
== Content =====================================================================

				{"id":"8","version":"1","rating":"5","comments":"Great ride!"}
				
================================================================================
Hibernate: select passenger0_.user_id as user1_1_0_, passenger0_.version as version1_0_, passenger0_.created_by as created3_1_0_, passenger0_.date_created as date4_1_0_, passenger0_.last_updated as last5_1_0_, passenger0_.last_updated_by as last6_1_0_, passenger0_.tenant_id as tenant7_1_0_ from passenger passenger0_ where passenger0_.user_id=?
Hibernate: select ride0_.id as id5_0_, ride0_.version as version5_0_, ride0_.car_type as car3_5_0_, ride0_.comments as comments5_0_, ride0_.created_by as created5_5_0_, ride0_.date_created as date6_5_0_, ride0_.driver_id as driver7_5_0_, ride0_.drop_off_location_id as drop8_5_0_, ride0_.last_updated as last9_5_0_, ride0_.last_updated_by as last10_5_0_, ride0_.message_to_the_driver as message11_5_0_, ride0_.passenger_id as passenger12_5_0_, ride0_.pick_up_location_id as pick13_5_0_, ride0_.pick_up_location_complement as pick14_5_0_, ride0_.pickup_date_time as pickup15_5_0_, ride0_.rating as rating5_0_, ride0_.ride_status as ride17_5_0_, ride0_.tenant_id as tenant18_5_0_ from ride ride0_ where ride0_.id=?
Interceptor createPage: TopLevelWindow[name=""]
Content of web window [TopLevelWindow[name=""]] changed
== Response was 200 (OK) headers: ==============================================
================================================================================
== Content =====================================================================
{"result":{"type":"SYSTEM","code":"ERROR","message":"This ride is unassigned and can't be completed."}}
================================================================================
#
--Output from testCancelRideSuccessEnglish--
Switching to browser client [default]
Creating to new client [default] of type [class com.grailsrocks.functionaltest.client.BrowserClient]

== Making request POST http://localhost:8080/moovt/login/authenticateUser parameters: ==
== Request headers: ============================================================
Accept-Encoding: gzip, deflate
Content-Type: application/json
Accept: */*
== Content =====================================================================

				{"type":"Self","tenantname":"WorldTaxi","username":"jgoodrider","password":"Welcome!1"}
				
================================================================================
Hibernate: select this_.id as id3_0_, this_.version as version3_0_, this_.created_by as created3_3_0_, this_.date_created as date4_3_0_, this_.last_updated as last5_3_0_, this_.last_updated_by as last6_3_0_, this_.name as name3_0_ from tenant this_ where this_.name=? limit ?
Hibernate: select this_.id as id8_0_, this_.version as version8_0_, this_.account_expired as account3_8_0_, this_.account_locked as account4_8_0_, this_.apns_token as apns5_8_0_, this_.created_by as created6_8_0_, this_.date_created as date7_8_0_, this_.email as email8_0_, this_.enabled as enabled8_0_, this_.first_name as first10_8_0_, this_.last_name as last11_8_0_, this_.last_updated as last12_8_0_, this_.last_updated_by as last13_8_0_, this_.locale as locale8_0_, this_.`password` as password15_8_0_, this_.password_expired as password16_8_0_, this_.phone as phone8_0_, this_.tenant_id as tenant18_8_0_, this_.username as username8_0_ from user this_ where this_.tenant_id=? and this_.username=? limit ?
Hibernate: select driver0_.user_id as user1_2_0_, driver0_.version as version2_0_, driver0_.active_status as active3_2_0_, driver0_.car_type as car4_2_0_, driver0_.created_by as created5_2_0_, driver0_.date_created as date6_2_0_, driver0_.last_updated as last7_2_0_, driver0_.last_updated_by as last8_2_0_, driver0_.served_location_id as served9_2_0_, driver0_.tenant_id as tenant10_2_0_ from driver driver0_ where driver0_.user_id=?
Hibernate: select passenger0_.user_id as user1_1_0_, passenger0_.version as version1_0_, passenger0_.created_by as created3_1_0_, passenger0_.date_created as date4_1_0_, passenger0_.last_updated as last5_1_0_, passenger0_.last_updated_by as last6_1_0_, passenger0_.tenant_id as tenant7_1_0_ from passenger passenger0_ where passenger0_.user_id=?
Hibernate: select this_.role_id as role1_4_0_, this_.user_id as user2_4_0_, this_.created_by as created3_4_0_, this_.date_created as date4_4_0_, this_.last_updated as last5_4_0_, this_.last_updated_by as last6_4_0_, this_.tenant_id as tenant7_4_0_ from user_role this_ where this_.tenant_id=? and this_.user_id=?
Hibernate: select this_.role_id as role1_4_0_, this_.user_id as user2_4_0_, this_.created_by as created3_4_0_, this_.date_created as date4_4_0_, this_.last_updated as last5_4_0_, this_.last_updated_by as last6_4_0_, this_.tenant_id as tenant7_4_0_ from user_role this_ where this_.tenant_id=? and this_.user_id=?
ROLE_DRIVER
ROLE_PASSENGER
ROLE_RIDE_MGR
Interceptor createPage: TopLevelWindow[name=""]
Content of web window [TopLevelWindow[name=""]] changed
== Response was 200 (OK) headers: ==============================================
================================================================================
== Content =====================================================================
{"result":{"type":"USER","code":"SUCCESS","message":"Login successful."}, "additionalInfo":{"JSESSIONID":"EE7EE2D6D662309CF967A66149C3D608","userType":"PASSENGER"}}
================================================================================
#
== Making request POST http://localhost:8080/moovt/ride/cancelRide parameters: ==
== Request headers: ============================================================
Accept-Encoding: gzip, deflate
Content-Type: application/json
Accept: */*
== Content =====================================================================

				{"id":"6","version":"1"}
				
================================================================================
Hibernate: select passenger0_.user_id as user1_1_0_, passenger0_.version as version1_0_, passenger0_.created_by as created3_1_0_, passenger0_.date_created as date4_1_0_, passenger0_.last_updated as last5_1_0_, passenger0_.last_updated_by as last6_1_0_, passenger0_.tenant_id as tenant7_1_0_ from passenger passenger0_ where passenger0_.user_id=?
Hibernate: select ride0_.id as id5_0_, ride0_.version as version5_0_, ride0_.car_type as car3_5_0_, ride0_.comments as comments5_0_, ride0_.created_by as created5_5_0_, ride0_.date_created as date6_5_0_, ride0_.driver_id as driver7_5_0_, ride0_.drop_off_location_id as drop8_5_0_, ride0_.last_updated as last9_5_0_, ride0_.last_updated_by as last10_5_0_, ride0_.message_to_the_driver as message11_5_0_, ride0_.passenger_id as passenger12_5_0_, ride0_.pick_up_location_id as pick13_5_0_, ride0_.pick_up_location_complement as pick14_5_0_, ride0_.pickup_date_time as pickup15_5_0_, ride0_.rating as rating5_0_, ride0_.ride_status as ride17_5_0_, ride0_.tenant_id as tenant18_5_0_ from ride ride0_ where ride0_.id=?
Hibernate: select location0_.id as id0_0_, location0_.version as version0_0_, location0_.created_by as created3_0_0_, location0_.date_created as date4_0_0_, location0_.last_updated as last5_0_0_, location0_.last_updated_by as last6_0_0_, location0_.latitude as latitude0_0_, location0_.location_name as location8_0_0_, location0_.location_type as location9_0_0_, location0_.longitude as longitude0_0_, location0_.political_name as political11_0_0_, location0_.tenant_id as tenant12_0_0_ from location location0_ where location0_.id=?
Hibernate: select location0_.id as id0_0_, location0_.version as version0_0_, location0_.created_by as created3_0_0_, location0_.date_created as date4_0_0_, location0_.last_updated as last5_0_0_, location0_.last_updated_by as last6_0_0_, location0_.latitude as latitude0_0_, location0_.location_name as location8_0_0_, location0_.location_type as location9_0_0_, location0_.longitude as longitude0_0_, location0_.political_name as political11_0_0_, location0_.tenant_id as tenant12_0_0_ from location location0_ where location0_.id=?
Hibernate: update ride set version=?, car_type=?, comments=?, created_by=?, date_created=?, driver_id=?, drop_off_location_id=?, last_updated=?, last_updated_by=?, message_to_the_driver=?, passenger_id=?, pick_up_location_id=?, pick_up_location_complement=?, pickup_date_time=?, rating=?, ride_status=?, tenant_id=? where id=? and version=?
Interceptor createPage: TopLevelWindow[name=""]
Content of web window [TopLevelWindow[name=""]] changed
== Response was 200 (OK) headers: ==============================================
================================================================================
== Content =====================================================================
{"result":{"type":"USER","code":"SUCCESS","message":"Ride #6 canceled."}}
================================================================================
#
--Output from testCancelRideSuccessPortuguese--
Switching to browser client [default]
Creating to new client [default] of type [class com.grailsrocks.functionaltest.client.BrowserClient]

== Making request POST http://localhost:8080/moovt/login/authenticateUser parameters: ==
== Request headers: ============================================================
Accept-Encoding: gzip, deflate
Content-Type: application/json
Accept: */*
== Content =====================================================================

				{"type":"Self","tenantname":"WorldTaxi","username":"jgoodrider","password":"Welcome!1"}
				
================================================================================
Hibernate: select this_.id as id3_0_, this_.version as version3_0_, this_.created_by as created3_3_0_, this_.date_created as date4_3_0_, this_.last_updated as last5_3_0_, this_.last_updated_by as last6_3_0_, this_.name as name3_0_ from tenant this_ where this_.name=? limit ?
Hibernate: select this_.id as id8_0_, this_.version as version8_0_, this_.account_expired as account3_8_0_, this_.account_locked as account4_8_0_, this_.apns_token as apns5_8_0_, this_.created_by as created6_8_0_, this_.date_created as date7_8_0_, this_.email as email8_0_, this_.enabled as enabled8_0_, this_.first_name as first10_8_0_, this_.last_name as last11_8_0_, this_.last_updated as last12_8_0_, this_.last_updated_by as last13_8_0_, this_.locale as locale8_0_, this_.`password` as password15_8_0_, this_.password_expired as password16_8_0_, this_.phone as phone8_0_, this_.tenant_id as tenant18_8_0_, this_.username as username8_0_ from user this_ where this_.tenant_id=? and this_.username=? limit ?
Hibernate: select driver0_.user_id as user1_2_0_, driver0_.version as version2_0_, driver0_.active_status as active3_2_0_, driver0_.car_type as car4_2_0_, driver0_.created_by as created5_2_0_, driver0_.date_created as date6_2_0_, driver0_.last_updated as last7_2_0_, driver0_.last_updated_by as last8_2_0_, driver0_.served_location_id as served9_2_0_, driver0_.tenant_id as tenant10_2_0_ from driver driver0_ where driver0_.user_id=?
Hibernate: select passenger0_.user_id as user1_1_0_, passenger0_.version as version1_0_, passenger0_.created_by as created3_1_0_, passenger0_.date_created as date4_1_0_, passenger0_.last_updated as last5_1_0_, passenger0_.last_updated_by as last6_1_0_, passenger0_.tenant_id as tenant7_1_0_ from passenger passenger0_ where passenger0_.user_id=?
Hibernate: select this_.role_id as role1_4_0_, this_.user_id as user2_4_0_, this_.created_by as created3_4_0_, this_.date_created as date4_4_0_, this_.last_updated as last5_4_0_, this_.last_updated_by as last6_4_0_, this_.tenant_id as tenant7_4_0_ from user_role this_ where this_.tenant_id=? and this_.user_id=?
Hibernate: select this_.role_id as role1_4_0_, this_.user_id as user2_4_0_, this_.created_by as created3_4_0_, this_.date_created as date4_4_0_, this_.last_updated as last5_4_0_, this_.last_updated_by as last6_4_0_, this_.tenant_id as tenant7_4_0_ from user_role this_ where this_.tenant_id=? and this_.user_id=?
ROLE_DRIVER
ROLE_PASSENGER
ROLE_RIDE_MGR
Interceptor createPage: TopLevelWindow[name=""]
Content of web window [TopLevelWindow[name=""]] changed
== Response was 200 (OK) headers: ==============================================
================================================================================
== Content =====================================================================
{"result":{"type":"USER","code":"SUCCESS","message":"Login successful."}, "additionalInfo":{"JSESSIONID":"2814675EBF81C55EAF22B5C213FB3FB6","userType":"PASSENGER"}}
================================================================================
#
== Making request POST http://localhost:8080/moovt/ride/cancelRide parameters: ==
== Request headers: ============================================================
Accept-Language: pt-BR
Accept-Encoding: gzip, deflate
Content-Type: application/json
Accept: */*
== Content =====================================================================

				{"id":"7","version":"1"}
				
================================================================================
Hibernate: select passenger0_.user_id as user1_1_0_, passenger0_.version as version1_0_, passenger0_.created_by as created3_1_0_, passenger0_.date_created as date4_1_0_, passenger0_.last_updated as last5_1_0_, passenger0_.last_updated_by as last6_1_0_, passenger0_.tenant_id as tenant7_1_0_ from passenger passenger0_ where passenger0_.user_id=?
Hibernate: select ride0_.id as id5_0_, ride0_.version as version5_0_, ride0_.car_type as car3_5_0_, ride0_.comments as comments5_0_, ride0_.created_by as created5_5_0_, ride0_.date_created as date6_5_0_, ride0_.driver_id as driver7_5_0_, ride0_.drop_off_location_id as drop8_5_0_, ride0_.last_updated as last9_5_0_, ride0_.last_updated_by as last10_5_0_, ride0_.message_to_the_driver as message11_5_0_, ride0_.passenger_id as passenger12_5_0_, ride0_.pick_up_location_id as pick13_5_0_, ride0_.pick_up_location_complement as pick14_5_0_, ride0_.pickup_date_time as pickup15_5_0_, ride0_.rating as rating5_0_, ride0_.ride_status as ride17_5_0_, ride0_.tenant_id as tenant18_5_0_ from ride ride0_ where ride0_.id=?
Hibernate: select location0_.id as id0_0_, location0_.version as version0_0_, location0_.created_by as created3_0_0_, location0_.date_created as date4_0_0_, location0_.last_updated as last5_0_0_, location0_.last_updated_by as last6_0_0_, location0_.latitude as latitude0_0_, location0_.location_name as location8_0_0_, location0_.location_type as location9_0_0_, location0_.longitude as longitude0_0_, location0_.political_name as political11_0_0_, location0_.tenant_id as tenant12_0_0_ from location location0_ where location0_.id=?
Hibernate: select location0_.id as id0_0_, location0_.version as version0_0_, location0_.created_by as created3_0_0_, location0_.date_created as date4_0_0_, location0_.last_updated as last5_0_0_, location0_.last_updated_by as last6_0_0_, location0_.latitude as latitude0_0_, location0_.location_name as location8_0_0_, location0_.location_type as location9_0_0_, location0_.longitude as longitude0_0_, location0_.political_name as political11_0_0_, location0_.tenant_id as tenant12_0_0_ from location location0_ where location0_.id=?
Hibernate: update ride set version=?, car_type=?, comments=?, created_by=?, date_created=?, driver_id=?, drop_off_location_id=?, last_updated=?, last_updated_by=?, message_to_the_driver=?, passenger_id=?, pick_up_location_id=?, pick_up_location_complement=?, pickup_date_time=?, rating=?, ride_status=?, tenant_id=? where id=? and version=?
Interceptor createPage: TopLevelWindow[name=""]
Content of web window [TopLevelWindow[name=""]] changed
== Response was 200 (OK) headers: ==============================================
================================================================================
== Content =====================================================================
{"result":{"type":"USER","code":"SUCCESS","message":"Corrida #7 cancelada."}}
================================================================================
#
--Output from testCancelRideNotFoundEnglish--
Switching to browser client [default]
Creating to new client [default] of type [class com.grailsrocks.functionaltest.client.BrowserClient]

== Making request POST http://localhost:8080/moovt/login/authenticateUser parameters: ==
== Request headers: ============================================================
Accept-Encoding: gzip, deflate
Content-Type: application/json
Accept: */*
== Content =====================================================================

				{"type":"Self","tenantname":"WorldTaxi","username":"jgoodrider","password":"Welcome!1"}
				
================================================================================
Hibernate: select this_.id as id3_0_, this_.version as version3_0_, this_.created_by as created3_3_0_, this_.date_created as date4_3_0_, this_.last_updated as last5_3_0_, this_.last_updated_by as last6_3_0_, this_.name as name3_0_ from tenant this_ where this_.name=? limit ?
Hibernate: select this_.id as id8_0_, this_.version as version8_0_, this_.account_expired as account3_8_0_, this_.account_locked as account4_8_0_, this_.apns_token as apns5_8_0_, this_.created_by as created6_8_0_, this_.date_created as date7_8_0_, this_.email as email8_0_, this_.enabled as enabled8_0_, this_.first_name as first10_8_0_, this_.last_name as last11_8_0_, this_.last_updated as last12_8_0_, this_.last_updated_by as last13_8_0_, this_.locale as locale8_0_, this_.`password` as password15_8_0_, this_.password_expired as password16_8_0_, this_.phone as phone8_0_, this_.tenant_id as tenant18_8_0_, this_.username as username8_0_ from user this_ where this_.tenant_id=? and this_.username=? limit ?
Hibernate: select driver0_.user_id as user1_2_0_, driver0_.version as version2_0_, driver0_.active_status as active3_2_0_, driver0_.car_type as car4_2_0_, driver0_.created_by as created5_2_0_, driver0_.date_created as date6_2_0_, driver0_.last_updated as last7_2_0_, driver0_.last_updated_by as last8_2_0_, driver0_.served_location_id as served9_2_0_, driver0_.tenant_id as tenant10_2_0_ from driver driver0_ where driver0_.user_id=?
Hibernate: select passenger0_.user_id as user1_1_0_, passenger0_.version as version1_0_, passenger0_.created_by as created3_1_0_, passenger0_.date_created as date4_1_0_, passenger0_.last_updated as last5_1_0_, passenger0_.last_updated_by as last6_1_0_, passenger0_.tenant_id as tenant7_1_0_ from passenger passenger0_ where passenger0_.user_id=?
Hibernate: select this_.role_id as role1_4_0_, this_.user_id as user2_4_0_, this_.created_by as created3_4_0_, this_.date_created as date4_4_0_, this_.last_updated as last5_4_0_, this_.last_updated_by as last6_4_0_, this_.tenant_id as tenant7_4_0_ from user_role this_ where this_.tenant_id=? and this_.user_id=?
Hibernate: select this_.role_id as role1_4_0_, this_.user_id as user2_4_0_, this_.created_by as created3_4_0_, this_.date_created as date4_4_0_, this_.last_updated as last5_4_0_, this_.last_updated_by as last6_4_0_, this_.tenant_id as tenant7_4_0_ from user_role this_ where this_.tenant_id=? and this_.user_id=?
ROLE_DRIVER
ROLE_PASSENGER
ROLE_RIDE_MGR
Interceptor createPage: TopLevelWindow[name=""]
Content of web window [TopLevelWindow[name=""]] changed
== Response was 200 (OK) headers: ==============================================
================================================================================
== Content =====================================================================
{"result":{"type":"USER","code":"SUCCESS","message":"Login successful."}, "additionalInfo":{"JSESSIONID":"B3438DD61C2D39CDDC5E6991F4641389","userType":"PASSENGER"}}
================================================================================
#
== Making request POST http://localhost:8080/moovt/ride/cancelRide parameters: ==
== Request headers: ============================================================
Accept-Encoding: gzip, deflate
Content-Type: application/json
Accept: */*
== Content =====================================================================

				{"id":"40","version":"1"}
				
================================================================================
Hibernate: select passenger0_.user_id as user1_1_0_, passenger0_.version as version1_0_, passenger0_.created_by as created3_1_0_, passenger0_.date_created as date4_1_0_, passenger0_.last_updated as last5_1_0_, passenger0_.last_updated_by as last6_1_0_, passenger0_.tenant_id as tenant7_1_0_ from passenger passenger0_ where passenger0_.user_id=?
Hibernate: select ride0_.id as id5_0_, ride0_.version as version5_0_, ride0_.car_type as car3_5_0_, ride0_.comments as comments5_0_, ride0_.created_by as created5_5_0_, ride0_.date_created as date6_5_0_, ride0_.driver_id as driver7_5_0_, ride0_.drop_off_location_id as drop8_5_0_, ride0_.last_updated as last9_5_0_, ride0_.last_updated_by as last10_5_0_, ride0_.message_to_the_driver as message11_5_0_, ride0_.passenger_id as passenger12_5_0_, ride0_.pick_up_location_id as pick13_5_0_, ride0_.pick_up_location_complement as pick14_5_0_, ride0_.pickup_date_time as pickup15_5_0_, ride0_.rating as rating5_0_, ride0_.ride_status as ride17_5_0_, ride0_.tenant_id as tenant18_5_0_ from ride ride0_ where ride0_.id=?
Interceptor createPage: TopLevelWindow[name=""]
Content of web window [TopLevelWindow[name=""]] changed
== Response was 200 (OK) headers: ==============================================
================================================================================
== Content =====================================================================
{"result":{"type":"SYSTEM","code":"ERROR","message":"Ride #40 not found"}}
================================================================================
#
--Output from testCancelRideNotFoundPortuguese--
Switching to browser client [default]
Creating to new client [default] of type [class com.grailsrocks.functionaltest.client.BrowserClient]

== Making request POST http://localhost:8080/moovt/login/authenticateUser parameters: ==
== Request headers: ============================================================
Accept-Encoding: gzip, deflate
Content-Type: application/json
Accept: */*
== Content =====================================================================

				{"type":"Self","tenantname":"WorldTaxi","username":"jgoodrider","password":"Welcome!1"}
				
================================================================================
Hibernate: select this_.id as id3_0_, this_.version as version3_0_, this_.created_by as created3_3_0_, this_.date_created as date4_3_0_, this_.last_updated as last5_3_0_, this_.last_updated_by as last6_3_0_, this_.name as name3_0_ from tenant this_ where this_.name=? limit ?
Hibernate: select this_.id as id8_0_, this_.version as version8_0_, this_.account_expired as account3_8_0_, this_.account_locked as account4_8_0_, this_.apns_token as apns5_8_0_, this_.created_by as created6_8_0_, this_.date_created as date7_8_0_, this_.email as email8_0_, this_.enabled as enabled8_0_, this_.first_name as first10_8_0_, this_.last_name as last11_8_0_, this_.last_updated as last12_8_0_, this_.last_updated_by as last13_8_0_, this_.locale as locale8_0_, this_.`password` as password15_8_0_, this_.password_expired as password16_8_0_, this_.phone as phone8_0_, this_.tenant_id as tenant18_8_0_, this_.username as username8_0_ from user this_ where this_.tenant_id=? and this_.username=? limit ?
Hibernate: select driver0_.user_id as user1_2_0_, driver0_.version as version2_0_, driver0_.active_status as active3_2_0_, driver0_.car_type as car4_2_0_, driver0_.created_by as created5_2_0_, driver0_.date_created as date6_2_0_, driver0_.last_updated as last7_2_0_, driver0_.last_updated_by as last8_2_0_, driver0_.served_location_id as served9_2_0_, driver0_.tenant_id as tenant10_2_0_ from driver driver0_ where driver0_.user_id=?
Hibernate: select passenger0_.user_id as user1_1_0_, passenger0_.version as version1_0_, passenger0_.created_by as created3_1_0_, passenger0_.date_created as date4_1_0_, passenger0_.last_updated as last5_1_0_, passenger0_.last_updated_by as last6_1_0_, passenger0_.tenant_id as tenant7_1_0_ from passenger passenger0_ where passenger0_.user_id=?
Hibernate: select this_.role_id as role1_4_0_, this_.user_id as user2_4_0_, this_.created_by as created3_4_0_, this_.date_created as date4_4_0_, this_.last_updated as last5_4_0_, this_.last_updated_by as last6_4_0_, this_.tenant_id as tenant7_4_0_ from user_role this_ where this_.tenant_id=? and this_.user_id=?
Hibernate: select this_.role_id as role1_4_0_, this_.user_id as user2_4_0_, this_.created_by as created3_4_0_, this_.date_created as date4_4_0_, this_.last_updated as last5_4_0_, this_.last_updated_by as last6_4_0_, this_.tenant_id as tenant7_4_0_ from user_role this_ where this_.tenant_id=? and this_.user_id=?
ROLE_DRIVER
ROLE_PASSENGER
ROLE_RIDE_MGR
Interceptor createPage: TopLevelWindow[name=""]
Content of web window [TopLevelWindow[name=""]] changed
== Response was 200 (OK) headers: ==============================================
================================================================================
== Content =====================================================================
{"result":{"type":"USER","code":"SUCCESS","message":"Login successful."}, "additionalInfo":{"JSESSIONID":"2FE9B60DA608077F3D1B51071ED81AC3","userType":"PASSENGER"}}
================================================================================
#
== Making request POST http://localhost:8080/moovt/ride/cancelRide parameters: ==
== Request headers: ============================================================
Accept-Language: pt-BR
Accept-Encoding: gzip, deflate
Content-Type: application/json
Accept: */*
== Content =====================================================================

				{"id":"40","version":"1"}
				
================================================================================
Hibernate: select passenger0_.user_id as user1_1_0_, passenger0_.version as version1_0_, passenger0_.created_by as created3_1_0_, passenger0_.date_created as date4_1_0_, passenger0_.last_updated as last5_1_0_, passenger0_.last_updated_by as last6_1_0_, passenger0_.tenant_id as tenant7_1_0_ from passenger passenger0_ where passenger0_.user_id=?
Hibernate: select ride0_.id as id5_0_, ride0_.version as version5_0_, ride0_.car_type as car3_5_0_, ride0_.comments as comments5_0_, ride0_.created_by as created5_5_0_, ride0_.date_created as date6_5_0_, ride0_.driver_id as driver7_5_0_, ride0_.drop_off_location_id as drop8_5_0_, ride0_.last_updated as last9_5_0_, ride0_.last_updated_by as last10_5_0_, ride0_.message_to_the_driver as message11_5_0_, ride0_.passenger_id as passenger12_5_0_, ride0_.pick_up_location_id as pick13_5_0_, ride0_.pick_up_location_complement as pick14_5_0_, ride0_.pickup_date_time as pickup15_5_0_, ride0_.rating as rating5_0_, ride0_.ride_status as ride17_5_0_, ride0_.tenant_id as tenant18_5_0_ from ride ride0_ where ride0_.id=?
Interceptor createPage: TopLevelWindow[name=""]
Content of web window [TopLevelWindow[name=""]] changed
== Response was 200 (OK) headers: ==============================================
================================================================================
== Content =====================================================================
{"result":{"type":"SYSTEM","code":"ERROR","message":"Corrida #40 não foi encontrada."}}
================================================================================
#
]]></system-out>

      <system-err><![CDATA[--Output from testRetrievePassengerRidesEnglish--
--Output from testRetrieveUnassignedRideInServedAreaEnglish--
--Output from testAssignRideToDriverEnglish--
--Output from testRetrieveAllRidesEnglish--
--Output from testRetrieveAssignedRidesEnglish--
--Output from testCreateRideENglish--
--Output from testCloneRide--
--Output from testCloneRideBadMessage--
--Output from testCloseRideSuccessEnglish--
--Output from testCloseRideSuccessPortuguese--
--Output from testCloseRideBadMessage--
--Output from testCloseRideAlreadyClosed--
--Output from testCloseRideUnsassignedError--
--Output from testCancelRideSuccessEnglish--
--Output from testCancelRideSuccessPortuguese--
--Output from testCancelRideNotFoundEnglish--
--Output from testCancelRideNotFoundPortuguese--
]]></system-err>

  </testsuite>
  <testsuite errors="0" failures="2" hostname="Eduardo-Goncalvess-MacBook-Pro.local" id="4" name="UserFunctionalTests" package="com.moovt" tests="20" time="4.661" timestamp="2013-08-01T04:17:27">
      <properties />

      <testcase classname="com.moovt.UserFunctionalTests" name="testCreateUserBadMessage" time="0.163" />

      <testcase classname="com.moovt.UserFunctionalTests" name="testCreateUserBadTenantEnglish" time="0.117" />

      <testcase classname="com.moovt.UserFunctionalTests" name="testCreateUserSuccessEnglish" time="0.52" />

      <testcase classname="com.moovt.UserFunctionalTests" name="testCreateUserSuccessPortuquese" time="0.458" />

      <testcase classname="com.moovt.UserFunctionalTests" name="testCreateUserNoUserNameEnglish" time="0.689" />

      <testcase classname="com.moovt.UserFunctionalTests" name="testCreateUserNoUserNamePortuguese" time="0.109" />

      <testcase classname="com.moovt.UserFunctionalTests" name="testCreateUserNoPasswordEnglish" time="0.118" />

      <testcase classname="com.moovt.UserFunctionalTests" name="testCreateUserNoPasswordPortuguese" time="0.199" />

      <testcase classname="com.moovt.UserFunctionalTests" name="testCreateUserNoEmailEnglish" time="0.095" />

      <testcase classname="com.moovt.UserFunctionalTests" name="testCreateUserNoEmailPortuguese" time="0.102" />

      <testcase classname="com.moovt.UserFunctionalTests" name="testCreateUserDuplicateUsernameEnglish" time="0.116" />

      <testcase classname="com.moovt.UserFunctionalTests" name="testCreateUserDuplicateUsernamePortuguese" time="0.152" />

      <testcase classname="com.moovt.UserFunctionalTests" name="testCreateUserDuplicateEmailEnglish" time="0.64">
          <failure message="com.grailsrocks.functionaltest.FunctionalTestException: Expected content to loosely contain [ERROR] but it didn&apos;t" type="junit.framework.AssertionFailedError">junit.framework.AssertionFailedError: com.grailsrocks.functionaltest.FunctionalTestException: Expected content to loosely contain [ERROR] but it didn&apos;t
	at com.grailsrocks.functionaltest.TestCaseBase.invokeMethod(TestCaseBase.groovy:184)
	at com.moovt.UserFunctionalTests.testCreateUserDuplicateEmailEnglish(UserFunctionalTests.groovy:206)
</failure>

      </testcase>

      <testcase classname="com.moovt.UserFunctionalTests" name="testCreateUserDuplicateEmailPortuguese" time="0.163">
          <failure message="com.grailsrocks.functionaltest.FunctionalTestException: Expected content to loosely contain [Este email (existingEmail@test.com) já existe] but it didn&apos;t" type="junit.framework.AssertionFailedError">junit.framework.AssertionFailedError: com.grailsrocks.functionaltest.FunctionalTestException: Expected content to loosely contain [Este email (existingEmail@test.com) já existe] but it didn&apos;t
	at com.grailsrocks.functionaltest.TestCaseBase.invokeMethod(TestCaseBase.groovy:184)
	at com.moovt.UserFunctionalTests.testCreateUserDuplicateEmailPortuguese(UserFunctionalTests.groovy:224)
</failure>

      </testcase>

      <testcase classname="com.moovt.UserFunctionalTests" name="testResetPasswordSuccessEnglish" time="0.286" />

      <testcase classname="com.moovt.UserFunctionalTests" name="testResetPasswordSuccessPortuguese" time="0.213" />

      <testcase classname="com.moovt.UserFunctionalTests" name="testResetPasswordBadMessageNoTenante" time="0.184" />

      <testcase classname="com.moovt.UserFunctionalTests" name="testResetPasswordBadMessageNoEmail" time="0.153" />

      <testcase classname="com.moovt.UserFunctionalTests" name="testResetPasswordTenantEmailNotFoundEnglish" time="0.082" />

      <testcase classname="com.moovt.UserFunctionalTests" name="testResetPasswordTenantEmailNotFoundPortuguese" time="0.069" />

      <system-out><![CDATA[--Output from testCreateUserBadMessage--
Switching to browser client [default]
Creating to new client [default] of type [class com.grailsrocks.functionaltest.client.BrowserClient]

== Making request POST http://localhost:8080/moovt/user/createUser parameters: ==
== Request headers: ============================================================
Accept-Encoding: gzip, deflate
Content-Type: application/json
Accept: */*
== Content =====================================================================

================================================================================
Interceptor createPage: TopLevelWindow[name=""]
Content of web window [TopLevelWindow[name=""]] changed
== Response was 200 (OK) headers: ==============================================
================================================================================
== Content =====================================================================
{"result":{"type":"SYSTEM","code":"ERROR","message":"A JSONObject text must begin with '{' at character 0 of "}}
================================================================================
#
--Output from testCreateUserBadTenantEnglish--
Switching to browser client [default]
Creating to new client [default] of type [class com.grailsrocks.functionaltest.client.BrowserClient]

== Making request POST http://localhost:8080/moovt/user/createUser parameters: ==
== Request headers: ============================================================
Accept-Language: en-US
Accept-Encoding: gzip, deflate
Content-Type: application/json
Accept: */*
== Content =====================================================================

				{"tenantname": "TheBadTenant", "email":"movieGoer@test.com","username": "moovieGoer", "password":"moovieGoer", "firstName":"TestFirstName", lastName: "TestLastName","phone":"800-800-8080"}
				
================================================================================
Hibernate: select this_.id as id3_0_, this_.version as version3_0_, this_.created_by as created3_3_0_, this_.date_created as date4_3_0_, this_.last_updated as last5_3_0_, this_.last_updated_by as last6_3_0_, this_.name as name3_0_ from tenant this_ where this_.name=? limit ?
Interceptor createPage: TopLevelWindow[name=""]
Content of web window [TopLevelWindow[name=""]] changed
== Response was 200 (OK) headers: ==============================================
================================================================================
== Content =====================================================================
{"result":{"type":"SYSTEM","code":"ERROR","message":"This tenant (TheBadTenant) does not exist. Please use an existing tenant to create this user."}}
================================================================================
#
--Output from testCreateUserSuccessEnglish--
Switching to browser client [default]
Creating to new client [default] of type [class com.grailsrocks.functionaltest.client.BrowserClient]

== Making request POST http://localhost:8080/moovt/user/createUser parameters: ==
== Request headers: ============================================================
Accept-Language: en-US
Accept-Encoding: gzip, deflate
Content-Type: application/json
Accept: */*
== Content =====================================================================

				{"tenantname": "naSavassi", "email":"movieGoer@test.com", "username": "moovieGoer", "password":"moovieGoer", "firstName":"TestFirstName", lastName: "TestLastName","phone":"800-800-8080", "locale": "en_US"}
				
================================================================================
Hibernate: select this_.id as id3_0_, this_.version as version3_0_, this_.created_by as created3_3_0_, this_.date_created as date4_3_0_, this_.last_updated as last5_3_0_, this_.last_updated_by as last6_3_0_, this_.name as name3_0_ from tenant this_ where this_.name=? limit ?
Hibernate: select this_.id as id8_0_, this_.version as version8_0_, this_.account_expired as account3_8_0_, this_.account_locked as account4_8_0_, this_.apns_token as apns5_8_0_, this_.created_by as created6_8_0_, this_.date_created as date7_8_0_, this_.email as email8_0_, this_.enabled as enabled8_0_, this_.first_name as first10_8_0_, this_.last_name as last11_8_0_, this_.last_updated as last12_8_0_, this_.last_updated_by as last13_8_0_, this_.locale as locale8_0_, this_.`password` as password15_8_0_, this_.password_expired as password16_8_0_, this_.phone as phone8_0_, this_.tenant_id as tenant18_8_0_, this_.username as username8_0_ from user this_ where this_.username=? and this_.tenant_id=?
Hibernate: select this_.id as id8_0_, this_.version as version8_0_, this_.account_expired as account3_8_0_, this_.account_locked as account4_8_0_, this_.apns_token as apns5_8_0_, this_.created_by as created6_8_0_, this_.date_created as date7_8_0_, this_.email as email8_0_, this_.enabled as enabled8_0_, this_.first_name as first10_8_0_, this_.last_name as last11_8_0_, this_.last_updated as last12_8_0_, this_.last_updated_by as last13_8_0_, this_.locale as locale8_0_, this_.`password` as password15_8_0_, this_.password_expired as password16_8_0_, this_.phone as phone8_0_, this_.tenant_id as tenant18_8_0_, this_.username as username8_0_ from user this_ where this_.username=? and this_.tenant_id=?
Hibernate: insert into user (version, account_expired, account_locked, apns_token, created_by, date_created, email, enabled, first_name, last_name, last_updated, last_updated_by, locale, `password`, password_expired, phone, tenant_id, username) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: select this_.id as id8_0_, this_.version as version8_0_, this_.account_expired as account3_8_0_, this_.account_locked as account4_8_0_, this_.apns_token as apns5_8_0_, this_.created_by as created6_8_0_, this_.date_created as date7_8_0_, this_.email as email8_0_, this_.enabled as enabled8_0_, this_.first_name as first10_8_0_, this_.last_name as last11_8_0_, this_.last_updated as last12_8_0_, this_.last_updated_by as last13_8_0_, this_.locale as locale8_0_, this_.`password` as password15_8_0_, this_.password_expired as password16_8_0_, this_.phone as phone8_0_, this_.tenant_id as tenant18_8_0_, this_.username as username8_0_ from user this_ where this_.username=? and this_.tenant_id=?
Hibernate: select this_.id as id8_0_, this_.version as version8_0_, this_.account_expired as account3_8_0_, this_.account_locked as account4_8_0_, this_.apns_token as apns5_8_0_, this_.created_by as created6_8_0_, this_.date_created as date7_8_0_, this_.email as email8_0_, this_.enabled as enabled8_0_, this_.first_name as first10_8_0_, this_.last_name as last11_8_0_, this_.last_updated as last12_8_0_, this_.last_updated_by as last13_8_0_, this_.locale as locale8_0_, this_.`password` as password15_8_0_, this_.password_expired as password16_8_0_, this_.phone as phone8_0_, this_.tenant_id as tenant18_8_0_, this_.username as username8_0_ from user this_ where this_.username=? and this_.tenant_id=?
Hibernate: update user set version=?, account_expired=?, account_locked=?, apns_token=?, created_by=?, date_created=?, email=?, enabled=?, first_name=?, last_name=?, last_updated=?, last_updated_by=?, locale=?, `password`=?, password_expired=?, phone=?, tenant_id=?, username=? where id=? and version=?
Hibernate: select this_.id as id8_0_, this_.version as version8_0_, this_.account_expired as account3_8_0_, this_.account_locked as account4_8_0_, this_.apns_token as apns5_8_0_, this_.created_by as created6_8_0_, this_.date_created as date7_8_0_, this_.email as email8_0_, this_.enabled as enabled8_0_, this_.first_name as first10_8_0_, this_.last_name as last11_8_0_, this_.last_updated as last12_8_0_, this_.last_updated_by as last13_8_0_, this_.locale as locale8_0_, this_.`password` as password15_8_0_, this_.password_expired as password16_8_0_, this_.phone as phone8_0_, this_.tenant_id as tenant18_8_0_, this_.username as username8_0_ from user this_ where this_.username=? and this_.tenant_id=?
Hibernate: select this_.id as id3_0_, this_.version as version3_0_, this_.created_by as created3_3_0_, this_.date_created as date4_3_0_, this_.last_updated as last5_3_0_, this_.last_updated_by as last6_3_0_, this_.name as name3_0_ from tenant this_ where this_.name=? limit ?
Hibernate: select this_.id as id8_0_, this_.version as version8_0_, this_.account_expired as account3_8_0_, this_.account_locked as account4_8_0_, this_.apns_token as apns5_8_0_, this_.created_by as created6_8_0_, this_.date_created as date7_8_0_, this_.email as email8_0_, this_.enabled as enabled8_0_, this_.first_name as first10_8_0_, this_.last_name as last11_8_0_, this_.last_updated as last12_8_0_, this_.last_updated_by as last13_8_0_, this_.locale as locale8_0_, this_.`password` as password15_8_0_, this_.password_expired as password16_8_0_, this_.phone as phone8_0_, this_.tenant_id as tenant18_8_0_, this_.username as username8_0_ from user this_ where this_.tenant_id=? and this_.username=? limit ?
Hibernate: select this_.role_id as role1_4_0_, this_.user_id as user2_4_0_, this_.created_by as created3_4_0_, this_.date_created as date4_4_0_, this_.last_updated as last5_4_0_, this_.last_updated_by as last6_4_0_, this_.tenant_id as tenant7_4_0_ from user_role this_ where this_.tenant_id=? and this_.user_id=?
Hibernate: select this_.role_id as role1_4_0_, this_.user_id as user2_4_0_, this_.created_by as created3_4_0_, this_.date_created as date4_4_0_, this_.last_updated as last5_4_0_, this_.last_updated_by as last6_4_0_, this_.tenant_id as tenant7_4_0_ from user_role this_ where this_.tenant_id=? and this_.user_id=?
Interceptor createPage: TopLevelWindow[name=""]
Content of web window [TopLevelWindow[name=""]] changed
== Response was 200 (OK) headers: ==============================================
================================================================================
== Content =====================================================================
{"result":{"type":"USER","code":"SUCCESS","message":"User moovieGoer created"}, "additionalInfo":{"JSESSIONID":"2FBB98F7A715B155B17C9E9D8EA472DF"}}
================================================================================
#
--Output from testCreateUserSuccessPortuquese--
Switching to browser client [default]
Creating to new client [default] of type [class com.grailsrocks.functionaltest.client.BrowserClient]

== Making request POST http://localhost:8080/moovt/user/createUser parameters: ==
== Request headers: ============================================================
Accept-Language: pt-BR
Accept-Encoding: gzip, deflate
Content-Type: application/json
Accept: */*
== Content =====================================================================

				{"tenantname": "naSavassi", "email":"movieLover@test.com", "username": "moovieLover", "password":"moovieLover", "firstName":"TestFirstName", lastName: "TestLastName","phone":"800-800-8080", "locale": "pt_BR"}
				
================================================================================
Hibernate: select this_.id as id3_0_, this_.version as version3_0_, this_.created_by as created3_3_0_, this_.date_created as date4_3_0_, this_.last_updated as last5_3_0_, this_.last_updated_by as last6_3_0_, this_.name as name3_0_ from tenant this_ where this_.name=? limit ?
Hibernate: select this_.id as id8_0_, this_.version as version8_0_, this_.account_expired as account3_8_0_, this_.account_locked as account4_8_0_, this_.apns_token as apns5_8_0_, this_.created_by as created6_8_0_, this_.date_created as date7_8_0_, this_.email as email8_0_, this_.enabled as enabled8_0_, this_.first_name as first10_8_0_, this_.last_name as last11_8_0_, this_.last_updated as last12_8_0_, this_.last_updated_by as last13_8_0_, this_.locale as locale8_0_, this_.`password` as password15_8_0_, this_.password_expired as password16_8_0_, this_.phone as phone8_0_, this_.tenant_id as tenant18_8_0_, this_.username as username8_0_ from user this_ where this_.username=? and this_.tenant_id=?
Hibernate: select this_.id as id8_0_, this_.version as version8_0_, this_.account_expired as account3_8_0_, this_.account_locked as account4_8_0_, this_.apns_token as apns5_8_0_, this_.created_by as created6_8_0_, this_.date_created as date7_8_0_, this_.email as email8_0_, this_.enabled as enabled8_0_, this_.first_name as first10_8_0_, this_.last_name as last11_8_0_, this_.last_updated as last12_8_0_, this_.last_updated_by as last13_8_0_, this_.locale as locale8_0_, this_.`password` as password15_8_0_, this_.password_expired as password16_8_0_, this_.phone as phone8_0_, this_.tenant_id as tenant18_8_0_, this_.username as username8_0_ from user this_ where this_.username=? and this_.tenant_id=?
Hibernate: insert into user (version, account_expired, account_locked, apns_token, created_by, date_created, email, enabled, first_name, last_name, last_updated, last_updated_by, locale, `password`, password_expired, phone, tenant_id, username) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: select this_.id as id8_0_, this_.version as version8_0_, this_.account_expired as account3_8_0_, this_.account_locked as account4_8_0_, this_.apns_token as apns5_8_0_, this_.created_by as created6_8_0_, this_.date_created as date7_8_0_, this_.email as email8_0_, this_.enabled as enabled8_0_, this_.first_name as first10_8_0_, this_.last_name as last11_8_0_, this_.last_updated as last12_8_0_, this_.last_updated_by as last13_8_0_, this_.locale as locale8_0_, this_.`password` as password15_8_0_, this_.password_expired as password16_8_0_, this_.phone as phone8_0_, this_.tenant_id as tenant18_8_0_, this_.username as username8_0_ from user this_ where this_.username=? and this_.tenant_id=?
Hibernate: select this_.id as id8_0_, this_.version as version8_0_, this_.account_expired as account3_8_0_, this_.account_locked as account4_8_0_, this_.apns_token as apns5_8_0_, this_.created_by as created6_8_0_, this_.date_created as date7_8_0_, this_.email as email8_0_, this_.enabled as enabled8_0_, this_.first_name as first10_8_0_, this_.last_name as last11_8_0_, this_.last_updated as last12_8_0_, this_.last_updated_by as last13_8_0_, this_.locale as locale8_0_, this_.`password` as password15_8_0_, this_.password_expired as password16_8_0_, this_.phone as phone8_0_, this_.tenant_id as tenant18_8_0_, this_.username as username8_0_ from user this_ where this_.username=? and this_.tenant_id=?
Hibernate: update user set version=?, account_expired=?, account_locked=?, apns_token=?, created_by=?, date_created=?, email=?, enabled=?, first_name=?, last_name=?, last_updated=?, last_updated_by=?, locale=?, `password`=?, password_expired=?, phone=?, tenant_id=?, username=? where id=? and version=?
Hibernate: select this_.id as id8_0_, this_.version as version8_0_, this_.account_expired as account3_8_0_, this_.account_locked as account4_8_0_, this_.apns_token as apns5_8_0_, this_.created_by as created6_8_0_, this_.date_created as date7_8_0_, this_.email as email8_0_, this_.enabled as enabled8_0_, this_.first_name as first10_8_0_, this_.last_name as last11_8_0_, this_.last_updated as last12_8_0_, this_.last_updated_by as last13_8_0_, this_.locale as locale8_0_, this_.`password` as password15_8_0_, this_.password_expired as password16_8_0_, this_.phone as phone8_0_, this_.tenant_id as tenant18_8_0_, this_.username as username8_0_ from user this_ where this_.username=? and this_.tenant_id=?
Hibernate: select this_.id as id3_0_, this_.version as version3_0_, this_.created_by as created3_3_0_, this_.date_created as date4_3_0_, this_.last_updated as last5_3_0_, this_.last_updated_by as last6_3_0_, this_.name as name3_0_ from tenant this_ where this_.name=? limit ?
Hibernate: select this_.id as id8_0_, this_.version as version8_0_, this_.account_expired as account3_8_0_, this_.account_locked as account4_8_0_, this_.apns_token as apns5_8_0_, this_.created_by as created6_8_0_, this_.date_created as date7_8_0_, this_.email as email8_0_, this_.enabled as enabled8_0_, this_.first_name as first10_8_0_, this_.last_name as last11_8_0_, this_.last_updated as last12_8_0_, this_.last_updated_by as last13_8_0_, this_.locale as locale8_0_, this_.`password` as password15_8_0_, this_.password_expired as password16_8_0_, this_.phone as phone8_0_, this_.tenant_id as tenant18_8_0_, this_.username as username8_0_ from user this_ where this_.tenant_id=? and this_.username=? limit ?
Hibernate: select this_.role_id as role1_4_0_, this_.user_id as user2_4_0_, this_.created_by as created3_4_0_, this_.date_created as date4_4_0_, this_.last_updated as last5_4_0_, this_.last_updated_by as last6_4_0_, this_.tenant_id as tenant7_4_0_ from user_role this_ where this_.tenant_id=? and this_.user_id=?
Hibernate: select this_.role_id as role1_4_0_, this_.user_id as user2_4_0_, this_.created_by as created3_4_0_, this_.date_created as date4_4_0_, this_.last_updated as last5_4_0_, this_.last_updated_by as last6_4_0_, this_.tenant_id as tenant7_4_0_ from user_role this_ where this_.tenant_id=? and this_.user_id=?
Interceptor createPage: TopLevelWindow[name=""]
Content of web window [TopLevelWindow[name=""]] changed
== Response was 200 (OK) headers: ==============================================
================================================================================
== Content =====================================================================
{"result":{"type":"USER","code":"SUCCESS","message":"Usuário moovieLover criado"}, "additionalInfo":{"JSESSIONID":"72DDA3F24F7BE1DE9B45110259BC4EBA"}}
================================================================================
#
--Output from testCreateUserNoUserNameEnglish--
Switching to browser client [default]
Creating to new client [default] of type [class com.grailsrocks.functionaltest.client.BrowserClient]

== Making request POST http://localhost:8080/moovt/user/createUser parameters: ==
== Request headers: ============================================================
Accept-Language: en-US
Accept-Encoding: gzip, deflate
Content-Type: application/json
Accept: */*
== Content =====================================================================

				{"tenantname": "naSavassi", "email":"noUserName@test.com", "username": "", "password":"moovieGoer", "firstName":"TestFirstName", lastName: "TestLastName","phone":"800-800-8080", "locale": "en_US"}
				
================================================================================
Hibernate: select this_.id as id3_0_, this_.version as version3_0_, this_.created_by as created3_3_0_, this_.date_created as date4_3_0_, this_.last_updated as last5_3_0_, this_.last_updated_by as last6_3_0_, this_.name as name3_0_ from tenant this_ where this_.name=? limit ?
Interceptor createPage: TopLevelWindow[name=""]
Content of web window [TopLevelWindow[name=""]] changed
== Response was 200 (OK) headers: ==============================================
================================================================================
== Content =====================================================================
{"result":{"type":"SYSTEM","code":"ERROR","message":"The user name must be provided."}}
================================================================================
#
--Output from testCreateUserNoUserNamePortuguese--
Switching to browser client [default]
Creating to new client [default] of type [class com.grailsrocks.functionaltest.client.BrowserClient]

== Making request POST http://localhost:8080/moovt/user/createUser parameters: ==
== Request headers: ============================================================
Accept-Language: pt-BR
Accept-Encoding: gzip, deflate
Content-Type: application/json
Accept: */*
== Content =====================================================================

				{"tenantname": "naSavassi", "email":"noUserName@test.com", "username": "", "password":"moovieGoer", "firstName":"TestFirstName", lastName: "TestLastName","phone":"800-800-8080", "locale": "pt_BR"}
				
================================================================================
Hibernate: select this_.id as id3_0_, this_.version as version3_0_, this_.created_by as created3_3_0_, this_.date_created as date4_3_0_, this_.last_updated as last5_3_0_, this_.last_updated_by as last6_3_0_, this_.name as name3_0_ from tenant this_ where this_.name=? limit ?
Interceptor createPage: TopLevelWindow[name=""]
Content of web window [TopLevelWindow[name=""]] changed
== Response was 200 (OK) headers: ==============================================
================================================================================
== Content =====================================================================
{"result":{"type":"SYSTEM","code":"ERROR","message":"O nome do usuário deve ser preenchido."}}
================================================================================
#
--Output from testCreateUserNoPasswordEnglish--
Switching to browser client [default]
Creating to new client [default] of type [class com.grailsrocks.functionaltest.client.BrowserClient]

== Making request POST http://localhost:8080/moovt/user/createUser parameters: ==
== Request headers: ============================================================
Accept-Language: en-US
Accept-Encoding: gzip, deflate
Content-Type: application/json
Accept: */*
== Content =====================================================================

				{"tenantname": "naSavassi", "email":"noPasswordUser@test.com", "username": "movieFan", "password":"", "firstName":"TestFirstName", lastName: "TestLastName","phone":"800-800-8080", "locale": "en_US"}
				
================================================================================
Hibernate: select this_.id as id3_0_, this_.version as version3_0_, this_.created_by as created3_3_0_, this_.date_created as date4_3_0_, this_.last_updated as last5_3_0_, this_.last_updated_by as last6_3_0_, this_.name as name3_0_ from tenant this_ where this_.name=? limit ?
Hibernate: select this_.id as id8_0_, this_.version as version8_0_, this_.account_expired as account3_8_0_, this_.account_locked as account4_8_0_, this_.apns_token as apns5_8_0_, this_.created_by as created6_8_0_, this_.date_created as date7_8_0_, this_.email as email8_0_, this_.enabled as enabled8_0_, this_.first_name as first10_8_0_, this_.last_name as last11_8_0_, this_.last_updated as last12_8_0_, this_.last_updated_by as last13_8_0_, this_.locale as locale8_0_, this_.`password` as password15_8_0_, this_.password_expired as password16_8_0_, this_.phone as phone8_0_, this_.tenant_id as tenant18_8_0_, this_.username as username8_0_ from user this_ where this_.username=? and this_.tenant_id=?
Interceptor createPage: TopLevelWindow[name=""]
Content of web window [TopLevelWindow[name=""]] changed
== Response was 200 (OK) headers: ==============================================
================================================================================
== Content =====================================================================
{"result":{"type":"SYSTEM","code":"ERROR","message":"The password must be provided."}}
================================================================================
#
--Output from testCreateUserNoPasswordPortuguese--
Switching to browser client [default]
Creating to new client [default] of type [class com.grailsrocks.functionaltest.client.BrowserClient]

== Making request POST http://localhost:8080/moovt/user/createUser parameters: ==
== Request headers: ============================================================
Accept-Language: pt-BR
Accept-Encoding: gzip, deflate
Content-Type: application/json
Accept: */*
== Content =====================================================================

				{"tenantname": "naSavassi", "email":"noPasswordUser@test.com", "username": "movieFan", "password":"", "firstName":"TestFirstName", lastName: "TestLastName","phone":"800-800-8080", "locale": "pt_BR"}
				
================================================================================
Hibernate: select this_.id as id3_0_, this_.version as version3_0_, this_.created_by as created3_3_0_, this_.date_created as date4_3_0_, this_.last_updated as last5_3_0_, this_.last_updated_by as last6_3_0_, this_.name as name3_0_ from tenant this_ where this_.name=? limit ?
Hibernate: select this_.id as id8_0_, this_.version as version8_0_, this_.account_expired as account3_8_0_, this_.account_locked as account4_8_0_, this_.apns_token as apns5_8_0_, this_.created_by as created6_8_0_, this_.date_created as date7_8_0_, this_.email as email8_0_, this_.enabled as enabled8_0_, this_.first_name as first10_8_0_, this_.last_name as last11_8_0_, this_.last_updated as last12_8_0_, this_.last_updated_by as last13_8_0_, this_.locale as locale8_0_, this_.`password` as password15_8_0_, this_.password_expired as password16_8_0_, this_.phone as phone8_0_, this_.tenant_id as tenant18_8_0_, this_.username as username8_0_ from user this_ where this_.username=? and this_.tenant_id=?
Interceptor createPage: TopLevelWindow[name=""]
Content of web window [TopLevelWindow[name=""]] changed
== Response was 200 (OK) headers: ==============================================
================================================================================
== Content =====================================================================
{"result":{"type":"SYSTEM","code":"ERROR","message":"A senha deve ser preenchida."}}
================================================================================
#
--Output from testCreateUserNoEmailEnglish--
Switching to browser client [default]
Creating to new client [default] of type [class com.grailsrocks.functionaltest.client.BrowserClient]

== Making request POST http://localhost:8080/moovt/user/createUser parameters: ==
== Request headers: ============================================================
Accept-Language: en-US
Accept-Encoding: gzip, deflate
Content-Type: application/json
Accept: */*
== Content =====================================================================

				{"tenantname": "naSavassi","email":"", "username": "movieFan", "password":"Welcome!1", "firstName":"TestFirstName", lastName: "TestLastName","phone":"800-800-8080", "locale": "en_US"}
				
================================================================================
Hibernate: select this_.id as id3_0_, this_.version as version3_0_, this_.created_by as created3_3_0_, this_.date_created as date4_3_0_, this_.last_updated as last5_3_0_, this_.last_updated_by as last6_3_0_, this_.name as name3_0_ from tenant this_ where this_.name=? limit ?
Hibernate: select this_.id as id8_0_, this_.version as version8_0_, this_.account_expired as account3_8_0_, this_.account_locked as account4_8_0_, this_.apns_token as apns5_8_0_, this_.created_by as created6_8_0_, this_.date_created as date7_8_0_, this_.email as email8_0_, this_.enabled as enabled8_0_, this_.first_name as first10_8_0_, this_.last_name as last11_8_0_, this_.last_updated as last12_8_0_, this_.last_updated_by as last13_8_0_, this_.locale as locale8_0_, this_.`password` as password15_8_0_, this_.password_expired as password16_8_0_, this_.phone as phone8_0_, this_.tenant_id as tenant18_8_0_, this_.username as username8_0_ from user this_ where this_.username=? and this_.tenant_id=?
Interceptor createPage: TopLevelWindow[name=""]
Content of web window [TopLevelWindow[name=""]] changed
== Response was 200 (OK) headers: ==============================================
================================================================================
== Content =====================================================================
{"result":{"type":"SYSTEM","code":"ERROR","message":"The email must be provided."}}
================================================================================
#
--Output from testCreateUserNoEmailPortuguese--
Switching to browser client [default]
Creating to new client [default] of type [class com.grailsrocks.functionaltest.client.BrowserClient]

== Making request POST http://localhost:8080/moovt/user/createUser parameters: ==
== Request headers: ============================================================
Accept-Language: pt-BR
Accept-Encoding: gzip, deflate
Content-Type: application/json
Accept: */*
== Content =====================================================================

				{"tenantname": "naSavassi","email":"", "username": "movieFan", "password":"Welcome!1", "firstName":"TestFirstName", "lastName": "TestLastName","phone":"800-800-8080", "locale": "pt_BR"}
				
================================================================================
Hibernate: select this_.id as id3_0_, this_.version as version3_0_, this_.created_by as created3_3_0_, this_.date_created as date4_3_0_, this_.last_updated as last5_3_0_, this_.last_updated_by as last6_3_0_, this_.name as name3_0_ from tenant this_ where this_.name=? limit ?
Hibernate: select this_.id as id8_0_, this_.version as version8_0_, this_.account_expired as account3_8_0_, this_.account_locked as account4_8_0_, this_.apns_token as apns5_8_0_, this_.created_by as created6_8_0_, this_.date_created as date7_8_0_, this_.email as email8_0_, this_.enabled as enabled8_0_, this_.first_name as first10_8_0_, this_.last_name as last11_8_0_, this_.last_updated as last12_8_0_, this_.last_updated_by as last13_8_0_, this_.locale as locale8_0_, this_.`password` as password15_8_0_, this_.password_expired as password16_8_0_, this_.phone as phone8_0_, this_.tenant_id as tenant18_8_0_, this_.username as username8_0_ from user this_ where this_.username=? and this_.tenant_id=?
Interceptor createPage: TopLevelWindow[name=""]
Content of web window [TopLevelWindow[name=""]] changed
== Response was 200 (OK) headers: ==============================================
================================================================================
== Content =====================================================================
{"result":{"type":"SYSTEM","code":"ERROR","message":"O email deve ser preenchido."}}
================================================================================
#
--Output from testCreateUserDuplicateUsernameEnglish--
Switching to browser client [default]
Creating to new client [default] of type [class com.grailsrocks.functionaltest.client.BrowserClient]

== Making request POST http://localhost:8080/moovt/user/createUser parameters: ==
== Request headers: ============================================================
Accept-Language: en-US
Accept-Encoding: gzip, deflate
Content-Type: application/json
Accept: */*
== Content =====================================================================

				{"tenantname": "naSavassi", "email":"duplicateUsernameTestEnglish@test.com", "username": "duplicateUser", "password":"moovieGoer", "firstName":"TestFirstName", lastName: "TestLastName","phone":"800-800-8080", "locale": "en_US"}
				
================================================================================
Hibernate: select this_.id as id3_0_, this_.version as version3_0_, this_.created_by as created3_3_0_, this_.date_created as date4_3_0_, this_.last_updated as last5_3_0_, this_.last_updated_by as last6_3_0_, this_.name as name3_0_ from tenant this_ where this_.name=? limit ?
Hibernate: select this_.id as id8_0_, this_.version as version8_0_, this_.account_expired as account3_8_0_, this_.account_locked as account4_8_0_, this_.apns_token as apns5_8_0_, this_.created_by as created6_8_0_, this_.date_created as date7_8_0_, this_.email as email8_0_, this_.enabled as enabled8_0_, this_.first_name as first10_8_0_, this_.last_name as last11_8_0_, this_.last_updated as last12_8_0_, this_.last_updated_by as last13_8_0_, this_.locale as locale8_0_, this_.`password` as password15_8_0_, this_.password_expired as password16_8_0_, this_.phone as phone8_0_, this_.tenant_id as tenant18_8_0_, this_.username as username8_0_ from user this_ where this_.username=? and this_.tenant_id=?
Hibernate: select driver0_.user_id as user1_2_0_, driver0_.version as version2_0_, driver0_.active_status as active3_2_0_, driver0_.car_type as car4_2_0_, driver0_.created_by as created5_2_0_, driver0_.date_created as date6_2_0_, driver0_.last_updated as last7_2_0_, driver0_.last_updated_by as last8_2_0_, driver0_.served_location_id as served9_2_0_, driver0_.tenant_id as tenant10_2_0_ from driver driver0_ where driver0_.user_id=?
Hibernate: select passenger0_.user_id as user1_1_0_, passenger0_.version as version1_0_, passenger0_.created_by as created3_1_0_, passenger0_.date_created as date4_1_0_, passenger0_.last_updated as last5_1_0_, passenger0_.last_updated_by as last6_1_0_, passenger0_.tenant_id as tenant7_1_0_ from passenger passenger0_ where passenger0_.user_id=?
Interceptor createPage: TopLevelWindow[name=""]
Content of web window [TopLevelWindow[name=""]] changed
== Response was 200 (OK) headers: ==============================================
================================================================================
== Content =====================================================================
{"result":{"type":"USER","code":"ERROR","message":"This user (duplicateUser) already exists."}}
================================================================================
#
--Output from testCreateUserDuplicateUsernamePortuguese--
Switching to browser client [default]
Creating to new client [default] of type [class com.grailsrocks.functionaltest.client.BrowserClient]

== Making request POST http://localhost:8080/moovt/user/createUser parameters: ==
== Request headers: ============================================================
Accept-Language: pt-BR
Accept-Encoding: gzip, deflate
Content-Type: application/json
Accept: */*
== Content =====================================================================

				{"tenantname": "naSavassi", "email":"duplicateUsernameTestPortuguese@test.com", "username": "duplicateUser", "password":"moovieLover", "firstName":"TestFirstName", lastName: "TestLastName","phone":"800-800-8080", "locale": "pt_BR"}				
				
================================================================================
Hibernate: select this_.id as id3_0_, this_.version as version3_0_, this_.created_by as created3_3_0_, this_.date_created as date4_3_0_, this_.last_updated as last5_3_0_, this_.last_updated_by as last6_3_0_, this_.name as name3_0_ from tenant this_ where this_.name=? limit ?
Hibernate: select this_.id as id8_0_, this_.version as version8_0_, this_.account_expired as account3_8_0_, this_.account_locked as account4_8_0_, this_.apns_token as apns5_8_0_, this_.created_by as created6_8_0_, this_.date_created as date7_8_0_, this_.email as email8_0_, this_.enabled as enabled8_0_, this_.first_name as first10_8_0_, this_.last_name as last11_8_0_, this_.last_updated as last12_8_0_, this_.last_updated_by as last13_8_0_, this_.locale as locale8_0_, this_.`password` as password15_8_0_, this_.password_expired as password16_8_0_, this_.phone as phone8_0_, this_.tenant_id as tenant18_8_0_, this_.username as username8_0_ from user this_ where this_.username=? and this_.tenant_id=?
Hibernate: select driver0_.user_id as user1_2_0_, driver0_.version as version2_0_, driver0_.active_status as active3_2_0_, driver0_.car_type as car4_2_0_, driver0_.created_by as created5_2_0_, driver0_.date_created as date6_2_0_, driver0_.last_updated as last7_2_0_, driver0_.last_updated_by as last8_2_0_, driver0_.served_location_id as served9_2_0_, driver0_.tenant_id as tenant10_2_0_ from driver driver0_ where driver0_.user_id=?
Hibernate: select passenger0_.user_id as user1_1_0_, passenger0_.version as version1_0_, passenger0_.created_by as created3_1_0_, passenger0_.date_created as date4_1_0_, passenger0_.last_updated as last5_1_0_, passenger0_.last_updated_by as last6_1_0_, passenger0_.tenant_id as tenant7_1_0_ from passenger passenger0_ where passenger0_.user_id=?
Interceptor createPage: TopLevelWindow[name=""]
Content of web window [TopLevelWindow[name=""]] changed
== Response was 200 (OK) headers: ==============================================
================================================================================
== Content =====================================================================
{"result":{"type":"USER","code":"ERROR","message":"Este usuário (duplicateUser) já existe."}}
================================================================================
#
--Output from testCreateUserDuplicateEmailEnglish--
Switching to browser client [default]
Creating to new client [default] of type [class com.grailsrocks.functionaltest.client.BrowserClient]

== Making request POST http://localhost:8080/moovt/user/createUser parameters: ==
== Request headers: ============================================================
Accept-Language: en-US
Accept-Encoding: gzip, deflate
Content-Type: application/json
Accept: */*
== Content =====================================================================

				{"tenantname": "naSavassi", "email":"existingEmail@test.com", "username": "userWithSameEmail", "password":"moovieGoer", "firstName":"TestFirstName", lastName: "TestLastName","phone":"800-800-8080", "locale": "en_US"}
				
================================================================================
Hibernate: select this_.id as id3_0_, this_.version as version3_0_, this_.created_by as created3_3_0_, this_.date_created as date4_3_0_, this_.last_updated as last5_3_0_, this_.last_updated_by as last6_3_0_, this_.name as name3_0_ from tenant this_ where this_.name=? limit ?
Hibernate: select this_.id as id8_0_, this_.version as version8_0_, this_.account_expired as account3_8_0_, this_.account_locked as account4_8_0_, this_.apns_token as apns5_8_0_, this_.created_by as created6_8_0_, this_.date_created as date7_8_0_, this_.email as email8_0_, this_.enabled as enabled8_0_, this_.first_name as first10_8_0_, this_.last_name as last11_8_0_, this_.last_updated as last12_8_0_, this_.last_updated_by as last13_8_0_, this_.locale as locale8_0_, this_.`password` as password15_8_0_, this_.password_expired as password16_8_0_, this_.phone as phone8_0_, this_.tenant_id as tenant18_8_0_, this_.username as username8_0_ from user this_ where this_.username=? and this_.tenant_id=?
Hibernate: select this_.id as id8_0_, this_.version as version8_0_, this_.account_expired as account3_8_0_, this_.account_locked as account4_8_0_, this_.apns_token as apns5_8_0_, this_.created_by as created6_8_0_, this_.date_created as date7_8_0_, this_.email as email8_0_, this_.enabled as enabled8_0_, this_.first_name as first10_8_0_, this_.last_name as last11_8_0_, this_.last_updated as last12_8_0_, this_.last_updated_by as last13_8_0_, this_.locale as locale8_0_, this_.`password` as password15_8_0_, this_.password_expired as password16_8_0_, this_.phone as phone8_0_, this_.tenant_id as tenant18_8_0_, this_.username as username8_0_ from user this_ where this_.username=? and this_.tenant_id=?
Hibernate: insert into user (version, account_expired, account_locked, apns_token, created_by, date_created, email, enabled, first_name, last_name, last_updated, last_updated_by, locale, `password`, password_expired, phone, tenant_id, username) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: select this_.id as id8_0_, this_.version as version8_0_, this_.account_expired as account3_8_0_, this_.account_locked as account4_8_0_, this_.apns_token as apns5_8_0_, this_.created_by as created6_8_0_, this_.date_created as date7_8_0_, this_.email as email8_0_, this_.enabled as enabled8_0_, this_.first_name as first10_8_0_, this_.last_name as last11_8_0_, this_.last_updated as last12_8_0_, this_.last_updated_by as last13_8_0_, this_.locale as locale8_0_, this_.`password` as password15_8_0_, this_.password_expired as password16_8_0_, this_.phone as phone8_0_, this_.tenant_id as tenant18_8_0_, this_.username as username8_0_ from user this_ where this_.username=? and this_.tenant_id=?
Hibernate: select this_.id as id8_0_, this_.version as version8_0_, this_.account_expired as account3_8_0_, this_.account_locked as account4_8_0_, this_.apns_token as apns5_8_0_, this_.created_by as created6_8_0_, this_.date_created as date7_8_0_, this_.email as email8_0_, this_.enabled as enabled8_0_, this_.first_name as first10_8_0_, this_.last_name as last11_8_0_, this_.last_updated as last12_8_0_, this_.last_updated_by as last13_8_0_, this_.locale as locale8_0_, this_.`password` as password15_8_0_, this_.password_expired as password16_8_0_, this_.phone as phone8_0_, this_.tenant_id as tenant18_8_0_, this_.username as username8_0_ from user this_ where this_.username=? and this_.tenant_id=?
Hibernate: update user set version=?, account_expired=?, account_locked=?, apns_token=?, created_by=?, date_created=?, email=?, enabled=?, first_name=?, last_name=?, last_updated=?, last_updated_by=?, locale=?, `password`=?, password_expired=?, phone=?, tenant_id=?, username=? where id=? and version=?
Hibernate: select this_.id as id8_0_, this_.version as version8_0_, this_.account_expired as account3_8_0_, this_.account_locked as account4_8_0_, this_.apns_token as apns5_8_0_, this_.created_by as created6_8_0_, this_.date_created as date7_8_0_, this_.email as email8_0_, this_.enabled as enabled8_0_, this_.first_name as first10_8_0_, this_.last_name as last11_8_0_, this_.last_updated as last12_8_0_, this_.last_updated_by as last13_8_0_, this_.locale as locale8_0_, this_.`password` as password15_8_0_, this_.password_expired as password16_8_0_, this_.phone as phone8_0_, this_.tenant_id as tenant18_8_0_, this_.username as username8_0_ from user this_ where this_.username=? and this_.tenant_id=?
Hibernate: select this_.id as id3_0_, this_.version as version3_0_, this_.created_by as created3_3_0_, this_.date_created as date4_3_0_, this_.last_updated as last5_3_0_, this_.last_updated_by as last6_3_0_, this_.name as name3_0_ from tenant this_ where this_.name=? limit ?
Hibernate: select this_.id as id8_0_, this_.version as version8_0_, this_.account_expired as account3_8_0_, this_.account_locked as account4_8_0_, this_.apns_token as apns5_8_0_, this_.created_by as created6_8_0_, this_.date_created as date7_8_0_, this_.email as email8_0_, this_.enabled as enabled8_0_, this_.first_name as first10_8_0_, this_.last_name as last11_8_0_, this_.last_updated as last12_8_0_, this_.last_updated_by as last13_8_0_, this_.locale as locale8_0_, this_.`password` as password15_8_0_, this_.password_expired as password16_8_0_, this_.phone as phone8_0_, this_.tenant_id as tenant18_8_0_, this_.username as username8_0_ from user this_ where this_.tenant_id=? and this_.username=? limit ?
Hibernate: select this_.role_id as role1_4_0_, this_.user_id as user2_4_0_, this_.created_by as created3_4_0_, this_.date_created as date4_4_0_, this_.last_updated as last5_4_0_, this_.last_updated_by as last6_4_0_, this_.tenant_id as tenant7_4_0_ from user_role this_ where this_.tenant_id=? and this_.user_id=?
Hibernate: select this_.role_id as role1_4_0_, this_.user_id as user2_4_0_, this_.created_by as created3_4_0_, this_.date_created as date4_4_0_, this_.last_updated as last5_4_0_, this_.last_updated_by as last6_4_0_, this_.tenant_id as tenant7_4_0_ from user_role this_ where this_.tenant_id=? and this_.user_id=?
Interceptor createPage: TopLevelWindow[name=""]
Content of web window [TopLevelWindow[name=""]] changed
== Response was 200 (OK) headers: ==============================================
================================================================================
== Content =====================================================================
{"result":{"type":"USER","code":"SUCCESS","message":"User userWithSameEmail created"}, "additionalInfo":{"JSESSIONID":"CDF980A1210FEFF06238DBD5338BFD45"}}
================================================================================
#
Failed: Expected content to loosely contain [ERROR] but it didn't
junit.framework.AssertionFailedError: Expected content to loosely contain [ERROR] but it didn't
	at junit.framework.Assert.fail(Assert.java:50)
	at junit.framework.Assert.assertTrue(Assert.java:20)
	at com.grailsrocks.functionaltest.TestCaseBase.assertContentContains(TestCaseBase.groovy:298)
	at com.grailsrocks.functionaltest.TestCaseBase.invokeMethod(TestCaseBase.groovy:179)
	at com.moovt.UserFunctionalTests.testCreateUserDuplicateEmailEnglish(UserFunctionalTests.groovy:206)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:45)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:42)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20)
	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:28)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:30)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:263)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:68)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:47)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:231)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:60)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:229)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:50)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:222)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:300)
	at org.junit.runners.Suite.runChild(Suite.java:128)
	at org.junit.runners.Suite.runChild(Suite.java:24)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:231)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:60)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:229)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:50)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:222)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:300)
	at org.junit.runners.ParentRunner$run.call(Unknown Source)
	at _GrailsTest_groovy$_run_closure4.doCall(_GrailsTest_groovy:290)
	at _GrailsTest_groovy$_run_closure2.doCall(_GrailsTest_groovy:248)
	at _GrailsTest_groovy$_run_closure1_closure21.doCall(_GrailsTest_groovy:195)
	at _GrailsTest_groovy$_run_closure1.doCall(_GrailsTest_groovy:184)
	at org.codehaus.gant.GantMetaClass.invokeMethod(GantMetaClass.java:133)
	at org.codehaus.gant.GantBinding$_initializeGantBinding_closure5_closure16_closure18.doCall(GantBinding.groovy:185)
	at org.codehaus.gant.GantBinding$_initializeGantBinding_closure5_closure16_closure18.doCall(GantBinding.groovy)
	at org.codehaus.gant.GantBinding.withTargetEvent(GantBinding.groovy:90)
	at org.codehaus.gant.GantBinding.this$4$withTargetEvent(GantBinding.groovy)
	at org.codehaus.gant.GantBinding$_initializeGantBinding_closure5_closure16.doCall(GantBinding.groovy:185)
	at org.codehaus.gant.GantBinding$_initializeGantBinding_closure5_closure16.doCall(GantBinding.groovy)
	at org.codehaus.gant.GantMetaClass.invokeMethod(GantMetaClass.java:133)
	at TestApp$_run_closure1.doCall(TestApp.groovy:82)
	at org.codehaus.gant.GantMetaClass.invokeMethod(GantMetaClass.java:133)
	at org.codehaus.gant.GantBinding$_initializeGantBinding_closure5_closure16_closure18.doCall(GantBinding.groovy:185)
	at org.codehaus.gant.GantBinding$_initializeGantBinding_closure5_closure16_closure18.doCall(GantBinding.groovy)
	at org.codehaus.gant.GantBinding.withTargetEvent(GantBinding.groovy:90)
	at org.codehaus.gant.GantBinding.this$4$withTargetEvent(GantBinding.groovy)
	at org.codehaus.gant.GantBinding$_initializeGantBinding_closure5_closure16.doCall(GantBinding.groovy:185)
	at org.codehaus.gant.GantBinding$_initializeGantBinding_closure5_closure16.doCall(GantBinding.groovy)
URL: http://localhost:8080/moovt/user/createUser


--Output from testCreateUserDuplicateEmailPortuguese--
Switching to browser client [default]
Creating to new client [default] of type [class com.grailsrocks.functionaltest.client.BrowserClient]

== Making request POST http://localhost:8080/moovt/user/createUser parameters: ==
== Request headers: ============================================================
Accept-Language: pt-BR
Accept-Encoding: gzip, deflate
Content-Type: application/json
Accept: */*
== Content =====================================================================

				{"tenantname": "naSavassi", "email":"existingEmail@test.com", "username": "userWithSameEmail", "password":"moovieLover", "firstName":"TestFirstName", lastName: "TestLastName","phone":"800-800-8080", "locale": "pt_BR"}
				
================================================================================
Hibernate: select this_.id as id3_0_, this_.version as version3_0_, this_.created_by as created3_3_0_, this_.date_created as date4_3_0_, this_.last_updated as last5_3_0_, this_.last_updated_by as last6_3_0_, this_.name as name3_0_ from tenant this_ where this_.name=? limit ?
Hibernate: select this_.id as id8_0_, this_.version as version8_0_, this_.account_expired as account3_8_0_, this_.account_locked as account4_8_0_, this_.apns_token as apns5_8_0_, this_.created_by as created6_8_0_, this_.date_created as date7_8_0_, this_.email as email8_0_, this_.enabled as enabled8_0_, this_.first_name as first10_8_0_, this_.last_name as last11_8_0_, this_.last_updated as last12_8_0_, this_.last_updated_by as last13_8_0_, this_.locale as locale8_0_, this_.`password` as password15_8_0_, this_.password_expired as password16_8_0_, this_.phone as phone8_0_, this_.tenant_id as tenant18_8_0_, this_.username as username8_0_ from user this_ where this_.username=? and this_.tenant_id=?
Hibernate: select driver0_.user_id as user1_2_0_, driver0_.version as version2_0_, driver0_.active_status as active3_2_0_, driver0_.car_type as car4_2_0_, driver0_.created_by as created5_2_0_, driver0_.date_created as date6_2_0_, driver0_.last_updated as last7_2_0_, driver0_.last_updated_by as last8_2_0_, driver0_.served_location_id as served9_2_0_, driver0_.tenant_id as tenant10_2_0_ from driver driver0_ where driver0_.user_id=?
Hibernate: select passenger0_.user_id as user1_1_0_, passenger0_.version as version1_0_, passenger0_.created_by as created3_1_0_, passenger0_.date_created as date4_1_0_, passenger0_.last_updated as last5_1_0_, passenger0_.last_updated_by as last6_1_0_, passenger0_.tenant_id as tenant7_1_0_ from passenger passenger0_ where passenger0_.user_id=?
Interceptor createPage: TopLevelWindow[name=""]
Content of web window [TopLevelWindow[name=""]] changed
== Response was 200 (OK) headers: ==============================================
================================================================================
== Content =====================================================================
{"result":{"type":"USER","code":"ERROR","message":"Este usuário (userWithSameEmail) já existe."}}
================================================================================
#
Failed: Expected content to loosely contain [Este email (existingEmail@test.com) já existe] but it didn't
junit.framework.AssertionFailedError: Expected content to loosely contain [Este email (existingEmail@test.com) já existe] but it didn't
	at junit.framework.Assert.fail(Assert.java:50)
	at junit.framework.Assert.assertTrue(Assert.java:20)
	at com.grailsrocks.functionaltest.TestCaseBase.assertContentContains(TestCaseBase.groovy:298)
	at com.grailsrocks.functionaltest.TestCaseBase.invokeMethod(TestCaseBase.groovy:179)
	at com.moovt.UserFunctionalTests.testCreateUserDuplicateEmailPortuguese(UserFunctionalTests.groovy:224)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:45)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:42)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20)
	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:28)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:30)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:263)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:68)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:47)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:231)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:60)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:229)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:50)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:222)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:300)
	at org.junit.runners.Suite.runChild(Suite.java:128)
	at org.junit.runners.Suite.runChild(Suite.java:24)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:231)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:60)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:229)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:50)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:222)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:300)
	at org.junit.runners.ParentRunner$run.call(Unknown Source)
	at _GrailsTest_groovy$_run_closure4.doCall(_GrailsTest_groovy:290)
	at _GrailsTest_groovy$_run_closure2.doCall(_GrailsTest_groovy:248)
	at _GrailsTest_groovy$_run_closure1_closure21.doCall(_GrailsTest_groovy:195)
	at _GrailsTest_groovy$_run_closure1.doCall(_GrailsTest_groovy:184)
	at org.codehaus.gant.GantMetaClass.invokeMethod(GantMetaClass.java:133)
	at org.codehaus.gant.GantBinding$_initializeGantBinding_closure5_closure16_closure18.doCall(GantBinding.groovy:185)
	at org.codehaus.gant.GantBinding$_initializeGantBinding_closure5_closure16_closure18.doCall(GantBinding.groovy)
	at org.codehaus.gant.GantBinding.withTargetEvent(GantBinding.groovy:90)
	at org.codehaus.gant.GantBinding.this$4$withTargetEvent(GantBinding.groovy)
	at org.codehaus.gant.GantBinding$_initializeGantBinding_closure5_closure16.doCall(GantBinding.groovy:185)
	at org.codehaus.gant.GantBinding$_initializeGantBinding_closure5_closure16.doCall(GantBinding.groovy)
	at org.codehaus.gant.GantMetaClass.invokeMethod(GantMetaClass.java:133)
	at TestApp$_run_closure1.doCall(TestApp.groovy:82)
	at org.codehaus.gant.GantMetaClass.invokeMethod(GantMetaClass.java:133)
	at org.codehaus.gant.GantBinding$_initializeGantBinding_closure5_closure16_closure18.doCall(GantBinding.groovy:185)
	at org.codehaus.gant.GantBinding$_initializeGantBinding_closure5_closure16_closure18.doCall(GantBinding.groovy)
	at org.codehaus.gant.GantBinding.withTargetEvent(GantBinding.groovy:90)
	at org.codehaus.gant.GantBinding.this$4$withTargetEvent(GantBinding.groovy)
	at org.codehaus.gant.GantBinding$_initializeGantBinding_closure5_closure16.doCall(GantBinding.groovy:185)
	at org.codehaus.gant.GantBinding$_initializeGantBinding_closure5_closure16.doCall(GantBinding.groovy)
URL: http://localhost:8080/moovt/user/createUser


--Output from testResetPasswordSuccessEnglish--
Switching to browser client [default]
Creating to new client [default] of type [class com.grailsrocks.functionaltest.client.BrowserClient]

== Making request POST http://localhost:8080/moovt/user/resetPassword parameters: ==
== Request headers: ============================================================
Accept-Language: en-US
Accept-Encoding: gzip, deflate
Content-Type: application/json
Accept: */*
== Content =====================================================================

				{"tenantname": "WorldTaxi", "email":"jforgetful@worldtaxi.com"}
				
================================================================================
Hibernate: select this_.id as id3_0_, this_.version as version3_0_, this_.created_by as created3_3_0_, this_.date_created as date4_3_0_, this_.last_updated as last5_3_0_, this_.last_updated_by as last6_3_0_, this_.name as name3_0_ from tenant this_ where this_.name=? limit ?
Hibernate: select this_.id as id8_0_, this_.version as version8_0_, this_.account_expired as account3_8_0_, this_.account_locked as account4_8_0_, this_.apns_token as apns5_8_0_, this_.created_by as created6_8_0_, this_.date_created as date7_8_0_, this_.email as email8_0_, this_.enabled as enabled8_0_, this_.first_name as first10_8_0_, this_.last_name as last11_8_0_, this_.last_updated as last12_8_0_, this_.last_updated_by as last13_8_0_, this_.locale as locale8_0_, this_.`password` as password15_8_0_, this_.password_expired as password16_8_0_, this_.phone as phone8_0_, this_.tenant_id as tenant18_8_0_, this_.username as username8_0_ from user this_ where (this_.tenant_id=? and this_.email=?)
Hibernate: select driver0_.user_id as user1_2_0_, driver0_.version as version2_0_, driver0_.active_status as active3_2_0_, driver0_.car_type as car4_2_0_, driver0_.created_by as created5_2_0_, driver0_.date_created as date6_2_0_, driver0_.last_updated as last7_2_0_, driver0_.last_updated_by as last8_2_0_, driver0_.served_location_id as served9_2_0_, driver0_.tenant_id as tenant10_2_0_ from driver driver0_ where driver0_.user_id=?
Hibernate: select passenger0_.user_id as user1_1_0_, passenger0_.version as version1_0_, passenger0_.created_by as created3_1_0_, passenger0_.date_created as date4_1_0_, passenger0_.last_updated as last5_1_0_, passenger0_.last_updated_by as last6_1_0_, passenger0_.tenant_id as tenant7_1_0_ from passenger passenger0_ where passenger0_.user_id=?
Hibernate: select this_.id as id8_0_, this_.version as version8_0_, this_.account_expired as account3_8_0_, this_.account_locked as account4_8_0_, this_.apns_token as apns5_8_0_, this_.created_by as created6_8_0_, this_.date_created as date7_8_0_, this_.email as email8_0_, this_.enabled as enabled8_0_, this_.first_name as first10_8_0_, this_.last_name as last11_8_0_, this_.last_updated as last12_8_0_, this_.last_updated_by as last13_8_0_, this_.locale as locale8_0_, this_.`password` as password15_8_0_, this_.password_expired as password16_8_0_, this_.phone as phone8_0_, this_.tenant_id as tenant18_8_0_, this_.username as username8_0_ from user this_ where this_.username=? and this_.tenant_id=?
Hibernate: select this_.id as id8_0_, this_.version as version8_0_, this_.account_expired as account3_8_0_, this_.account_locked as account4_8_0_, this_.apns_token as apns5_8_0_, this_.created_by as created6_8_0_, this_.date_created as date7_8_0_, this_.email as email8_0_, this_.enabled as enabled8_0_, this_.first_name as first10_8_0_, this_.last_name as last11_8_0_, this_.last_updated as last12_8_0_, this_.last_updated_by as last13_8_0_, this_.locale as locale8_0_, this_.`password` as password15_8_0_, this_.password_expired as password16_8_0_, this_.phone as phone8_0_, this_.tenant_id as tenant18_8_0_, this_.username as username8_0_ from user this_ where this_.username=? and this_.tenant_id=?
Hibernate: update user set version=?, account_expired=?, account_locked=?, apns_token=?, created_by=?, date_created=?, email=?, enabled=?, first_name=?, last_name=?, last_updated=?, last_updated_by=?, locale=?, `password`=?, password_expired=?, phone=?, tenant_id=?, username=? where id=? and version=?
Hibernate: insert into notification_task (version, created_by, date_created, failed_reason, last_updated, last_updated_by, message, notification_from, notification_to, process_date, subject, task_status, task_type, tenant_id) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Interceptor createPage: TopLevelWindow[name=""]
Content of web window [TopLevelWindow[name=""]] changed
== Response was 200 (OK) headers: ==============================================
================================================================================
== Content =====================================================================
{"result":{"type":"USER","code":"SUCCESS","message":"Your new password was sent to jforgetful@worldtaxi.com."}}
================================================================================
#
--Output from testResetPasswordSuccessPortuguese--
Switching to browser client [default]
Creating to new client [default] of type [class com.grailsrocks.functionaltest.client.BrowserClient]

== Making request POST http://localhost:8080/moovt/user/resetPassword parameters: ==
== Request headers: ============================================================
Accept-Language: pt-BR
Accept-Encoding: gzip, deflate
Content-Type: application/json
Accept: */*
== Content =====================================================================

				{"tenantname": "WorldTaxi", "email":"jforgetful@worldtaxi.com"}
				
================================================================================
Hibernate: select this_.id as id3_0_, this_.version as version3_0_, this_.created_by as created3_3_0_, this_.date_created as date4_3_0_, this_.last_updated as last5_3_0_, this_.last_updated_by as last6_3_0_, this_.name as name3_0_ from tenant this_ where this_.name=? limit ?
Hibernate: select this_.id as id8_0_, this_.version as version8_0_, this_.account_expired as account3_8_0_, this_.account_locked as account4_8_0_, this_.apns_token as apns5_8_0_, this_.created_by as created6_8_0_, this_.date_created as date7_8_0_, this_.email as email8_0_, this_.enabled as enabled8_0_, this_.first_name as first10_8_0_, this_.last_name as last11_8_0_, this_.last_updated as last12_8_0_, this_.last_updated_by as last13_8_0_, this_.locale as locale8_0_, this_.`password` as password15_8_0_, this_.password_expired as password16_8_0_, this_.phone as phone8_0_, this_.tenant_id as tenant18_8_0_, this_.username as username8_0_ from user this_ where (this_.tenant_id=? and this_.email=?)
Hibernate: select driver0_.user_id as user1_2_0_, driver0_.version as version2_0_, driver0_.active_status as active3_2_0_, driver0_.car_type as car4_2_0_, driver0_.created_by as created5_2_0_, driver0_.date_created as date6_2_0_, driver0_.last_updated as last7_2_0_, driver0_.last_updated_by as last8_2_0_, driver0_.served_location_id as served9_2_0_, driver0_.tenant_id as tenant10_2_0_ from driver driver0_ where driver0_.user_id=?
Hibernate: select passenger0_.user_id as user1_1_0_, passenger0_.version as version1_0_, passenger0_.created_by as created3_1_0_, passenger0_.date_created as date4_1_0_, passenger0_.last_updated as last5_1_0_, passenger0_.last_updated_by as last6_1_0_, passenger0_.tenant_id as tenant7_1_0_ from passenger passenger0_ where passenger0_.user_id=?
Hibernate: select this_.id as id8_0_, this_.version as version8_0_, this_.account_expired as account3_8_0_, this_.account_locked as account4_8_0_, this_.apns_token as apns5_8_0_, this_.created_by as created6_8_0_, this_.date_created as date7_8_0_, this_.email as email8_0_, this_.enabled as enabled8_0_, this_.first_name as first10_8_0_, this_.last_name as last11_8_0_, this_.last_updated as last12_8_0_, this_.last_updated_by as last13_8_0_, this_.locale as locale8_0_, this_.`password` as password15_8_0_, this_.password_expired as password16_8_0_, this_.phone as phone8_0_, this_.tenant_id as tenant18_8_0_, this_.username as username8_0_ from user this_ where this_.username=? and this_.tenant_id=?
Hibernate: select this_.id as id8_0_, this_.version as version8_0_, this_.account_expired as account3_8_0_, this_.account_locked as account4_8_0_, this_.apns_token as apns5_8_0_, this_.created_by as created6_8_0_, this_.date_created as date7_8_0_, this_.email as email8_0_, this_.enabled as enabled8_0_, this_.first_name as first10_8_0_, this_.last_name as last11_8_0_, this_.last_updated as last12_8_0_, this_.last_updated_by as last13_8_0_, this_.locale as locale8_0_, this_.`password` as password15_8_0_, this_.password_expired as password16_8_0_, this_.phone as phone8_0_, this_.tenant_id as tenant18_8_0_, this_.username as username8_0_ from user this_ where this_.username=? and this_.tenant_id=?
Hibernate: update user set version=?, account_expired=?, account_locked=?, apns_token=?, created_by=?, date_created=?, email=?, enabled=?, first_name=?, last_name=?, last_updated=?, last_updated_by=?, locale=?, `password`=?, password_expired=?, phone=?, tenant_id=?, username=? where id=? and version=?
Hibernate: insert into notification_task (version, created_by, date_created, failed_reason, last_updated, last_updated_by, message, notification_from, notification_to, process_date, subject, task_status, task_type, tenant_id) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Interceptor createPage: TopLevelWindow[name=""]
Content of web window [TopLevelWindow[name=""]] changed
== Response was 200 (OK) headers: ==============================================
================================================================================
== Content =====================================================================
{"result":{"type":"USER","code":"SUCCESS","message":"A sua nova senha foi enviada para jforgetful@worldtaxi.com."}}
================================================================================
#
--Output from testResetPasswordBadMessageNoTenante--
Switching to browser client [default]
Creating to new client [default] of type [class com.grailsrocks.functionaltest.client.BrowserClient]

== Making request POST http://localhost:8080/moovt/user/resetPassword parameters: ==
== Request headers: ============================================================
Accept-Encoding: gzip, deflate
Content-Type: application/json
Accept: */*
== Content =====================================================================

				{"tenantXame": "WorldTaxi", "email":"jforgetful@worldtaxi.com"}
				
================================================================================
Interceptor createPage: TopLevelWindow[name=""]
Content of web window [TopLevelWindow[name=""]] changed
== Response was 200 (OK) headers: ==============================================
================================================================================
== Content =====================================================================
{"result":{"type":"SYSTEM","code":"ERROR","message":"JSONObject[\"tenantname\"] not found."}}
================================================================================
#
--Output from testResetPasswordBadMessageNoEmail--
Switching to browser client [default]
Creating to new client [default] of type [class com.grailsrocks.functionaltest.client.BrowserClient]

== Making request POST http://localhost:8080/moovt/user/resetPassword parameters: ==
== Request headers: ============================================================
Accept-Encoding: gzip, deflate
Content-Type: application/json
Accept: */*
== Content =====================================================================

				{"tenantname": "WorldTaxi", "emailX":"jforgetful@worldtaxi.com"}
				
================================================================================
Interceptor createPage: TopLevelWindow[name=""]
Content of web window [TopLevelWindow[name=""]] changed
== Response was 200 (OK) headers: ==============================================
================================================================================
== Content =====================================================================
{"result":{"type":"SYSTEM","code":"ERROR","message":"JSONObject[\"email\"] not found."}}
================================================================================
#
--Output from testResetPasswordTenantEmailNotFoundEnglish--
Switching to browser client [default]
Creating to new client [default] of type [class com.grailsrocks.functionaltest.client.BrowserClient]

== Making request POST http://localhost:8080/moovt/user/resetPassword parameters: ==
== Request headers: ============================================================
Accept-Language: en-US
Accept-Encoding: gzip, deflate
Content-Type: application/json
Accept: */*
== Content =====================================================================

				{"tenantname": "WorldTaxi", "email":"jforgetfulx@worldtaxi.com"}
				
================================================================================
Hibernate: select this_.id as id3_0_, this_.version as version3_0_, this_.created_by as created3_3_0_, this_.date_created as date4_3_0_, this_.last_updated as last5_3_0_, this_.last_updated_by as last6_3_0_, this_.name as name3_0_ from tenant this_ where this_.name=? limit ?
Hibernate: select this_.id as id8_0_, this_.version as version8_0_, this_.account_expired as account3_8_0_, this_.account_locked as account4_8_0_, this_.apns_token as apns5_8_0_, this_.created_by as created6_8_0_, this_.date_created as date7_8_0_, this_.email as email8_0_, this_.enabled as enabled8_0_, this_.first_name as first10_8_0_, this_.last_name as last11_8_0_, this_.last_updated as last12_8_0_, this_.last_updated_by as last13_8_0_, this_.locale as locale8_0_, this_.`password` as password15_8_0_, this_.password_expired as password16_8_0_, this_.phone as phone8_0_, this_.tenant_id as tenant18_8_0_, this_.username as username8_0_ from user this_ where (this_.tenant_id=? and this_.email=?)
Interceptor createPage: TopLevelWindow[name=""]
Content of web window [TopLevelWindow[name=""]] changed
== Response was 200 (OK) headers: ==============================================
================================================================================
== Content =====================================================================
{"result":{"type":"USER","code":"ERROR","message":"This email (jforgetfulx@worldtaxi.com) was not found in the system."}}
================================================================================
#
--Output from testResetPasswordTenantEmailNotFoundPortuguese--
Switching to browser client [default]
Creating to new client [default] of type [class com.grailsrocks.functionaltest.client.BrowserClient]

== Making request POST http://localhost:8080/moovt/user/resetPassword parameters: ==
== Request headers: ============================================================
Accept-Language: pt-BR
Accept-Encoding: gzip, deflate
Content-Type: application/json
Accept: */*
== Content =====================================================================

				{"tenantname": "WorldTaxi", "email":"jforgetfulx@worldtaxi.com"}
				
================================================================================
Hibernate: select this_.id as id3_0_, this_.version as version3_0_, this_.created_by as created3_3_0_, this_.date_created as date4_3_0_, this_.last_updated as last5_3_0_, this_.last_updated_by as last6_3_0_, this_.name as name3_0_ from tenant this_ where this_.name=? limit ?
Hibernate: select this_.id as id8_0_, this_.version as version8_0_, this_.account_expired as account3_8_0_, this_.account_locked as account4_8_0_, this_.apns_token as apns5_8_0_, this_.created_by as created6_8_0_, this_.date_created as date7_8_0_, this_.email as email8_0_, this_.enabled as enabled8_0_, this_.first_name as first10_8_0_, this_.last_name as last11_8_0_, this_.last_updated as last12_8_0_, this_.last_updated_by as last13_8_0_, this_.locale as locale8_0_, this_.`password` as password15_8_0_, this_.password_expired as password16_8_0_, this_.phone as phone8_0_, this_.tenant_id as tenant18_8_0_, this_.username as username8_0_ from user this_ where (this_.tenant_id=? and this_.email=?)
Interceptor createPage: TopLevelWindow[name=""]
Content of web window [TopLevelWindow[name=""]] changed
== Response was 200 (OK) headers: ==============================================
================================================================================
== Content =====================================================================
{"result":{"type":"USER","code":"ERROR","message":"Este email (jforgetfulx@worldtaxi.com) não foi encontrado no sistema."}}
================================================================================
#
]]></system-out>

      <system-err><![CDATA[--Output from testCreateUserBadMessage--
--Output from testCreateUserBadTenantEnglish--
--Output from testCreateUserSuccessEnglish--
--Output from testCreateUserSuccessPortuquese--
--Output from testCreateUserNoUserNameEnglish--
--Output from testCreateUserNoUserNamePortuguese--
--Output from testCreateUserNoPasswordEnglish--
--Output from testCreateUserNoPasswordPortuguese--
--Output from testCreateUserNoEmailEnglish--
--Output from testCreateUserNoEmailPortuguese--
--Output from testCreateUserDuplicateUsernameEnglish--
--Output from testCreateUserDuplicateUsernamePortuguese--
--Output from testCreateUserDuplicateEmailEnglish--
--Output from testCreateUserDuplicateEmailPortuguese--
--Output from testResetPasswordSuccessEnglish--
--Output from testResetPasswordSuccessPortuguese--
--Output from testResetPasswordBadMessageNoTenante--
--Output from testResetPasswordBadMessageNoEmail--
--Output from testResetPasswordTenantEmailNotFoundEnglish--
--Output from testResetPasswordTenantEmailNotFoundPortuguese--
]]></system-err>

  </testsuite>
</testsuites>
